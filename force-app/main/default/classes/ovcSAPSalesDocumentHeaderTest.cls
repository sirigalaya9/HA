/* 
 * Generated by Overcast UTC 2024-03-12 09:25:32Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ovcSAPSalesDocumentHeaderTest {
    @istest
    private static void testovcSAPSalesDocumentHeader() {
        ovcSAPSalesDocumentHeader actual = new ovcSAPSalesDocumentHeader();
        system.assertNotEquals(null, actual.VBAK);
    }

    @istest
    private static void testVBAK() {
        ovcSAPSalesDocumentHeader.VBAK actual = new ovcSAPSalesDocumentHeader.VBAK();

        actual.MANDT = 'a';
        actual.VBELN = 'a';
        actual.ERDAT = Date.newInstance(2000,1,1);
        actual.ERZET = 'a';
        actual.ERNAM = 'a';
        actual.ANGDT = Date.newInstance(2000,1,1);
        actual.BNDDT = Date.newInstance(2000,1,1);
        actual.AUDAT = Date.newInstance(2000,1,1);
        actual.VBTYP = 'a';
        actual.TRVOG = 'a';
        actual.AUART = 'a';
        actual.AUGRU = 'a';
        actual.GWLDT = Date.newInstance(2000,1,1);
        actual.SUBMI = 'a';
        actual.LIFSK = 'a';
        actual.FAKSK = 'a';
        actual.NETWR = 0;
        actual.WAERK = 'a';
        actual.VKORG = 'a';
        actual.VTWEG = 'a';
        actual.SPART = 'a';
        actual.VKGRP = 'a';
        actual.VKBUR = 'a';
        actual.GSBER = 'a';
        actual.GSKST = 'a';
        actual.GUEBG = Date.newInstance(2000,1,1);
        actual.GUEEN = Date.newInstance(2000,1,1);
        actual.KNUMV = 'a';
        actual.VDATU = Date.newInstance(2000,1,1);
        actual.VPRGR = 'a';
        actual.AUTLF = 'a';
        actual.VBKLA = 'a';
        actual.VBKLT = 'a';
        actual.KALSM = 'a';
        actual.VSBED = 'a';
        actual.FKARA = 'a';
        actual.AWAHR = 'a';
        actual.KTEXT = 'a';
        actual.BSTNK = 'a';
        actual.BSARK = 'a';
        actual.BSTDK = Date.newInstance(2000,1,1);
        actual.BSTZD = 'a';
        actual.IHREZ = 'a';
        actual.BNAME = 'a';
        actual.TELF1 = 'a';
        actual.MAHZA = 0;
        actual.MAHDT = Date.newInstance(2000,1,1);
        actual.KUNNR = 'a';
        actual.KOSTL = 'a';
        actual.STAFO = 'a';
        actual.STWAE = 'a';
        actual.AEDAT = Date.newInstance(2000,1,1);
        actual.KVGR1 = 'a';
        actual.KVGR2 = 'a';
        actual.KVGR3 = 'a';
        actual.KVGR4 = 'a';
        actual.KVGR5 = 'a';
        actual.KNUMA = 'a';
        actual.KOKRS = 'a';
        actual.PS_PSP_PNR = 'a';
        actual.KURST = 'a';
        actual.KKBER = 'a';
        actual.KNKLI = 'a';
        actual.GRUPP = 'a';
        actual.SBGRP = 'a';
        actual.CTLPC = 'a';
        actual.CMWAE = 'a';
        actual.CMFRE = Date.newInstance(2000,1,1);
        actual.CMNUP = Date.newInstance(2000,1,1);
        actual.CMNGV = Date.newInstance(2000,1,1);
        actual.AMTBL = 0;
        actual.HITYP_PR = 'a';
        actual.ABRVW = 'a';
        actual.ABDIS = 'a';
        actual.VGBEL = 'a';
        actual.OBJNR = 'a';
        actual.BUKRS_VF = 'a';
        actual.TAXK1 = 'a';
        actual.TAXK2 = 'a';
        actual.TAXK3 = 'a';
        actual.TAXK4 = 'a';
        actual.TAXK5 = 'a';
        actual.TAXK6 = 'a';
        actual.TAXK7 = 'a';
        actual.TAXK8 = 'a';
        actual.TAXK9 = 'a';
        actual.XBLNR = 'a';
        actual.ZUONR = 'a';
        actual.VGTYP = 'a';
        actual.KALSM_CH = 'a';
        actual.AGRZR = 'a';
        actual.AUFNR = 'a';
        actual.QMNUM = 'a';
        actual.VBELN_GRP = 'a';
        actual.SCHEME_GRP = 'a';
        actual.ABRUF_PART = 'a';
        actual.ABHOD = Date.newInstance(2000,1,1);
        actual.ABHOV = 'a';
        actual.ABHOB = 'a';
        actual.RPLNR = 'a';
        actual.VZEIT = 'a';
        actual.STCEG_L = 'a';
        actual.LANDTX = 'a';
        actual.XEGDR = 'a';
        actual.ENQUEUE_GRP = 'a';
        actual.DAT_FZAU = Date.newInstance(2000,1,1);
        actual.FMBDAT = Date.newInstance(2000,1,1);
        actual.VSNMR_V = 'a';
        actual.HANDLE = 'a';
        actual.PROLI = 'a';
        actual.CONT_DG = 'a';
        actual.CRM_GUID = 'a';
        actual.UPD_TMSTMP = 0;
        actual.MSR_ID = 'a';
        actual.TM_CTRL_KEY = 'a';
        actual.HANDOVERLOC = 'a';
        actual.x_DATAAGING = Date.newInstance(2000,1,1);
        actual.GLO_LOG_REF1_HD = 'a';
        actual.FISDUMMY = 'a';
        actual.x_FIS_KASSE = 'a';
        actual.x_FIS_CCINS = 'a';
        actual.x_FIS_KAUTION = 0;
        actual.x_FIS_CCINS2 = 'a';
        actual.x_FIS_CASH_KASSE = 'a';
        actual.x_FIS_CASH_ZHART = 'a';
        actual.x_FIS_CASH_PRTYP = 'a';
        actual.x_FIS_EEK_HANDLE = 'a';
        actual.x_FIS_LE_ALZVO = 'a';
        actual.x_FIS_LE_ALZBI = 'a';
        actual.x_FIS_LVSSTEP = 'a';
        actual.x_FIS_GLVNR = 'a';
        actual.x_FIS_ANZHIE = 'a';
        actual.x_FIS_PDL_KZ_VSF = 'a';
        actual.x_FIS_PDL_PKDL = 'a';
        actual.x_FIS_PDL_VSART = 'a';
        actual.x_FIS_SBNAM = 'a';
        actual.x_FIS_KZ_HNWAG = 'a';
        actual.x_FISSAN_PRJNR = 'a';
        actual.x_FISSAN_PBABK = 'a';
        actual.x_FISSAN_WVDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_SUBMISD = Date.newInstance(2000,1,1);
        actual.x_FISSAN_WUNSCHD = Date.newInstance(2000,1,1);
        actual.x_FISSAN_VERGDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_AUSDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_BAUDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_MONTDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_IDAT_PL = Date.newInstance(2000,1,1);
        actual.x_FISSAN_IDAT_IST = Date.newInstance(2000,1,1);
        actual.x_FISSAN_PROJPOS = 'a';
        actual.x_FISSAN_PROJUPOS = 'a';
        actual.x_FIS_ABGRU = 'a';
        actual.x_FISSAN_PRBEZ = 'a';
        actual.x_FISSAN_PBEZ2 = 'a';
        actual.x_FISSAN_PRBEZG = 'a';
        actual.x_FISSAN_PBEZ2G = 'a';
        actual.x_FISSAN_XABHO = 'a';
        actual.x_FISSAN_VTRKZ = 'a';
        actual.x_FISSAN_VTOUR = 'a';
        actual.x_FISSAN_FROUTE = 'a';
        actual.x_FIS_KOMMI_TEXT1 = 'a';
        actual.x_FIS_KOMMI_TEXT2 = 'a';
        actual.x_FIS_AUSWNR = 'a';
        actual.x_FIS_UNAME_AUSW = 'a';
        actual.x_FIS_KZ_AUSW = 'a';
        actual.x_FIS_LADEZEIT = 'a';
        actual.x_FIS_KZSOBKZ = 'a';
        actual.x_FIS_VGAST = 'a';
        actual.x_FIS_MEMDAT = Date.newInstance(2000,1,1);
        actual.x_FIS_MEMUSR = 'a';
        actual.x_FIS_DRUKZ = 'a';
        actual.FISDUMMY_T = 'a';
        actual.x_FIS_TIAUTIZU_OK = 'a';
        actual.x_FIS_DB_USER = 'a';
        actual.x_FIS_DB_DATUM = Date.newInstance(2000,1,1);
        actual.PSM_BUDAT = Date.newInstance(2000,1,1);
        actual.FSH_KVGR6 = 'a';
        actual.FSH_KVGR7 = 'a';
        actual.FSH_KVGR8 = 'a';
        actual.FSH_KVGR9 = 'a';
        actual.FSH_KVGR10 = 'a';
        actual.FSH_REREG = 'a';
        actual.FSH_CQ_CHECK = 'a';
        actual.FSH_VRSN_STATUS = 'a';
        actual.FSH_TRANSACTION = 'a';
        actual.FSH_VAS_CG = 'a';
        actual.FSH_CANDATE = Date.newInstance(2000,1,1);
        actual.FSH_SS = 'a';
        actual.FSH_OS_STG_CHANGE = 'a';
        actual.SWENR = 'a';
        actual.SMENR = 'a';
        actual.PHASE = 'a';
        actual.MTLAUR = 'a';
        actual.STAGE = 0;
        actual.HB_CONT_REASON = 'a';
        actual.HB_EXPDATE = Date.newInstance(2000,1,1);
        actual.HB_RESDATE = Date.newInstance(2000,1,1);
        actual.MILL_APPL_ID = 'a';
        actual.TAS = 'a';
        actual.BETC = 'a';
        actual.MOD_ALLOW = 'a';
        actual.CANCEL_ALLOW = 'a';
        actual.PAY_METHOD = 'a';
        actual.BPN = 'a';
        actual.REP_FREQ = 'a';
        actual.LOGSYSB = 'a';
        actual.KALCD = 'a';
        actual.MULTI = 'a';
        actual.SPPAYM = 'a';
        actual.WTYSC_CLM_HDR = 'a';
        actual.ZZHAC_COUPON = 'a';
        actual.ZZHAC_CACNUM = 'a';
        actual.ZZHCN_PS_RESI = 'a';
        actual.ZZHCN_PS_SATU = 'a';
        actual.ZZHCN_PS_LIFT = 'a';
        actual.ZZHCN_PS_CALL = 'a';
        actual.ZZHCN_PS_INSI = 'a';
        actual.ZZHCN_PS_APPO = 'a';
        actual.ZZHDE_FXTRMV = 'a';
        actual.ZZHDE_FXTRM = 'a';
        actual.ZZHDE_SYMO_OK = 'a';
        actual.ZZHDE_ZAF_MAN = 'a';
        actual.ZZHDE_ZAF_OK = 'a';
        actual.ZZHDE_ANOBZ = 'a';
        actual.ZHDESDKD_KPTVS = 'a';
        actual.ZZHIN_SCHEME = 'a';
        actual.ZZ_CU_ZRCV = 0;
        actual.ZZ_CU_ZRIV = 0;
        actual.ZZ_CU_FOCQ = 0;
        actual.ZZ_CU_FOCV = 0;
        actual.ZZ_VDATU = Date.newInstance(2000,1,1);
        actual.ZZHIT_CODE_CIG = 'a';
        actual.ZZHIT_CODE_CUP = 'a';
        actual.ZZHIT_INSURED_VALUE = 0;
        actual.ZZHTH_PPAY_RELEASED = 'a';
        actual.ZZHTR_ZRTR = 'a';
        actual.ZZHTR_DBSFL = 'a';
        actual.ZZHTR_DBSBANK = 'a';
        actual.ZZHWW_RELEASEHDE = 'a';
        actual.ZZHWW_IKUN = 'a';
        actual.ZZHWW_DVCOMPLHDE = 'a';
        actual.ZZHWW_PAK = 'a';
        actual.ZZHWW_KOM = 'a';
        actual.ZZHWW_NACH = 'a';
        actual.ZZHWW_ANWLOG = 'a';
        actual.ZZHWW_SUM_MUST = 0;
        actual.ZZHWW_ROH = 0;
        actual.ZZHWW_ZCR = 0;
        actual.ZZHWW_ABSCHL = 0;
        actual.ZZHWW_AUTLF = 'a';
        actual.ZZHWW_PPC = 'a';
        actual.ZZHWW_DSPLIT = 'a';
        actual.ZZEWM_PAERA = 'a';
        actual.ZZEWM_KOMART = 'a';
        actual.ZZHWW_ROHE_SPERR = 'a';
        actual.ZZHWW_RECH = 'a';
        actual.ZZHWW_MERK = 'a';
        actual.ZZEWM_MAILWA = 'a';
        actual.ZZHWW_CRM = 'a';
        actual.ZZHWW_GWERK = 'a';
        actual.ZZEWM_COPDEL = 'a';
        actual.ZZHDE_PROJNR = 'a';
        actual.ZZHWW_KVGR4 = 'a';
        actual.ZZHWW_CRM_SALE = 'a';
        actual.ZZHWW_CRM_NOSUM = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.VBELN);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.ERZET);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ANGDT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BNDDT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.AUDAT);
        system.assertEquals('a', actual.VBTYP);
        system.assertEquals('a', actual.TRVOG);
        system.assertEquals('a', actual.AUART);
        system.assertEquals('a', actual.AUGRU);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GWLDT);
        system.assertEquals('a', actual.SUBMI);
        system.assertEquals('a', actual.LIFSK);
        system.assertEquals('a', actual.FAKSK);
        system.assertEquals(0, actual.NETWR);
        system.assertEquals('a', actual.WAERK);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.VKGRP);
        system.assertEquals('a', actual.VKBUR);
        system.assertEquals('a', actual.GSBER);
        system.assertEquals('a', actual.GSKST);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GUEBG);
        system.assertEquals(Date.newInstance(2000,1,1), actual.GUEEN);
        system.assertEquals('a', actual.KNUMV);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VDATU);
        system.assertEquals('a', actual.VPRGR);
        system.assertEquals('a', actual.AUTLF);
        system.assertEquals('a', actual.VBKLA);
        system.assertEquals('a', actual.VBKLT);
        system.assertEquals('a', actual.KALSM);
        system.assertEquals('a', actual.VSBED);
        system.assertEquals('a', actual.FKARA);
        system.assertEquals('a', actual.AWAHR);
        system.assertEquals('a', actual.KTEXT);
        system.assertEquals('a', actual.BSTNK);
        system.assertEquals('a', actual.BSARK);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BSTDK);
        system.assertEquals('a', actual.BSTZD);
        system.assertEquals('a', actual.IHREZ);
        system.assertEquals('a', actual.BNAME);
        system.assertEquals('a', actual.TELF1);
        system.assertEquals(0, actual.MAHZA);
        system.assertEquals(Date.newInstance(2000,1,1), actual.MAHDT);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.KOSTL);
        system.assertEquals('a', actual.STAFO);
        system.assertEquals('a', actual.STWAE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.AEDAT);
        system.assertEquals('a', actual.KVGR1);
        system.assertEquals('a', actual.KVGR2);
        system.assertEquals('a', actual.KVGR3);
        system.assertEquals('a', actual.KVGR4);
        system.assertEquals('a', actual.KVGR5);
        system.assertEquals('a', actual.KNUMA);
        system.assertEquals('a', actual.KOKRS);
        system.assertEquals('a', actual.PS_PSP_PNR);
        system.assertEquals('a', actual.KURST);
        system.assertEquals('a', actual.KKBER);
        system.assertEquals('a', actual.KNKLI);
        system.assertEquals('a', actual.GRUPP);
        system.assertEquals('a', actual.SBGRP);
        system.assertEquals('a', actual.CTLPC);
        system.assertEquals('a', actual.CMWAE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.CMFRE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.CMNUP);
        system.assertEquals(Date.newInstance(2000,1,1), actual.CMNGV);
        system.assertEquals(0, actual.AMTBL);
        system.assertEquals('a', actual.HITYP_PR);
        system.assertEquals('a', actual.ABRVW);
        system.assertEquals('a', actual.ABDIS);
        system.assertEquals('a', actual.VGBEL);
        system.assertEquals('a', actual.OBJNR);
        system.assertEquals('a', actual.BUKRS_VF);
        system.assertEquals('a', actual.TAXK1);
        system.assertEquals('a', actual.TAXK2);
        system.assertEquals('a', actual.TAXK3);
        system.assertEquals('a', actual.TAXK4);
        system.assertEquals('a', actual.TAXK5);
        system.assertEquals('a', actual.TAXK6);
        system.assertEquals('a', actual.TAXK7);
        system.assertEquals('a', actual.TAXK8);
        system.assertEquals('a', actual.TAXK9);
        system.assertEquals('a', actual.XBLNR);
        system.assertEquals('a', actual.ZUONR);
        system.assertEquals('a', actual.VGTYP);
        system.assertEquals('a', actual.KALSM_CH);
        system.assertEquals('a', actual.AGRZR);
        system.assertEquals('a', actual.AUFNR);
        system.assertEquals('a', actual.QMNUM);
        system.assertEquals('a', actual.VBELN_GRP);
        system.assertEquals('a', actual.SCHEME_GRP);
        system.assertEquals('a', actual.ABRUF_PART);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ABHOD);
        system.assertEquals('a', actual.ABHOV);
        system.assertEquals('a', actual.ABHOB);
        system.assertEquals('a', actual.RPLNR);
        system.assertEquals('a', actual.VZEIT);
        system.assertEquals('a', actual.STCEG_L);
        system.assertEquals('a', actual.LANDTX);
        system.assertEquals('a', actual.XEGDR);
        system.assertEquals('a', actual.ENQUEUE_GRP);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DAT_FZAU);
        system.assertEquals(Date.newInstance(2000,1,1), actual.FMBDAT);
        system.assertEquals('a', actual.VSNMR_V);
        system.assertEquals('a', actual.HANDLE);
        system.assertEquals('a', actual.PROLI);
        system.assertEquals('a', actual.CONT_DG);
        system.assertEquals('a', actual.CRM_GUID);
        system.assertEquals(0, actual.UPD_TMSTMP);
        system.assertEquals('a', actual.MSR_ID);
        system.assertEquals('a', actual.TM_CTRL_KEY);
        system.assertEquals('a', actual.HANDOVERLOC);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_DATAAGING);
        system.assertEquals('a', actual.GLO_LOG_REF1_HD);
        system.assertEquals('a', actual.FISDUMMY);
        system.assertEquals('a', actual.x_FIS_KASSE);
        system.assertEquals('a', actual.x_FIS_CCINS);
        system.assertEquals(0, actual.x_FIS_KAUTION);
        system.assertEquals('a', actual.x_FIS_CCINS2);
        system.assertEquals('a', actual.x_FIS_CASH_KASSE);
        system.assertEquals('a', actual.x_FIS_CASH_ZHART);
        system.assertEquals('a', actual.x_FIS_CASH_PRTYP);
        system.assertEquals('a', actual.x_FIS_EEK_HANDLE);
        system.assertEquals('a', actual.x_FIS_LE_ALZVO);
        system.assertEquals('a', actual.x_FIS_LE_ALZBI);
        system.assertEquals('a', actual.x_FIS_LVSSTEP);
        system.assertEquals('a', actual.x_FIS_GLVNR);
        system.assertEquals('a', actual.x_FIS_ANZHIE);
        system.assertEquals('a', actual.x_FIS_PDL_KZ_VSF);
        system.assertEquals('a', actual.x_FIS_PDL_PKDL);
        system.assertEquals('a', actual.x_FIS_PDL_VSART);
        system.assertEquals('a', actual.x_FIS_SBNAM);
        system.assertEquals('a', actual.x_FIS_KZ_HNWAG);
        system.assertEquals('a', actual.x_FISSAN_PRJNR);
        system.assertEquals('a', actual.x_FISSAN_PBABK);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_WVDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_SUBMISD);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_WUNSCHD);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_VERGDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_AUSDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_BAUDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_MONTDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_IDAT_PL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_IDAT_IST);
        system.assertEquals('a', actual.x_FISSAN_PROJPOS);
        system.assertEquals('a', actual.x_FISSAN_PROJUPOS);
        system.assertEquals('a', actual.x_FIS_ABGRU);
        system.assertEquals('a', actual.x_FISSAN_PRBEZ);
        system.assertEquals('a', actual.x_FISSAN_PBEZ2);
        system.assertEquals('a', actual.x_FISSAN_PRBEZG);
        system.assertEquals('a', actual.x_FISSAN_PBEZ2G);
        system.assertEquals('a', actual.x_FISSAN_XABHO);
        system.assertEquals('a', actual.x_FISSAN_VTRKZ);
        system.assertEquals('a', actual.x_FISSAN_VTOUR);
        system.assertEquals('a', actual.x_FISSAN_FROUTE);
        system.assertEquals('a', actual.x_FIS_KOMMI_TEXT1);
        system.assertEquals('a', actual.x_FIS_KOMMI_TEXT2);
        system.assertEquals('a', actual.x_FIS_AUSWNR);
        system.assertEquals('a', actual.x_FIS_UNAME_AUSW);
        system.assertEquals('a', actual.x_FIS_KZ_AUSW);
        system.assertEquals('a', actual.x_FIS_LADEZEIT);
        system.assertEquals('a', actual.x_FIS_KZSOBKZ);
        system.assertEquals('a', actual.x_FIS_VGAST);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FIS_MEMDAT);
        system.assertEquals('a', actual.x_FIS_MEMUSR);
        system.assertEquals('a', actual.x_FIS_DRUKZ);
        system.assertEquals('a', actual.FISDUMMY_T);
        system.assertEquals('a', actual.x_FIS_TIAUTIZU_OK);
        system.assertEquals('a', actual.x_FIS_DB_USER);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FIS_DB_DATUM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.PSM_BUDAT);
        system.assertEquals('a', actual.FSH_KVGR6);
        system.assertEquals('a', actual.FSH_KVGR7);
        system.assertEquals('a', actual.FSH_KVGR8);
        system.assertEquals('a', actual.FSH_KVGR9);
        system.assertEquals('a', actual.FSH_KVGR10);
        system.assertEquals('a', actual.FSH_REREG);
        system.assertEquals('a', actual.FSH_CQ_CHECK);
        system.assertEquals('a', actual.FSH_VRSN_STATUS);
        system.assertEquals('a', actual.FSH_TRANSACTION);
        system.assertEquals('a', actual.FSH_VAS_CG);
        system.assertEquals(Date.newInstance(2000,1,1), actual.FSH_CANDATE);
        system.assertEquals('a', actual.FSH_SS);
        system.assertEquals('a', actual.FSH_OS_STG_CHANGE);
        system.assertEquals('a', actual.SWENR);
        system.assertEquals('a', actual.SMENR);
        system.assertEquals('a', actual.PHASE);
        system.assertEquals('a', actual.MTLAUR);
        system.assertEquals(0, actual.STAGE);
        system.assertEquals('a', actual.HB_CONT_REASON);
        system.assertEquals(Date.newInstance(2000,1,1), actual.HB_EXPDATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.HB_RESDATE);
        system.assertEquals('a', actual.MILL_APPL_ID);
        system.assertEquals('a', actual.TAS);
        system.assertEquals('a', actual.BETC);
        system.assertEquals('a', actual.MOD_ALLOW);
        system.assertEquals('a', actual.CANCEL_ALLOW);
        system.assertEquals('a', actual.PAY_METHOD);
        system.assertEquals('a', actual.BPN);
        system.assertEquals('a', actual.REP_FREQ);
        system.assertEquals('a', actual.LOGSYSB);
        system.assertEquals('a', actual.KALCD);
        system.assertEquals('a', actual.MULTI);
        system.assertEquals('a', actual.SPPAYM);
        system.assertEquals('a', actual.WTYSC_CLM_HDR);
        system.assertEquals('a', actual.ZZHAC_COUPON);
        system.assertEquals('a', actual.ZZHAC_CACNUM);
        system.assertEquals('a', actual.ZZHCN_PS_RESI);
        system.assertEquals('a', actual.ZZHCN_PS_SATU);
        system.assertEquals('a', actual.ZZHCN_PS_LIFT);
        system.assertEquals('a', actual.ZZHCN_PS_CALL);
        system.assertEquals('a', actual.ZZHCN_PS_INSI);
        system.assertEquals('a', actual.ZZHCN_PS_APPO);
        system.assertEquals('a', actual.ZZHDE_FXTRMV);
        system.assertEquals('a', actual.ZZHDE_FXTRM);
        system.assertEquals('a', actual.ZZHDE_SYMO_OK);
        system.assertEquals('a', actual.ZZHDE_ZAF_MAN);
        system.assertEquals('a', actual.ZZHDE_ZAF_OK);
        system.assertEquals('a', actual.ZZHDE_ANOBZ);
        system.assertEquals('a', actual.ZHDESDKD_KPTVS);
        system.assertEquals('a', actual.ZZHIN_SCHEME);
        system.assertEquals(0, actual.ZZ_CU_ZRCV);
        system.assertEquals(0, actual.ZZ_CU_ZRIV);
        system.assertEquals(0, actual.ZZ_CU_FOCQ);
        system.assertEquals(0, actual.ZZ_CU_FOCV);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZ_VDATU);
        system.assertEquals('a', actual.ZZHIT_CODE_CIG);
        system.assertEquals('a', actual.ZZHIT_CODE_CUP);
        system.assertEquals(0, actual.ZZHIT_INSURED_VALUE);
        system.assertEquals('a', actual.ZZHTH_PPAY_RELEASED);
        system.assertEquals('a', actual.ZZHTR_ZRTR);
        system.assertEquals('a', actual.ZZHTR_DBSFL);
        system.assertEquals('a', actual.ZZHTR_DBSBANK);
        system.assertEquals('a', actual.ZZHWW_RELEASEHDE);
        system.assertEquals('a', actual.ZZHWW_IKUN);
        system.assertEquals('a', actual.ZZHWW_DVCOMPLHDE);
        system.assertEquals('a', actual.ZZHWW_PAK);
        system.assertEquals('a', actual.ZZHWW_KOM);
        system.assertEquals('a', actual.ZZHWW_NACH);
        system.assertEquals('a', actual.ZZHWW_ANWLOG);
        system.assertEquals(0, actual.ZZHWW_SUM_MUST);
        system.assertEquals(0, actual.ZZHWW_ROH);
        system.assertEquals(0, actual.ZZHWW_ZCR);
        system.assertEquals(0, actual.ZZHWW_ABSCHL);
        system.assertEquals('a', actual.ZZHWW_AUTLF);
        system.assertEquals('a', actual.ZZHWW_PPC);
        system.assertEquals('a', actual.ZZHWW_DSPLIT);
        system.assertEquals('a', actual.ZZEWM_PAERA);
        system.assertEquals('a', actual.ZZEWM_KOMART);
        system.assertEquals('a', actual.ZZHWW_ROHE_SPERR);
        system.assertEquals('a', actual.ZZHWW_RECH);
        system.assertEquals('a', actual.ZZHWW_MERK);
        system.assertEquals('a', actual.ZZEWM_MAILWA);
        system.assertEquals('a', actual.ZZHWW_CRM);
        system.assertEquals('a', actual.ZZHWW_GWERK);
        system.assertEquals('a', actual.ZZEWM_COPDEL);
        system.assertEquals('a', actual.ZZHDE_PROJNR);
        system.assertEquals('a', actual.ZZHWW_KVGR4);
        system.assertEquals('a', actual.ZZHWW_CRM_SALE);
        system.assertEquals('a', actual.ZZHWW_CRM_NOSUM);
    }
    @istest
    private static void testrunQuery() {
        ovcSAPSalesDocumentHeader request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        ovcSAPSalesDocumentHeader response = request.runQuery(query1);
        system.assertEquals('a', response.VBAK[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static ovcSAPSalesDocumentHeader testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ovcSAPSalesDocumentHeader');
        ovcSAPSalesDocumentHeader request = new ovcSAPSalesDocumentHeader();
        ovcSAPSalesDocumentHeader.VBAK value1 = new ovcSAPSalesDocumentHeader.VBAK();
        value1.MANDT = 'a';
        request.VBAK.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ovcSAPSalesDocumentHeader input = new ovcSAPSalesDocumentHeader();
        ovcSAPSalesDocumentHeader.VBAK value1 = new ovcSAPSalesDocumentHeader.VBAK();
        value1.MANDT = 'a';
        input.VBAK.add(value1);
        ovcSAPSalesDocumentHeader actual = (ovcSAPSalesDocumentHeader)JSON.deserialize(input.serialize(), ovcSAPSalesDocumentHeader.class);
        system.assertEquals('a', actual.VBAK[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        ovcSAPSalesDocumentHeader output = new ovcSAPSalesDocumentHeader();
        ovcSAPSalesDocumentHeader.VBAK value1 = new ovcSAPSalesDocumentHeader.VBAK();
        value1.MANDT = 'a';
        output.VBAK.add(value1);

        string s = output.serialize();
        ovcSAPSalesDocumentHeader actual = ovcSAPSalesDocumentHeader.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.VBAK[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ovcSAPSalesDocumentHeader actual = ovcSAPSalesDocumentHeader.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ovcSAPSalesDocumentHeader actual = ovcSAPSalesDocumentHeader.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        ovcSAPSalesDocumentHeader output = new ovcSAPSalesDocumentHeader();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ovcSAPSalesDocumentHeader output = new ovcSAPSalesDocumentHeader();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ovcSAPSalesDocumentHeader output2 = new ovcSAPSalesDocumentHeader();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ovcSAPSalesDocumentHeader output = new ovcSAPSalesDocumentHeader();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('VBAK'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('VBAK', first.name);
    }

    @istest
    private static void testException() {
        ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException e = new ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            ovcSAPSalesDocumentHeader.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException e) {
            System.assert(true);
        }
        
        try {
            ovcSAPSalesDocumentHeader output = new ovcSAPSalesDocumentHeader();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            ovcSAPSalesDocumentHeader output = new ovcSAPSalesDocumentHeader();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException e) {
            System.assert(true);
        }

        try {
            ovcSAPSalesDocumentHeader output = new ovcSAPSalesDocumentHeader();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            ovcSAPSalesDocumentHeader.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException e) {
            System.assert(true);
        }
        
        try {
            ovcSAPSalesDocumentHeader.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ovcSAPSalesDocumentHeader.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDocumentHeader.ovcSAPSalesDocumentHeaderException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        ovcSAPSalesDocumentHeader output = new ovcSAPSalesDocumentHeader();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}