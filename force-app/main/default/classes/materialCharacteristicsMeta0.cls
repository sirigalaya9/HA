global class materialCharacteristicsMeta0 {
/* 
 * Generated by Overcast UTC 2024-03-12 08:29:32Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */

    static overcast.Realtime.StructureType SS = overcast.Realtime.StructureType.STRUCTURE;
    static overcast.Realtime.StructureType ST = overcast.Realtime.StructureType.TABLE;

    static overcast.Realtime.Direction DI = overcast.Realtime.Direction.INPUT;
    static overcast.Realtime.Direction DOx = overcast.Realtime.Direction.OUTPUT;
    static overcast.Realtime.Direction DB = overcast.Realtime.Direction.BOTH;
    
    static overcast.Realtime.ApexType TS = overcast.Realtime.ApexType.STRINGX;
    static overcast.Realtime.ApexType TI = overcast.Realtime.ApexType.INTEGERX;
    static overcast.Realtime.ApexType TL = overcast.Realtime.ApexType.LONGX;
    static overcast.Realtime.ApexType TB = overcast.Realtime.ApexType.BOOLEANX;
    static overcast.Realtime.ApexType TD = overcast.Realtime.ApexType.DATEX;
    static overcast.Realtime.ApexType TDT = overcast.Realtime.ApexType.DATETIMEX;
    static overcast.Realtime.ApexType TDC = overcast.Realtime.ApexType.DECIMALX;
    static overcast.Realtime.ApexType TDBL = overcast.Realtime.ApexType.DOUBLEX;
    static overcast.Realtime.ApexType TT = overcast.Realtime.ApexType.TIMEX;
    static overcast.Realtime.ApexType TBLB = overcast.Realtime.ApexType.BLOBX;

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, overcast.Realtime.Direction e) {
        return new overcast.FieldInfo(a, b, c, d, e);
    }

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, Integer e, overcast.Realtime.Direction f) {
        return new overcast.FieldInfo(a, b, c, d, e, f);
    }

    public static Map<String, overcast.TypeInfo> metadata = new Map<String, overcast.TypeInfo> {
        'BAPI_OBJCL_GETCLASSES' => new overcast.TypeInfo('BAPI_OBJCL_GETCLASSES', '', SS, DI,
            new Map<String, overcast.FieldInfo> {
                'OBJECTKEY_IMP' => fi('OBJECTKEY_IMP', 'Key of Object to be Classified', TS, 50, DI),
                'OBJECTTABLE_IMP' => fi('OBJECTTABLE_IMP', 'Name of Database Table for Object', TS, 30, DI),
                'CLASSTYPE_IMP' => fi('CLASSTYPE_IMP', 'Class Type', TS, 3, DI),
                'READ_VALUATIONS' => fi('READ_VALUATIONS', 'Read Assigned Values', TS, 1, DI),
                'KEYDATE' => fi('KEYDATE', 'Key date', TD, 8, DI),
                'LANGUAGE' => fi('LANGUAGE', 'Language Key', TS, 1, DI),
                'OBJECTKEY_IMP_LONG' => fi('OBJECTKEY_IMP_LONG', 'Classification: Object Field (Length 90, Technically Required)', TS, 90, DI)
            }
        ),
        'ALLOCLIST' => new overcast.TypeInfo('ALLOCLIST', 'Class BAPI: Assignment List', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OBJECT_x' => fi('OBJECT_x', 'Object', TS, 50, DB),
                'STATUS' => fi('STATUS', 'Status', TS, 1, DB),
                'OBJTYP' => fi('OBJTYP', 'Table', TS, 30, DB),
                'CLASSNUM' => fi('CLASSNUM', 'Class', TS, 18, DB),
                'CLASSTYPE' => fi('CLASSTYPE', 'Class Type', TS, 3, DB),
                'STANDARDCLASS' => fi('STANDARDCLASS', 'Std class', TS, 1, DB),
                'OBJECT_LONG' => fi('OBJECT_LONG', 'Object', TS, 90, DB)
            }
        ),
        'ALLOCVALUESCHAR' => new overcast.TypeInfo('ALLOCVALUESCHAR', 'Assigned CHAR and BOOL Values', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'CHARACT' => fi('CHARACT', 'Characteristic', TS, 30, DB),
                'VALUE_CHAR' => fi('VALUE_CHAR', 'Char. Value', TS, 30, DB),
                'INHERITED' => fi('INHERITED', 'Indicator: characteristic is inherited', TS, 1, DB),
                'INSTANCE' => fi('INSTANCE', 'Instance cntr', TS, 3, DB),
                'VALUE_NEUTRAL' => fi('VALUE_NEUTRAL', 'Char. Value', TS, 30, DB),
                'CHARACT_DESCR' => fi('CHARACT_DESCR', 'Description', TS, 30, DB),
                'VALUE_CHAR_LONG' => fi('VALUE_CHAR_LONG', 'Char. Value', TS, 70, DB),
                'VALUE_NEUTRAL_LONG' => fi('VALUE_NEUTRAL_LONG', 'Char. Value', TS, 70, DB)
            }
        ),
        'ALLOCVALUESCURR' => new overcast.TypeInfo('ALLOCVALUESCURR', 'Assigned CURR Values', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'CHARACT' => fi('CHARACT', 'Characteristic', TS, 30, DB),
                'VALUE_FROM' => fi('VALUE_FROM', 'Value from', TDBL, 16,8, DB),
                'VALUE_TO' => fi('VALUE_TO', 'Value to', TDBL, 16,8, DB),
                'VALUE_RELATION' => fi('VALUE_RELATION', 'Code', TS, 1, DB),
                'CURRENCY_FROM' => fi('CURRENCY_FROM', 'Currency', TS, 5, DB),
                'CURRENCY_TO' => fi('CURRENCY_TO', 'Currency', TS, 5, DB),
                'CURRENCY_FROM_ISO' => fi('CURRENCY_FROM_ISO', 'ISO Code', TS, 3, DB),
                'CURRENCY_TO_ISO' => fi('CURRENCY_TO_ISO', 'ISO Code', TS, 3, DB),
                'INHERITED' => fi('INHERITED', 'Indicator: characteristic is inherited', TS, 1, DB),
                'INSTANCE' => fi('INSTANCE', 'Instance cntr', TS, 3, DB),
                'CHARACT_DESCR' => fi('CHARACT_DESCR', 'Description', TS, 30, DB)
            }
        ),
        'ALLOCVALUESNUM' => new overcast.TypeInfo('ALLOCVALUESNUM', 'Assigned NUM, DATE, and TIME Values', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'CHARACT' => fi('CHARACT', 'Characteristic', TS, 30, DB),
                'VALUE_FROM' => fi('VALUE_FROM', 'Value from', TDBL, 16,8, DB),
                'VALUE_TO' => fi('VALUE_TO', 'Value to', TDBL, 16,8, DB),
                'VALUE_RELATION' => fi('VALUE_RELATION', 'Code', TS, 1, DB),
                'UNIT_FROM' => fi('UNIT_FROM', 'Base Unit', TS, 3, DB),
                'UNIT_TO' => fi('UNIT_TO', 'Base Unit', TS, 3, DB),
                'UNIT_FROM_ISO' => fi('UNIT_FROM_ISO', 'Base unit ISO', TS, 3, DB),
                'UNIT_TO_ISO' => fi('UNIT_TO_ISO', 'Base unit ISO', TS, 3, DB),
                'INHERITED' => fi('INHERITED', 'Indicator: characteristic is inherited', TS, 1, DB),
                'INSTANCE' => fi('INSTANCE', 'Instance cntr', TS, 3, DB),
                'CHARACT_DESCR' => fi('CHARACT_DESCR', 'Description', TS, 30, DB)
            }
        ),
        'RETURN_x' => new overcast.TypeInfo('RETURN_x', 'Return Parameters', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'TYPE_x' => fi('TYPE_x', 'Message type', TS, 1, DB),
                'ID' => fi('ID', 'Message Class', TS, 20, DB),
                'NUMBER_x' => fi('NUMBER_x', 'Message number', TS, 3, DB),
                'MESSAGE' => fi('MESSAGE', 'Message text', TS, 220, DB),
                'LOG_NO' => fi('LOG_NO', 'Log Number', TS, 20, DB),
                'LOG_MSG_NO' => fi('LOG_MSG_NO', 'Message Number', TS, 6, DB),
                'MESSAGE_V1' => fi('MESSAGE_V1', 'Message Variable', TS, 50, DB),
                'MESSAGE_V2' => fi('MESSAGE_V2', 'Message Variable', TS, 50, DB),
                'MESSAGE_V3' => fi('MESSAGE_V3', 'Message Variable', TS, 50, DB),
                'MESSAGE_V4' => fi('MESSAGE_V4', 'Message Variable', TS, 50, DB),
                'PARAMETER' => fi('PARAMETER', 'Parameter Name', TS, 32, DB),
                'ROW' => fi('ROW', 'Parameter line', TI, 10, DB),
                'FIELD' => fi('FIELD', 'Field name', TS, 30, DB),
                'SYSTEM_x' => fi('SYSTEM_x', 'Logical system', TS, 10, DB)
            }
        )
    };
}