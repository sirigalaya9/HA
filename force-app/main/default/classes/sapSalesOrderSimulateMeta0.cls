global class sapSalesOrderSimulateMeta0 {
/* 
 * Generated by Overcast UTC 2024-03-27 04:43:09Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */

    static overcast.Realtime.StructureType SS = overcast.Realtime.StructureType.STRUCTURE;
    static overcast.Realtime.StructureType ST = overcast.Realtime.StructureType.TABLE;

    static overcast.Realtime.Direction DI = overcast.Realtime.Direction.INPUT;
    static overcast.Realtime.Direction DOx = overcast.Realtime.Direction.OUTPUT;
    static overcast.Realtime.Direction DB = overcast.Realtime.Direction.BOTH;
    
    static overcast.Realtime.ApexType TS = overcast.Realtime.ApexType.STRINGX;
    static overcast.Realtime.ApexType TI = overcast.Realtime.ApexType.INTEGERX;
    static overcast.Realtime.ApexType TL = overcast.Realtime.ApexType.LONGX;
    static overcast.Realtime.ApexType TB = overcast.Realtime.ApexType.BOOLEANX;
    static overcast.Realtime.ApexType TD = overcast.Realtime.ApexType.DATEX;
    static overcast.Realtime.ApexType TDT = overcast.Realtime.ApexType.DATETIMEX;
    static overcast.Realtime.ApexType TDC = overcast.Realtime.ApexType.DECIMALX;
    static overcast.Realtime.ApexType TDBL = overcast.Realtime.ApexType.DOUBLEX;
    static overcast.Realtime.ApexType TT = overcast.Realtime.ApexType.TIMEX;
    static overcast.Realtime.ApexType TBLB = overcast.Realtime.ApexType.BLOBX;

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, overcast.Realtime.Direction e) {
        return new overcast.FieldInfo(a, b, c, d, e);
    }

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, Integer e, overcast.Realtime.Direction f) {
        return new overcast.FieldInfo(a, b, c, d, e, f);
    }

    public static Map<String, overcast.TypeInfo> metadata = new Map<String, overcast.TypeInfo> {
        'BAPI_SALESORDER_SIMULATE' => new overcast.TypeInfo('BAPI_SALESORDER_SIMULATE', '', SS, DB,
            new Map<String, overcast.FieldInfo> {
                'CONVERT_PARVW_AUART' => fi('CONVERT_PARVW_AUART', 'Conversion of partner function + order type', TS, 1, DI),
                'SALESDOCUMENT' => fi('SALESDOCUMENT', 'Sales and Distribution Document Number', TS, 10, DOx)
            }
        ),
        'ORDER_HEADER_IN' => new overcast.TypeInfo('ORDER_HEADER_IN', 'Order Header', SS, DI,
            new Map<String, overcast.FieldInfo> {
                'DOC_NUMBER' => fi('DOC_NUMBER', 'Sales Document', TS, 10, DI),
                'DOC_TYPE' => fi('DOC_TYPE', 'Sales Doc. Type', TS, 4, DI),
                'COLLECT_NO' => fi('COLLECT_NO', 'Collective No.', TS, 10, DI),
                'SALES_ORG' => fi('SALES_ORG', 'Sales Org.', TS, 4, DI),
                'DISTR_CHAN' => fi('DISTR_CHAN', 'Distr. Channel', TS, 2, DI),
                'DIVISION' => fi('DIVISION', 'Division', TS, 2, DI),
                'SALES_GRP' => fi('SALES_GRP', 'Sales Group', TS, 3, DI),
                'SALES_OFF' => fi('SALES_OFF', 'Sales Office', TS, 4, DI),
                'REQ_DATE_H' => fi('REQ_DATE_H', 'Request.dlv.dt', TD, 8, DI),
                'DATE_TYPE' => fi('DATE_TYPE', 'Prop.date type', TS, 1, DI),
                'PURCH_NO' => fi('PURCH_NO', 'PO Number', TS, 20, DI),
                'PURCH_DATE' => fi('PURCH_DATE', 'PO Date', TD, 8, DI),
                'PO_METHOD' => fi('PO_METHOD', 'Pur. ord. type', TS, 4, DI),
                'PO_SUPPLEM' => fi('PO_SUPPLEM', 'Supplement', TS, 4, DI),
                'REF_1' => fi('REF_1', 'Your Reference', TS, 12, DI),
                'NAME' => fi('NAME', 'Branching name', TS, 30, DI),
                'TELEPHONE' => fi('TELEPHONE', 'Telephone', TS, 16, DI),
                'PRICE_GRP' => fi('PRICE_GRP', 'Price group', TS, 2, DI),
                'CUST_GROUP' => fi('CUST_GROUP', 'Customer group', TS, 2, DI),
                'SALES_DIST' => fi('SALES_DIST', 'Sales district', TS, 6, DI),
                'PRICE_LIST' => fi('PRICE_LIST', 'Price List', TS, 2, DI),
                'INCOTERMS1' => fi('INCOTERMS1', 'Incoterms', TS, 3, DI),
                'INCOTERMS2' => fi('INCOTERMS2', 'Incoterms 2', TS, 28, DI),
                'PMNTTRMS' => fi('PMNTTRMS', 'Pyt Terms', TS, 4, DI),
                'DLV_BLOCK' => fi('DLV_BLOCK', 'Delivery block', TS, 2, DI),
                'BILL_BLOCK' => fi('BILL_BLOCK', 'Billing block', TS, 2, DI),
                'ORD_REASON' => fi('ORD_REASON', 'Order reason', TS, 3, DI),
                'COMPL_DLV' => fi('COMPL_DLV', 'Complete dlv.', TS, 1, DI),
                'PRICE_DATE' => fi('PRICE_DATE', 'Pricing Date', TD, 8, DI),
                'QT_VALID_F' => fi('QT_VALID_F', 'Valid from', TD, 8, DI),
                'QT_VALID_T' => fi('QT_VALID_T', 'Valid to', TD, 8, DI),
                'CT_VALID_F' => fi('CT_VALID_F', 'Valid from', TD, 8, DI),
                'CT_VALID_T' => fi('CT_VALID_T', 'Valid to', TD, 8, DI),
                'CUST_GRP1' => fi('CUST_GRP1', 'Industry sector', TS, 3, DI),
                'CUST_GRP2' => fi('CUST_GRP2', 'Customer group', TS, 3, DI),
                'CUST_GRP3' => fi('CUST_GRP3', 'Customer type', TS, 3, DI),
                'CUST_GRP4' => fi('CUST_GRP4', 'Potential Group', TS, 3, DI),
                'CUST_GRP5' => fi('CUST_GRP5', 'Rebate group', TS, 3, DI),
                'PURCH_NO_C' => fi('PURCH_NO_C', 'PO Number', TS, 35, DI),
                'PURCH_NO_S' => fi('PURCH_NO_S', 'PO Number', TS, 35, DI),
                'PO_DAT_S' => fi('PO_DAT_S', 'PurchOrderDate', TD, 8, DI),
                'PO_METH_S' => fi('PO_METH_S', 'Pur. ord. type', TS, 4, DI),
                'REF_1_S' => fi('REF_1_S', 'Your reference', TS, 12, DI),
                'SD_DOC_CAT' => fi('SD_DOC_CAT', 'Document cat.', TS, 1, DI),
                'SHIP_COND' => fi('SHIP_COND', 'Shp.Cond.', TS, 2, DI),
                'CURRENCY_x' => fi('CURRENCY_x', 'Doc. Currency', TS, 5, DI),
                'CURRENCY_ISO' => fi('CURRENCY_ISO', 'ISO code crcy', TS, 3, DI),
                'DLV_TIME' => fi('DLV_TIME', 'Delivery time', TS, 3, DI),
                'CD_TYPE1' => fi('CD_TYPE1', 'Condition Type', TS, 4, DI),
                'CD_VALUE1' => fi('CD_VALUE1', 'Amount', TDC, 23,4, DI),
                'CD_P_UNT1' => fi('CD_P_UNT1', 'Price unit', TS, 5, DI),
                'CD_D_UNT1' => fi('CD_D_UNT1', 'Condition unit', TS, 3, DI),
                'CD_D_UISO1' => fi('CD_D_UISO1', 'ISO cond. UoM', TS, 3, DI),
                'CD_CURR1' => fi('CD_CURR1', 'Currency', TS, 5, DI),
                'CD_CU_ISO1' => fi('CD_CU_ISO1', 'ISO code crcy', TS, 3, DI),
                'CD_TYPE2' => fi('CD_TYPE2', 'Condition Type', TS, 4, DI),
                'CD_VALUE2' => fi('CD_VALUE2', 'Amount', TDC, 23,4, DI),
                'CD_P_UNT2' => fi('CD_P_UNT2', 'Price unit', TS, 5, DI),
                'CD_D_UNT2' => fi('CD_D_UNT2', 'Condition unit', TS, 3, DI),
                'CD_D_UISO2' => fi('CD_D_UISO2', 'ISO cond. UoM', TS, 3, DI),
                'CD_CURR2' => fi('CD_CURR2', 'Currency', TS, 5, DI),
                'CD_CU_ISO2' => fi('CD_CU_ISO2', 'ISO code crcy', TS, 3, DI),
                'CD_TYPE3' => fi('CD_TYPE3', 'Condition Type', TS, 4, DI),
                'CD_VALUE3' => fi('CD_VALUE3', 'Amount', TDC, 23,4, DI),
                'CD_P_UNT3' => fi('CD_P_UNT3', 'Price unit', TS, 5, DI),
                'CD_D_UNT3' => fi('CD_D_UNT3', 'Condition unit', TS, 3, DI),
                'CD_D_UISO3' => fi('CD_D_UISO3', 'ISO cond. UoM', TS, 3, DI),
                'CD_CURR3' => fi('CD_CURR3', 'Currency', TS, 5, DI),
                'CD_CU_ISO3' => fi('CD_CU_ISO3', 'ISO code crcy', TS, 3, DI),
                'CD_TYPE4' => fi('CD_TYPE4', 'Condition Type', TS, 4, DI),
                'CD_VALUE4' => fi('CD_VALUE4', 'Amount', TDC, 23,4, DI),
                'CD_P_UNT4' => fi('CD_P_UNT4', 'Price unit', TS, 5, DI),
                'CD_D_UNT4' => fi('CD_D_UNT4', 'Condition unit', TS, 3, DI),
                'CD_D_UISO4' => fi('CD_D_UISO4', 'ISO cond. UoM', TS, 3, DI),
                'CD_CURR4' => fi('CD_CURR4', 'Currency', TS, 5, DI),
                'CD_CU_ISO4' => fi('CD_CU_ISO4', 'ISO code crcy', TS, 3, DI),
                'FKK_CONACCT' => fi('FKK_CONACCT', 'Character Field of Length 12', TS, 12, DI),
                'REF_DOC' => fi('REF_DOC', 'Reference Doc.', TS, 10, DI),
                'REF_DOC_CA' => fi('REF_DOC_CA', 'Prec.doc.categ.', TS, 1, DI),
                'SEPA_MANDATE_ID' => fi('SEPA_MANDATE_ID', 'Mandate Ref.', TS, 35, DI),
                'SD_DOC_CAT_LONG' => fi('SD_DOC_CAT_LONG', 'Document Cat.', TS, 4, DI),
                'REF_DOC_CA_LONG' => fi('REF_DOC_CA_LONG', 'Document Cat.', TS, 4, DI),
                'INCOTERMSV' => fi('INCOTERMSV', 'Inco. Version', TS, 4, DI),
                'INCOTERMS2L' => fi('INCOTERMS2L', 'Inco. Location1', TS, 70, DI),
                'INCOTERMS3L' => fi('INCOTERMS3L', 'Inco. Location2', TS, 70, DI)
            }
        ),
        'SOLD_TO_PARTY' => new overcast.TypeInfo('SOLD_TO_PARTY', 'Sold-to party', SS, DOx,
            new Map<String, overcast.FieldInfo> {
                'SOLD_TO' => fi('SOLD_TO', 'Sold-To Party', TS, 10, DOx),
                'NAME' => fi('NAME', 'Name', TS, 35, DOx),
                'STREET' => fi('STREET', 'Street/House', TS, 30, DOx),
                'PO_BOX' => fi('PO_BOX', 'PO Box', TS, 10, DOx),
                'POSTL_CODE' => fi('POSTL_CODE', 'Postal Code', TS, 10, DOx),
                'POBX_PCD' => fi('POBX_PCD', 'PO Box PCode', TS, 10, DOx),
                'CITY' => fi('CITY', 'City', TS, 25, DOx),
                'LANGU' => fi('LANGU', 'Language', TS, 1, DOx),
                'COUNTRY' => fi('COUNTRY', 'Country', TS, 3, DOx),
                'TELEPHONE' => fi('TELEPHONE', 'Telephone 1', TS, 16, DOx),
                'STAT_GROUP' => fi('STAT_GROUP', 'StatisticsGroup', TS, 1, DOx),
                'ORDER_BLCK' => fi('ORDER_BLCK', 'Block order', TS, 2, DOx),
                'PRC_PROCED' => fi('PRC_PROCED', 'Cust.pric.proc.', TS, 1, DOx),
                'CUST_GROUP' => fi('CUST_GROUP', 'Customer group', TS, 2, DOx),
                'SALES_DIST' => fi('SALES_DIST', 'Sales district', TS, 6, DOx),
                'PRICE_GRP' => fi('PRICE_GRP', 'Price group', TS, 2, DOx),
                'PRICE_LIST' => fi('PRICE_LIST', 'Price List', TS, 2, DOx),
                'INCOTERMS1' => fi('INCOTERMS1', 'Incoterms', TS, 3, DOx),
                'INCOTERMS2' => fi('INCOTERMS2', 'Incoterms 2', TS, 28, DOx),
                'COMPL_DLV' => fi('COMPL_DLV', 'Complete dlv.', TS, 1, DOx),
                'MAX_PL_DLV' => fi('MAX_PL_DLV', 'Max.Part.Deliv.', TDC, 1,0, DOx),
                'ORDER_COMB' => fi('ORDER_COMB', 'Order Combinat.', TS, 1, DOx),
                'BTCH_SPLIT' => fi('BTCH_SPLIT', 'Batch split', TS, 1, DOx),
                'DLV_PRIO' => fi('DLV_PRIO', 'Delivery Prior.', TS, 2, DOx),
                'CURRENCY_x' => fi('CURRENCY_x', 'Doc. Currency', TS, 5, DOx),
                'EXCHG_RATE' => fi('EXCHG_RATE', 'Exch. Rate Type', TS, 4, DOx),
                'SHIP_COND' => fi('SHIP_COND', 'Shp.Cond.', TS, 2, DOx),
                'PART_DLV' => fi('PART_DLV', 'Part.Dlv./Item', TS, 1, DOx),
                'ORDER_PROB' => fi('ORDER_PROB', 'Order probab.', TS, 3, DOx),
                'DLV_BLOCK' => fi('DLV_BLOCK', 'DelBlckSalesAr.', TS, 2, DOx),
                'PROD_PROP' => fi('PROD_PROP', 'Item proposal', TS, 10, DOx),
                'ACC_1_TIME' => fi('ACC_1_TIME', 'One-time acct', TS, 1, DOx),
                'SALES_OFF' => fi('SALES_OFF', 'Sales Office', TS, 4, DOx),
                'SALES_GRP' => fi('SALES_GRP', 'Sales Group', TS, 3, DOx),
                'VAT_REG_NO' => fi('VAT_REG_NO', 'VAT Reg. No.', TS, 20, DOx),
                'TAX_CLASS1' => fi('TAX_CLASS1', 'TaxClass1-Cust.', TS, 1, DOx),
                'TAX_CLASS2' => fi('TAX_CLASS2', 'TaxClass2-Cust.', TS, 1, DOx),
                'TAX_CLASS3' => fi('TAX_CLASS3', 'TaxClass3-Cust.', TS, 1, DOx),
                'TAX_CLASS4' => fi('TAX_CLASS4', 'TaxClass4-Cust.', TS, 1, DOx),
                'TAX_CLASS5' => fi('TAX_CLASS5', 'TaxClass5-Cust.', TS, 1, DOx),
                'TAX_CLASS6' => fi('TAX_CLASS6', 'TaxClass6-Cust.', TS, 1, DOx),
                'TAX_CLASS7' => fi('TAX_CLASS7', 'TaxClass7-Cust.', TS, 1, DOx),
                'TAX_CLASS8' => fi('TAX_CLASS8', 'TaxClass8-Cust.', TS, 1, DOx),
                'TAX_CLASS9' => fi('TAX_CLASS9', 'TaxClass9-Cust.', TS, 1, DOx),
                'COMPANY_ID' => fi('COMPANY_ID', 'Company ID', TS, 6, DOx),
                'INCOTERMSV' => fi('INCOTERMSV', 'Inco. Version', TS, 4, DOx),
                'INCOTERMS2L' => fi('INCOTERMS2L', 'Inco. Location1', TS, 70, DOx),
                'INCOTERMS3L' => fi('INCOTERMS3L', 'Inco. Location2', TS, 70, DOx)
            }
        ),
        'SHIP_TO_PARTY' => new overcast.TypeInfo('SHIP_TO_PARTY', 'Ship-To Party', SS, DOx,
            new Map<String, overcast.FieldInfo> {
                'SHIP_TO' => fi('SHIP_TO', 'Ship-To Party', TS, 10, DOx),
                'NAME' => fi('NAME', 'Name', TS, 35, DOx),
                'STREET' => fi('STREET', 'Street/House', TS, 30, DOx),
                'PO_BOX' => fi('PO_BOX', 'PO Box', TS, 10, DOx),
                'POSTL_CODE' => fi('POSTL_CODE', 'Postal Code', TS, 10, DOx),
                'POBX_PCD' => fi('POBX_PCD', 'PO Box PCode', TS, 10, DOx),
                'CITY' => fi('CITY', 'City', TS, 25, DOx),
                'LANGU' => fi('LANGU', 'Language', TS, 1, DOx),
                'DEST_CNTRY' => fi('DEST_CNTRY', 'Dest. Country', TS, 3, DOx),
                'TRNSP_ZONE' => fi('TRNSP_ZONE', 'Transport Zone', TS, 10, DOx),
                'TRAIN_STAT' => fi('TRAIN_STAT', 'Train station', TS, 25, DOx),
                'EXPR_STAT' => fi('EXPR_STAT', 'Express station', TS, 25, DOx),
                'TELEPHONE' => fi('TELEPHONE', 'Telephone 1', TS, 16, DOx),
                'UNLOAD_PT' => fi('UNLOAD_PT', 'Unloading Point', TS, 25, DOx),
                'FAC_CALEND' => fi('FAC_CALEND', 'FactoryCalendar', TS, 2, DOx),
                'RECV_HOURS' => fi('RECV_HOURS', 'Goods rec.hours', TS, 3, DOx),
                'MO_AM_FROM' => fi('MO_AM_FROM', 'Monday', TS, 8, DOx),
                'MO_AM_UNTL' => fi('MO_AM_UNTL', 'Monday', TS, 8, DOx),
                'MO_PM_FROM' => fi('MO_PM_FROM', 'Monday', TS, 8, DOx),
                'MO_PM_UNTL' => fi('MO_PM_UNTL', 'Monday', TS, 8, DOx),
                'TU_AM_FROM' => fi('TU_AM_FROM', 'Tuesday', TS, 8, DOx),
                'TU_AM_UNTL' => fi('TU_AM_UNTL', 'Tuesday', TS, 8, DOx),
                'TU_PM_FROM' => fi('TU_PM_FROM', 'Tuesday', TS, 8, DOx),
                'TU_PM_UNTL' => fi('TU_PM_UNTL', 'Tuesday', TS, 8, DOx),
                'WE_AM_FROM' => fi('WE_AM_FROM', 'Wednesday', TS, 8, DOx),
                'WR_AM_UNTL' => fi('WR_AM_UNTL', 'Wednesday', TS, 8, DOx),
                'WE_PM_FROM' => fi('WE_PM_FROM', 'Wednesday', TS, 8, DOx),
                'WE_PM_UNTL' => fi('WE_PM_UNTL', 'Wednesday', TS, 8, DOx),
                'TH_AM_FROM' => fi('TH_AM_FROM', 'Thursday', TS, 8, DOx),
                'TH_AM_UNTL' => fi('TH_AM_UNTL', 'Thursday', TS, 8, DOx),
                'TH_PM_FROM' => fi('TH_PM_FROM', 'Thursday', TS, 8, DOx),
                'TH_PM_UNTL' => fi('TH_PM_UNTL', 'Thursday', TS, 8, DOx),
                'FR_AM_FROM' => fi('FR_AM_FROM', 'Friday', TS, 8, DOx),
                'FR_AM_UNTL' => fi('FR_AM_UNTL', 'Friday', TS, 8, DOx),
                'FR_PM_FROM' => fi('FR_PM_FROM', 'Friday', TS, 8, DOx),
                'FR_PM_UNTL' => fi('FR_PM_UNTL', 'Friday', TS, 8, DOx),
                'SA_AM_FROM' => fi('SA_AM_FROM', 'Saturday', TS, 8, DOx),
                'SA_AM_UNTL' => fi('SA_AM_UNTL', 'Saturday', TS, 8, DOx),
                'SA_PM_FROM' => fi('SA_PM_FROM', 'Saturday', TS, 8, DOx),
                'SA_PM_UNTL' => fi('SA_PM_UNTL', 'Saturday', TS, 8, DOx),
                'SU_AM_FROM' => fi('SU_AM_FROM', 'Sunday', TS, 8, DOx),
                'SU_AM_UNTL' => fi('SU_AM_UNTL', 'Sunday', TS, 8, DOx),
                'SU_PM_FROM' => fi('SU_PM_FROM', 'Sunday', TS, 8, DOx),
                'SU_PM_UNTL' => fi('SU_PM_UNTL', 'Sunday', TS, 8, DOx),
                'VAT_REG_NO' => fi('VAT_REG_NO', 'VAT Reg. No.', TS, 20, DOx),
                'TAX_CLASS1' => fi('TAX_CLASS1', 'TaxClass1-Cust.', TS, 1, DOx),
                'TAX_CLASS2' => fi('TAX_CLASS2', 'TaxClass2-Cust.', TS, 1, DOx),
                'TAX_CLASS3' => fi('TAX_CLASS3', 'TaxClass3-Cust.', TS, 1, DOx),
                'TAX_CLASS4' => fi('TAX_CLASS4', 'TaxClass4-Cust.', TS, 1, DOx),
                'TAX_CLASS5' => fi('TAX_CLASS5', 'TaxClass5-Cust.', TS, 1, DOx),
                'TAX_CLASS6' => fi('TAX_CLASS6', 'TaxClass6-Cust.', TS, 1, DOx),
                'TAX_CLASS7' => fi('TAX_CLASS7', 'TaxClass7-Cust.', TS, 1, DOx),
                'TAX_CLASS8' => fi('TAX_CLASS8', 'TaxClass8-Cust.', TS, 1, DOx),
                'TAX_CLASS9' => fi('TAX_CLASS9', 'TaxClass9-Cust.', TS, 1, DOx),
                'REGION' => fi('REGION', 'Region', TS, 3, DOx),
                'COUNTY_CDE' => fi('COUNTY_CDE', 'County Code', TS, 3, DOx),
                'CITY_CODE' => fi('CITY_CODE', 'City Code', TS, 4, DOx),
                'TAXJURCODE' => fi('TAXJURCODE', 'Tax Jur.', TS, 15, DOx),
                'CTRDATA_OK' => fi('CTRDATA_OK', 'Control data sucessfully read from cust. master country seg.', TS, 1, DOx),
                'DLV_PLANT' => fi('DLV_PLANT', 'Deliver.plant', TS, 4, DOx),
                'DLV_BLOCK' => fi('DLV_BLOCK', 'DelBlckSalesAr.', TS, 2, DOx),
                'ORDER_BLCK' => fi('ORDER_BLCK', 'Block order', TS, 2, DOx),
                'PROD_PROP' => fi('PROD_PROP', 'Item proposal', TS, 10, DOx),
                'SHIP_COND' => fi('SHIP_COND', 'Shp.Cond.', TS, 2, DOx),
                'ACC_1_TIME' => fi('ACC_1_TIME', 'One-time acct', TS, 1, DOx),
                'ACCNT_GRP' => fi('ACCNT_GRP', 'Account group', TS, 4, DOx),
                'DESC_PARTN' => fi('DESC_PARTN', 'Partner desc.', TS, 30, DOx),
                'FY_VARIANT' => fi('FY_VARIANT', 'FY Variant', TS, 2, DOx),
                'PROD_ATTR1' => fi('PROD_ATTR1', 'Product attr.1', TS, 1, DOx),
                'PROD_ATTR2' => fi('PROD_ATTR2', 'Product attr.2', TS, 1, DOx),
                'PROD_ATTR3' => fi('PROD_ATTR3', 'Product attr.3', TS, 1, DOx),
                'PROD_ATTR4' => fi('PROD_ATTR4', 'Product attr.4', TS, 1, DOx),
                'PROD_ATTR5' => fi('PROD_ATTR5', 'Product attr.5', TS, 1, DOx),
                'PROD_ATTR6' => fi('PROD_ATTR6', 'Prod.attribute6', TS, 1, DOx),
                'PROD_ATTR7' => fi('PROD_ATTR7', 'Product attr.7', TS, 1, DOx),
                'PROD_ATTR8' => fi('PROD_ATTR8', 'Prod.attribute8', TS, 1, DOx),
                'PROD_ATTR9' => fi('PROD_ATTR9', 'Product attr.9', TS, 1, DOx),
                'PROD_ATTRA' => fi('PROD_ATTRA', 'Prd.attribute10', TS, 1, DOx)
            }
        ),
        'BILLING_PARTY' => new overcast.TypeInfo('BILLING_PARTY', 'Payer', SS, DOx,
            new Map<String, overcast.FieldInfo> {
                'PAYER' => fi('PAYER', 'Payer', TS, 10, DOx),
                'NAME' => fi('NAME', 'Name', TS, 35, DOx),
                'STREET' => fi('STREET', 'Street/House', TS, 30, DOx),
                'PO_BOX' => fi('PO_BOX', 'PO Box', TS, 10, DOx),
                'POSTL_CODE' => fi('POSTL_CODE', 'Postal Code', TS, 10, DOx),
                'POBX_PCD' => fi('POBX_PCD', 'PO Box PCode', TS, 10, DOx),
                'CITY' => fi('CITY', 'City', TS, 25, DOx),
                'LANGU' => fi('LANGU', 'Language', TS, 1, DOx),
                'COUNTRY' => fi('COUNTRY', 'Country', TS, 3, DOx),
                'TELEPHONE' => fi('TELEPHONE', 'Telephone 1', TS, 16, DOx),
                'C_CTR_AREA' => fi('C_CTR_AREA', 'Cred.Contr.Area', TS, 4, DOx),
                'CRED_ACCNT' => fi('CRED_ACCNT', 'Credit account', TS, 10, DOx),
                'CRED_LIMIT' => fi('CRED_LIMIT', 'Credit limit', TDC, 15,2, DOx),
                'ORDER_VALS' => fi('ORDER_VALS', 'Sales value', TDC, 15,2, DOx),
                'RCVBL_VALS' => fi('RCVBL_VALS', 'Receivables', TDC, 15,2, DOx),
                'CRED_LIAB' => fi('CRED_LIAB', 'Special liabil.', TDC, 15,2, DOx),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency', TS, 5, DOx),
                'MN_INVOICE' => fi('MN_INVOICE', 'SubsInvProcess', TS, 1, DOx),
                'BILL_SCHED' => fi('BILL_SCHED', 'Invoicing dates', TS, 2, DOx),
                'LIST_SCHED' => fi('LIST_SCHED', 'Inv.list sched.', TS, 2, DOx),
                'VAL_LIMIT' => fi('VAL_LIMIT', 'Max.cost estim.', TDC, 13,2, DOx),
                'ACCNT_ASGN' => fi('ACCNT_ASGN', 'AccAssmtGrpCust', TS, 2, DOx),
                'PMNTTRMS' => fi('PMNTTRMS', 'Pyt Terms', TS, 4, DOx),
                'ADD_VAL_DY' => fi('ADD_VAL_DY', 'Add.value days', TS, 2, DOx),
                'FIX_VAL_DY' => fi('FIX_VAL_DY', 'Fixed val.date', TD, 8, DOx),
                'PROD_PROP' => fi('PROD_PROP', 'Item proposal', TS, 10, DOx),
                'BILL_BLOCK' => fi('BILL_BLOCK', 'BBlock for SlsA', TS, 2, DOx),
                'ORDER_BLCK' => fi('ORDER_BLCK', 'Block order', TS, 2, DOx),
                'VAT_REG_NO' => fi('VAT_REG_NO', 'VAT Reg. No.', TS, 20, DOx),
                'VAT_CNTRY' => fi('VAT_CNTRY', 'CtrySlsTxNo.', TS, 3, DOx),
                'TAX_CLASS1' => fi('TAX_CLASS1', 'TaxClass1-Cust.', TS, 1, DOx),
                'TAX_CLASS2' => fi('TAX_CLASS2', 'TaxClass2-Cust.', TS, 1, DOx),
                'TAX_CLASS3' => fi('TAX_CLASS3', 'TaxClass3-Cust.', TS, 1, DOx),
                'TAX_CLASS4' => fi('TAX_CLASS4', 'TaxClass4-Cust.', TS, 1, DOx),
                'TAX_CLASS5' => fi('TAX_CLASS5', 'TaxClass5-Cust.', TS, 1, DOx),
                'TAX_CLASS6' => fi('TAX_CLASS6', 'TaxClass6-Cust.', TS, 1, DOx),
                'TAX_CLASS7' => fi('TAX_CLASS7', 'TaxClass7-Cust.', TS, 1, DOx),
                'TAX_CLASS8' => fi('TAX_CLASS8', 'TaxClass8-Cust.', TS, 1, DOx),
                'TAX_CLASS9' => fi('TAX_CLASS9', 'TaxClass9-Cust.', TS, 1, DOx),
                'REBATE_REL' => fi('REBATE_REL', 'Rebate', TS, 1, DOx),
                'REBATE_FRM' => fi('REBATE_FRM', 'Rebate index', TD, 8, DOx),
                'CRED_GROUP' => fi('CRED_GROUP', 'Cust.cred.grp', TS, 4, DOx),
                'REPR_GROUP' => fi('REPR_GROUP', 'Cred.rep.grp', TS, 3, DOx),
                'RISK_CATEG' => fi('RISK_CATEG', 'Risk category', TS, 3, DOx),
                'TRADE_ID' => fi('TRADE_ID', 'Trading partner', TS, 6, DOx)
            }
        ),
        'RETURN_x' => new overcast.TypeInfo('RETURN_x', 'Error Text', SS, DOx,
            new Map<String, overcast.FieldInfo> {
                'TYPE_x' => fi('TYPE_x', 'Message type', TS, 1, DOx),
                'CODE' => fi('CODE', 'Message code', TS, 5, DOx),
                'MESSAGE' => fi('MESSAGE', 'Message text', TS, 220, DOx),
                'LOG_NO' => fi('LOG_NO', 'Log Number', TS, 20, DOx),
                'LOG_MSG_NO' => fi('LOG_MSG_NO', 'Message Number', TS, 6, DOx),
                'MESSAGE_V1' => fi('MESSAGE_V1', 'Message Variable', TS, 50, DOx),
                'MESSAGE_V2' => fi('MESSAGE_V2', 'Message Variable', TS, 50, DOx),
                'MESSAGE_V3' => fi('MESSAGE_V3', 'Message Variable', TS, 50, DOx),
                'MESSAGE_V4' => fi('MESSAGE_V4', 'Message Variable', TS, 50, DOx)
            }
        ),
        'ORDER_ITEMS_IN' => new overcast.TypeInfo('ORDER_ITEMS_IN', 'Item Data Input', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'HG_LV_ITEM' => fi('HG_LV_ITEM', 'Higher-lev.item', TS, 6, DB),
                'PO_ITM_NO' => fi('PO_ITM_NO', 'PO Item', TS, 6, DB),
                'MATERIAL' => fi('MATERIAL', 'Material', TS, 18, DB),
                'CUST_MAT' => fi('CUST_MAT', 'Cust.material', TS, 22, DB),
                'BATCH' => fi('BATCH', 'Batch', TS, 10, DB),
                'DLV_GROUP' => fi('DLV_GROUP', 'Delivery group', TS, 3, DB),
                'PART_DLV' => fi('PART_DLV', 'Part.Dlv./Item', TS, 1, DB),
                'REASON_REJ' => fi('REASON_REJ', 'RejectionReason', TS, 2, DB),
                'BILL_BLOCK' => fi('BILL_BLOCK', 'Block', TS, 2, DB),
                'BILL_DATE' => fi('BILL_DATE', 'Billing Date', TD, 8, DB),
                'PLANT' => fi('PLANT', 'Plant', TS, 4, DB),
                'STORE_LOC' => fi('STORE_LOC', 'Storage Loc.', TS, 4, DB),
                'TARGET_QTY' => fi('TARGET_QTY', 'Target quantity', TS, 13, DB),
                'TARGET_QU' => fi('TARGET_QU', 'Target qty UoM', TS, 3, DB),
                'REQ_QTY' => fi('REQ_QTY', 'Order quantity', TS, 13, DB),
                'SALES_UNIT' => fi('SALES_UNIT', 'Sales Unit', TS, 3, DB),
                'ITEM_CATEG' => fi('ITEM_CATEG', 'Item Category', TS, 4, DB),
                'SHORT_TEXT' => fi('SHORT_TEXT', 'Description', TS, 40, DB),
                'REQ_DATE' => fi('REQ_DATE', 'Delivery Date', TD, 8, DB),
                'DATE_TYPE' => fi('DATE_TYPE', 'Date type', TS, 1, DB),
                'REQ_TIME' => fi('REQ_TIME', 'Arrival time', TS, 8, DB),
                'COND_TYPE' => fi('COND_TYPE', 'Condition Type', TS, 4, DB),
                'COND_VALUE' => fi('COND_VALUE', 'Amount', TDC, 11,2, DB),
                'COND_P_UNT' => fi('COND_P_UNT', 'Price unit', TS, 5, DB),
                'COND_D_UNT' => fi('COND_D_UNT', 'Condition unit', TS, 3, DB),
                'PRC_GROUP1' => fi('PRC_GROUP1', 'MaterialGroup 1', TS, 3, DB),
                'PRC_GROUP2' => fi('PRC_GROUP2', 'MaterialGroup 2', TS, 3, DB),
                'PRC_GROUP3' => fi('PRC_GROUP3', 'MaterialGroup 3', TS, 3, DB),
                'PRC_GROUP4' => fi('PRC_GROUP4', 'MaterialGroup 4', TS, 3, DB),
                'PRC_GROUP5' => fi('PRC_GROUP5', 'MaterialGroup 5', TS, 3, DB),
                'PROD_HIERA' => fi('PROD_HIERA', 'Prod.hierarchy', TS, 18, DB),
                'MATL_GROUP' => fi('MATL_GROUP', 'Material Group', TS, 9, DB),
                'PURCH_NO_C' => fi('PURCH_NO_C', 'PO Number', TS, 35, DB),
                'PURCH_DATE' => fi('PURCH_DATE', 'PO Date', TD, 8, DB),
                'PO_METHOD' => fi('PO_METHOD', 'Pur. ord. type', TS, 4, DB),
                'REF_1' => fi('REF_1', 'Your Reference', TS, 12, DB),
                'PURCH_NO_S' => fi('PURCH_NO_S', 'PO Number', TS, 35, DB),
                'PO_DAT_S' => fi('PO_DAT_S', 'PurchOrderDate', TD, 8, DB),
                'PO_METH_S' => fi('PO_METH_S', 'Pur. ord. type', TS, 4, DB),
                'REF_1_S' => fi('REF_1_S', 'Your reference', TS, 12, DB),
                'PO_ITM_NO_S' => fi('PO_ITM_NO_S', 'PO item', TS, 6, DB),
                'COND_VAL1' => fi('COND_VAL1', 'Amount', TDC, 23,4, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency', TS, 5, DB),
                'CURR_ISO' => fi('CURR_ISO', 'ISO code crcy', TS, 3, DB),
                'T_UNIT_ISO' => fi('T_UNIT_ISO', 'Target ISO UoM', TS, 3, DB),
                'S_UNIT_ISO' => fi('S_UNIT_ISO', 'Sales unit ISO', TS, 3, DB),
                'CD_UNT_ISO' => fi('CD_UNT_ISO', 'ISO cond. UoM', TS, 3, DB),
                'CUST_MAT35' => fi('CUST_MAT35', 'Cust.material', TS, 35, DB),
                'INCOTERMS1' => fi('INCOTERMS1', 'Incoterms', TS, 3, DB),
                'INCOTERMS2' => fi('INCOTERMS2', 'Incoterms 2', TS, 28, DB),
                'DLV_TIME' => fi('DLV_TIME', 'Delivery time', TS, 3, DB),
                'ASSORT_MOD' => fi('ASSORT_MOD', 'Module', TS, 18, DB),
                'VAL_CONTR' => fi('VAL_CONTR', 'Value contract no.', TS, 10, DB),
                'VAL_CON_I' => fi('VAL_CON_I', 'Val. cont.item', TS, 6, DB),
                'REF_DOC' => fi('REF_DOC', 'Reference Doc.', TS, 10, DB),
                'REF_DOC_IT' => fi('REF_DOC_IT', 'Reference Item', TS, 6, DB),
                'REF_DOC_CA' => fi('REF_DOC_CA', 'Prec.doc.categ.', TS, 1, DB),
                'CD_TYPE2' => fi('CD_TYPE2', 'Condition Type', TS, 4, DB),
                'CD_VALUE2' => fi('CD_VALUE2', 'Amount', TDC, 23,4, DB),
                'CD_P_UNT2' => fi('CD_P_UNT2', 'Price unit', TS, 5, DB),
                'CD_D_UNT2' => fi('CD_D_UNT2', 'Condition unit', TS, 3, DB),
                'CD_D_UISO2' => fi('CD_D_UISO2', 'ISO cond. UoM', TS, 3, DB),
                'CD_CURR2' => fi('CD_CURR2', 'Currency', TS, 5, DB),
                'CD_CU_ISO2' => fi('CD_CU_ISO2', 'ISO code crcy', TS, 3, DB),
                'CD_TYPE3' => fi('CD_TYPE3', 'Condition Type', TS, 4, DB),
                'CD_VALUE3' => fi('CD_VALUE3', 'Amount', TDC, 23,4, DB),
                'CD_P_UNT3' => fi('CD_P_UNT3', 'Price unit', TS, 5, DB),
                'CD_D_UNT3' => fi('CD_D_UNT3', 'Condition unit', TS, 3, DB),
                'CD_D_UISO3' => fi('CD_D_UISO3', 'ISO cond. UoM', TS, 3, DB),
                'CD_CURR3' => fi('CD_CURR3', 'Currency', TS, 5, DB),
                'CD_CU_ISO3' => fi('CD_CU_ISO3', 'ISO code crcy', TS, 3, DB),
                'CD_TYPE4' => fi('CD_TYPE4', 'Condition Type', TS, 4, DB),
                'CD_VALUE4' => fi('CD_VALUE4', 'Amount', TDC, 23,4, DB),
                'CD_P_UNT4' => fi('CD_P_UNT4', 'Price unit', TS, 5, DB),
                'CD_D_UNT4' => fi('CD_D_UNT4', 'Condition unit', TS, 3, DB),
                'CD_D_UISO4' => fi('CD_D_UISO4', 'ISO cond. UoM', TS, 3, DB),
                'CD_CURR4' => fi('CD_CURR4', 'Currency', TS, 5, DB),
                'CD_CU_ISO4' => fi('CD_CU_ISO4', 'ISO code crcy', TS, 3, DB),
                'MAT_EXT' => fi('MAT_EXT', 'Material Number', TS, 40, DB),
                'MAT_GUID' => fi('MAT_GUID', 'GUID (External)', TS, 32, DB),
                'MAT_VERS' => fi('MAT_VERS', 'Version Number', TS, 10, DB),
                'ALTERN_BOM' => fi('ALTERN_BOM', 'AltBOM', TS, 2, DB),
                'FKK_CONACCT' => fi('FKK_CONACCT', 'Character Field of Length 12', TS, 12, DB),
                'EAN_UPC' => fi('EAN_UPC', 'EAN/UPC', TS, 18, DB),
                'SHIP_POINT' => fi('SHIP_POINT', 'Shipping Point', TS, 4, DB),
                'PRODCAT' => fi('PRODCAT', 'Catalog', TS, 10, DB),
                'SGT_RCAT' => fi('SGT_RCAT', 'Reqmnt Segment', TS, 16, DB),
                'INCOTERMSV' => fi('INCOTERMSV', 'Inco. Version', TS, 4, DB),
                'INCOTERMS2L' => fi('INCOTERMS2L', 'Inco. Location1', TS, 70, DB),
                'INCOTERMS3L' => fi('INCOTERMS3L', 'Inco. Location2', TS, 70, DB),
                'REF_DOC_CA_LONG' => fi('REF_DOC_CA_LONG', 'Document Cat.', TS, 4, DB),
                'MATERIAL_LONG' => fi('MATERIAL_LONG', 'Material', TS, 40, DB),
                'REQ_SEG_LONG' => fi('REQ_SEG_LONG', 'Reqmnt Segment', TS, 40, DB)
            }
        ),
        'ORDER_PARTNERS' => new overcast.TypeInfo('ORDER_PARTNERS', 'Partners', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'PARTN_ROLE' => fi('PARTN_ROLE', 'Partner Functn', TS, 2, DB),
                'PARTN_NUMB' => fi('PARTN_NUMB', 'Customer', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'TITLE' => fi('TITLE', 'Form of address', TS, 15, DB),
                'NAME' => fi('NAME', 'Name', TS, 35, DB),
                'NAME_2' => fi('NAME_2', 'Name 2', TS, 35, DB),
                'NAME_3' => fi('NAME_3', 'Name 3', TS, 35, DB),
                'NAME_4' => fi('NAME_4', 'Name 4', TS, 35, DB),
                'STREET' => fi('STREET', 'Street', TS, 35, DB),
                'COUNTRY' => fi('COUNTRY', 'Country', TS, 3, DB),
                'COUNTRY_ISO' => fi('COUNTRY_ISO', 'Country ISO', TS, 2, DB),
                'POSTL_CODE' => fi('POSTL_CODE', 'Postal Code', TS, 10, DB),
                'POBX_PCD' => fi('POBX_PCD', 'PO Box PCode', TS, 10, DB),
                'POBX_CTY' => fi('POBX_CTY', 'P.O.Box city', TS, 35, DB),
                'CITY' => fi('CITY', 'City', TS, 35, DB),
                'DISTRICT' => fi('DISTRICT', 'District', TS, 35, DB),
                'REGION' => fi('REGION', 'Region', TS, 3, DB),
                'PO_BOX' => fi('PO_BOX', 'PO Box', TS, 10, DB),
                'TELEPHONE' => fi('TELEPHONE', 'Telephone 1', TS, 16, DB),
                'TELEPHONE2' => fi('TELEPHONE2', 'Telephone 2', TS, 16, DB),
                'TELEBOX' => fi('TELEBOX', 'Telebox', TS, 15, DB),
                'FAX_NUMBER' => fi('FAX_NUMBER', 'Fax Number', TS, 31, DB),
                'TELETEX_NO' => fi('TELETEX_NO', 'Teletex', TS, 30, DB),
                'TELEX_NO' => fi('TELEX_NO', 'Telex', TS, 30, DB),
                'LANGU' => fi('LANGU', 'Language', TS, 1, DB),
                'LANGU_ISO' => fi('LANGU_ISO', 'Lang. (ISO)', TS, 2, DB),
                'UNLOAD_PT' => fi('UNLOAD_PT', 'Unloading Point', TS, 25, DB),
                'TRANSPZONE' => fi('TRANSPZONE', 'Transport Zone', TS, 10, DB),
                'TAXJURCODE' => fi('TAXJURCODE', 'Tax Jur.', TS, 15, DB),
                'ADDRESS' => fi('ADDRESS', 'Address', TS, 10, DB),
                'PRIV_ADDR' => fi('PRIV_ADDR', 'Home address', TS, 10, DB),
                'ADDR_TYPE' => fi('ADDR_TYPE', 'Address Type', TS, 1, DB),
                'ADDR_ORIG' => fi('ADDR_ORIG', 'Address origin', TS, 1, DB),
                'ADDR_LINK' => fi('ADDR_LINK', 'Address no.', TS, 10, DB),
                'VAT_REG_NO' => fi('VAT_REG_NO', 'VAT Reg. No.', TS, 20, DB)
            }
        ),
        'ORDER_SCHEDULE_IN' => new overcast.TypeInfo('ORDER_SCHEDULE_IN', 'Schedule Line Data Input', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'SCHED_LINE' => fi('SCHED_LINE', 'Schedule Line', TS, 4, DB),
                'REQ_DATE' => fi('REQ_DATE', 'Delivery Date', TD, 8, DB),
                'DATE_TYPE' => fi('DATE_TYPE', 'Date type', TS, 1, DB),
                'REQ_TIME' => fi('REQ_TIME', 'Arrival time', TS, 8, DB),
                'REQ_QTY' => fi('REQ_QTY', 'Order quantity', TDC, 13,3, DB),
                'REQ_DLV_BL' => fi('REQ_DLV_BL', 'Delivery block', TS, 2, DB),
                'SCHED_TYPE' => fi('SCHED_TYPE', 'Sched.line cat.', TS, 2, DB),
                'TP_DATE' => fi('TP_DATE', 'TranspPlngDate', TD, 8, DB),
                'MS_DATE' => fi('MS_DATE', 'Mat.Avail.Date', TD, 8, DB),
                'LOAD_DATE' => fi('LOAD_DATE', 'Loading Date', TD, 8, DB),
                'GI_DATE' => fi('GI_DATE', 'Goods Issue', TD, 8, DB),
                'TP_TIME' => fi('TP_TIME', 'Tr. Plan. Time', TS, 8, DB),
                'MS_TIME' => fi('MS_TIME', 'Matl Staging Tme', TS, 8, DB),
                'LOAD_TIME' => fi('LOAD_TIME', 'Loading Time', TS, 8, DB),
                'GI_TIME' => fi('GI_TIME', 'GI Time', TS, 8, DB),
                'REFOBJTYPE' => fi('REFOBJTYPE', 'Object Type', TS, 10, DB),
                'REFOBJKEY' => fi('REFOBJKEY', 'Key', TS, 70, DB),
                'REFLOGSYS' => fi('REFLOGSYS', 'Logical System', TS, 10, DB),
                'DLV_DATE' => fi('DLV_DATE', 'Delivery Date', TD, 8, DB),
                'DLV_TIME' => fi('DLV_TIME', 'Arrival time', TS, 8, DB),
                'REL_TYPE' => fi('REL_TYPE', 'Rel. Type', TS, 1, DB),
                'PLAN_SCHED_TYPE' => fi('PLAN_SCHED_TYPE', 'Sched.line type', TS, 1, DB)
            }
        ),
        'ORDER_ITEMS_OUT' => new overcast.TypeInfo('ORDER_ITEMS_OUT', 'Item Data Output', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'PO_ITM_NO' => fi('PO_ITM_NO', 'PO Item', TS, 6, DB),
                'MATERIAL' => fi('MATERIAL', 'Material', TS, 18, DB),
                'MAT_ENTRD' => fi('MAT_ENTRD', 'MaterialEntered', TS, 18, DB),
                'SHORT_TEXT' => fi('SHORT_TEXT', 'Description', TS, 40, DB),
                'NET_VALUE' => fi('NET_VALUE', 'Net value', TS, 15, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Doc. Currency', TS, 5, DB),
                'SUBTOTAL_1' => fi('SUBTOTAL_1', 'Net value', TS, 15, DB),
                'SUBTOTAL_2' => fi('SUBTOTAL_2', 'Net value', TS, 15, DB),
                'SUBTOTAL_3' => fi('SUBTOTAL_3', 'Net value', TS, 15, DB),
                'SUBTOTAL_4' => fi('SUBTOTAL_4', 'Net value', TS, 15, DB),
                'SUBTOTAL_5' => fi('SUBTOTAL_5', 'Net value', TS, 15, DB),
                'SUBTOTAL_6' => fi('SUBTOTAL_6', 'Net value', TS, 15, DB),
                'SALES_UNIT' => fi('SALES_UNIT', 'Sales Unit', TS, 3, DB),
                'QTY_REQ_DT' => fi('QTY_REQ_DT', 'Quantity', TS, 13, DB),
                'DLV_DATE' => fi('DLV_DATE', 'Delivery Date', TD, 8, DB),
                'REPL_TIME' => fi('REPL_TIME', 'Tot.rep.lead', TS, 3, DB),
                'CONFIGURED' => fi('CONFIGURED', 'Configurable', TS, 1, DB),
                'PURCH_NO_C' => fi('PURCH_NO_C', 'PO Number', TS, 35, DB),
                'PURCH_DATE' => fi('PURCH_DATE', 'PO Date', TD, 8, DB),
                'PO_METHOD' => fi('PO_METHOD', 'Pur. ord. type', TS, 4, DB),
                'REF_1' => fi('REF_1', 'Your Reference', TS, 12, DB),
                'PURCH_NO_S' => fi('PURCH_NO_S', 'PO Number', TS, 35, DB),
                'PO_DAT_S' => fi('PO_DAT_S', 'PurchOrderDate', TD, 8, DB),
                'PO_METH_S' => fi('PO_METH_S', 'Pur. ord. type', TS, 4, DB),
                'REF_1_S' => fi('REF_1_S', 'Your reference', TS, 12, DB),
                'PO_ITM_NO_S' => fi('PO_ITM_NO_S', 'PO item', TS, 6, DB),
                'NET_VALUE1' => fi('NET_VALUE1', 'Net value', TDC, 23,4, DB),
                'CURR_ISO' => fi('CURR_ISO', 'ISO code crcy', TS, 3, DB),
                'S_UNIT_ISO' => fi('S_UNIT_ISO', 'Sales unit ISO', TS, 3, DB),
                'REQ_QTY' => fi('REQ_QTY', 'Order Quantity', TDC, 15,3, DB),
                'PLANT' => fi('PLANT', 'Plant', TS, 4, DB),
                'TX_DOC_CUR' => fi('TX_DOC_CUR', 'Tax amount', TDC, 23,4, DB),
                'MAT_EXT' => fi('MAT_EXT', 'Material Number', TS, 40, DB),
                'MAT_GUID' => fi('MAT_GUID', 'GUID (External)', TS, 32, DB),
                'MAT_VERS' => fi('MAT_VERS', 'Version Number', TS, 10, DB),
                'MAT_E_EXT' => fi('MAT_E_EXT', 'Material Number', TS, 40, DB),
                'MAT_E_GUID' => fi('MAT_E_GUID', 'GUID (External)', TS, 32, DB),
                'MAT_E_VERS' => fi('MAT_E_VERS', 'Version Number', TS, 10, DB),
                'TARGET_QTY' => fi('TARGET_QTY', 'Target quantity', TDC, 13,3, DB),
                'TARGET_QU' => fi('TARGET_QU', 'Target qty UoM', TS, 3, DB),
                'T_UNIT_ISO' => fi('T_UNIT_ISO', 'Target ISO UoM', TS, 3, DB),
                'ITEM_CATEG' => fi('ITEM_CATEG', 'Item Category', TS, 4, DB),
                'SHIP_POINT' => fi('SHIP_POINT', 'Shipping Point', TS, 4, DB),
                'HG_LV_ITEM' => fi('HG_LV_ITEM', 'Higher-lev.item', TS, 6, DB),
                'CUST_MAT' => fi('CUST_MAT', 'Cust.material', TS, 35, DB),
                'PART_DLV' => fi('PART_DLV', 'Part.Dlv./Item', TS, 1, DB),
                'REASON_REJ' => fi('REASON_REJ', 'RejectionReason', TS, 2, DB),
                'BILL_BLOCK' => fi('BILL_BLOCK', 'Block', TS, 2, DB),
                'STGE_LOC' => fi('STGE_LOC', 'Storage Loc.', TS, 4, DB),
                'PROD_HIER' => fi('PROD_HIER', 'Prod. Hierarchy', TS, 18, DB),
                'MATL_GROUP' => fi('MATL_GROUP', 'Material Group', TS, 9, DB),
                'SUBTOTAL1' => fi('SUBTOTAL1', 'Subtotal 1', TDC, 23,4, DB),
                'SUBTOTAL2' => fi('SUBTOTAL2', 'Subtotal 2', TDC, 23,4, DB),
                'SUBTOTAL3' => fi('SUBTOTAL3', 'Subtotal 3', TDC, 23,4, DB),
                'SUBTOTAL4' => fi('SUBTOTAL4', 'Subtotal 4', TDC, 23,4, DB),
                'SUBTOTAL5' => fi('SUBTOTAL5', 'Subtotal 5', TDC, 23,4, DB),
                'SUBTOTAL6' => fi('SUBTOTAL6', 'Subtotal 6', TDC, 23,4, DB),
                'MATERIAL_LONG' => fi('MATERIAL_LONG', 'Material', TS, 40, DB),
                'MAT_ENTRD_LONG' => fi('MAT_ENTRD_LONG', 'MaterialEntered', TS, 40, DB),
                'REQ_SEGMENT' => fi('REQ_SEGMENT', 'Reqmnt Segment', TS, 16, DB),
                'REQ_SEG_LONG' => fi('REQ_SEG_LONG', 'Reqmnt Segment', TS, 40, DB)
            }
        ),
        'ORDER_CFGS_REF' => new overcast.TypeInfo('ORDER_CFGS_REF', 'Configuration: Reference Data', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'POSEX' => fi('POSEX', 'External Item', TS, 6, DB),
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'ROOT_ID' => fi('ROOT_ID', 'Instance Number', TS, 8, DB),
                'SCE' => fi('SCE', 'Config. Type', TS, 1, DB),
                'KBNAME' => fi('KBNAME', 'KB Object', TS, 30, DB),
                'KBVERSION' => fi('KBVERSION', 'Version', TS, 30, DB),
                'COMPLETE' => fi('COMPLETE', 'Indicators', TS, 1, DB),
                'CONSISTENT' => fi('CONSISTENT', 'Indicators', TS, 1, DB),
                'CFGINFO' => fi('CFGINFO', 'BLOB', TS, 250, DB),
                'KBPROFILE' => fi('KBPROFILE', 'KB Profile', TS, 30, DB),
                'KBLANGUAGE' => fi('KBLANGUAGE', 'KB Language', TS, 1, DB),
                'CBASE_ID' => fi('CBASE_ID', 'Instance', TS, 32, DB),
                'CBASE_ID_TYPE' => fi('CBASE_ID_TYPE', 'ID Type', TS, 1, DB)
            }
        ),
        'ORDER_CFGS_INST' => new overcast.TypeInfo('ORDER_CFGS_INST', 'Configuration: Instances', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'INST_ID' => fi('INST_ID', 'Instance Number', TS, 8, DB),
                'OBJ_TYPE' => fi('OBJ_TYPE', 'External Obj. Type', TS, 10, DB),
                'CLASS_TYPE' => fi('CLASS_TYPE', 'Class Type', TS, 3, DB),
                'OBJ_KEY' => fi('OBJ_KEY', 'Object Key', TS, 50, DB),
                'OBJ_TXT' => fi('OBJ_TXT', 'Obj.Description', TS, 70, DB),
                'QUANTITY' => fi('QUANTITY', 'Instance Qty', TS, 15, DB),
                'AUTHOR' => fi('AUTHOR', 'Inferred', TS, 1, DB),
                'QUANTITY_UNIT' => fi('QUANTITY_UNIT', 'Unit of Measure', TS, 3, DB),
                'COMPLETE' => fi('COMPLETE', 'Indicators', TS, 1, DB),
                'CONSISTENT' => fi('CONSISTENT', 'Indicators', TS, 1, DB),
                'OBJECT_GUID' => fi('OBJECT_GUID', 'TYPE_OF', TS, 32, DB),
                'PERSIST_ID' => fi('PERSIST_ID', 'Instance', TS, 32, DB),
                'PERSIST_ID_TYPE' => fi('PERSIST_ID_TYPE', 'ID Type', TS, 1, DB)
            }
        ),
        'ORDER_CFGS_PART_OF' => new overcast.TypeInfo('ORDER_CFGS_PART_OF', 'Configuration: Part-of Specifications', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'PARENT_ID' => fi('PARENT_ID', 'Instance Number', TS, 8, DB),
                'INST_ID' => fi('INST_ID', 'Instance Number', TS, 8, DB),
                'PART_OF_NO' => fi('PART_OF_NO', 'Item Number', TS, 4, DB),
                'OBJ_TYPE' => fi('OBJ_TYPE', 'External Obj. Type', TS, 10, DB),
                'CLASS_TYPE' => fi('CLASS_TYPE', 'Class Type', TS, 3, DB),
                'OBJ_KEY' => fi('OBJ_KEY', 'Object Key', TS, 50, DB),
                'AUTHOR' => fi('AUTHOR', 'Inferred', TS, 1, DB),
                'SALES_RELEVANT' => fi('SALES_RELEVANT', 'Sales relevant', TS, 1, DB),
                'PART_OF_GUID' => fi('PART_OF_GUID', 'PART_OF', TS, 32, DB)
            }
        ),
        'ORDER_CFGS_VALUE' => new overcast.TypeInfo('ORDER_CFGS_VALUE', 'Configuration: Characteristic Values', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'INST_ID' => fi('INST_ID', 'Instance Number', TS, 8, DB),
                'CHARC' => fi('CHARC', 'Char. Name', TS, 40, DB),
                'CHARC_TXT' => fi('CHARC_TXT', 'Char. Description', TS, 70, DB),
                'VALUE' => fi('VALUE', 'Char. Value', TS, 40, DB),
                'VALUE_TXT' => fi('VALUE_TXT', 'Value Descript.', TS, 70, DB),
                'AUTHOR' => fi('AUTHOR', 'Inferred', TS, 1, DB),
                'VALUE_TO' => fi('VALUE_TO', 'Char. Value', TS, 40, DB),
                'VALCODE' => fi('VALCODE', 'Value Type', TS, 1, DB)
            }
        ),
        'ORDER_CFGS_BLOB' => new overcast.TypeInfo('ORDER_CFGS_BLOB', 'Internal configuration data (SCE)', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'CONTEXT' => fi('CONTEXT', 'BLOB', TS, 250, DB)
            }
        ),
        'ORDER_CCARD' => new overcast.TypeInfo('ORDER_CCARD', 'Credit Card Data', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'CC_TYPE' => fi('CC_TYPE', 'Card type', TS, 4, DB),
                'CC_NUMBER' => fi('CC_NUMBER', 'Card number', TS, 25, DB),
                'CC_VALID_T' => fi('CC_VALID_T', 'Exp.date', TD, 8, DB),
                'CC_NAME' => fi('CC_NAME', 'Cardholder', TS, 40, DB),
                'BILLAMOUNT' => fi('BILLAMOUNT', 'Billing value', TDC, 23,4, DB),
                'AUTH_FLAG' => fi('AUTH_FLAG', 'AuthTran', TS, 1, DB),
                'AUTHAMOUNT' => fi('AUTHAMOUNT', 'Authorized amt', TDC, 23,4, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency', TS, 5, DB),
                'CURR_ISO' => fi('CURR_ISO', 'ISO code crcy', TS, 3, DB),
                'AUTH_DATE' => fi('AUTH_DATE', 'Auth.date', TD, 8, DB),
                'AUTH_TIME' => fi('AUTH_TIME', 'Auth.time', TS, 8, DB),
                'AUTH_CC_NO' => fi('AUTH_CC_NO', 'Auth.no.', TS, 10, DB),
                'AUTH_REFNO' => fi('AUTH_REFNO', 'Auth.refer.code', TS, 15, DB),
                'CC_REACT' => fi('CC_REACT', 'Response', TS, 1, DB),
                'CC_RE_AMOUNT' => fi('CC_RE_AMOUNT', 'Currency amount', TDC, 23,4, DB),
                'GL_ACCOUNT' => fi('GL_ACCOUNT', 'G/L Account', TS, 10, DB),
                'CC_STAT_EX' => fi('CC_STAT_EX', 'Call status', TS, 1, DB),
                'CC_REACT_T' => fi('CC_REACT_T', 'Text', TS, 40, DB),
                'VIRT_CARD' => fi('VIRT_CARD', 'Checkbox', TS, 1, DB),
                'MERCHIDCL' => fi('MERCHIDCL', 'Merchant ID', TS, 15, DB),
                'PRE_AUTH' => fi('PRE_AUTH', 'Preauth.', TS, 1, DB),
                'CC_SEQ_NO' => fi('CC_SEQ_NO', 'Suffix', TS, 10, DB),
                'AMOUNTCHAN' => fi('AMOUNTCHAN', 'Amount changed', TS, 1, DB),
                'AUTHORTYPE' => fi('AUTHORTYPE', 'Auth. type', TS, 1, DB),
                'DATAORIGIN' => fi('DATAORIGIN', 'Entry mode', TS, 1, DB),
                'RADRCHECK1' => fi('RADRCHECK1', 'Address result', TS, 4, DB),
                'RADRCHECK2' => fi('RADRCHECK2', 'Address check', TS, 4, DB),
                'RADRCHECK3' => fi('RADRCHECK3', 'ZIP code check', TS, 4, DB),
                'RCARDCHECK' => fi('RCARDCHECK', 'Card check', TS, 4, DB),
                'CC_LIMITED' => fi('CC_LIMITED', 'Limit to', TS, 1, DB),
                'CC_VERIF_VALUE' => fi('CC_VERIF_VALUE', 'Card Verif.Code', TS, 6, DB),
                'CC_CTRL_FIELD' => fi('CC_CTRL_FIELD', 'Control Field f. CVV', TS, 1, DB),
                'CC_IN_USE_ST' => fi('CC_IN_USE_ST', 'CVV Usage Status', TS, 1, DB)
            }
        ),
        'ORDER_CCARD_EX' => new overcast.TypeInfo('ORDER_CCARD_EX', 'Credit card data output', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'PAY_TYPE' => fi('PAY_TYPE', 'Means of paym.', TS, 1, DB),
                'CC_TYPE' => fi('CC_TYPE', 'Card type', TS, 4, DB),
                'CC_NUMBER' => fi('CC_NUMBER', 'Card number', TS, 25, DB),
                'CC_SEQ_NO' => fi('CC_SEQ_NO', 'Suffix', TS, 10, DB),
                'CC_VALID_F' => fi('CC_VALID_F', 'Valid from', TD, 8, DB),
                'CC_VALID_T' => fi('CC_VALID_T', 'Exp.date', TD, 8, DB),
                'CC_NAME' => fi('CC_NAME', 'Cardholder', TS, 40, DB),
                'AUTHAMOUNT' => fi('AUTHAMOUNT', 'Authorized amt', TDC, 23,4, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency', TS, 5, DB),
                'CURR_ISO' => fi('CURR_ISO', 'ISO code crcy', TS, 3, DB),
                'AUTH_DATE' => fi('AUTH_DATE', 'Auth.date', TD, 8, DB),
                'AUTH_TIME' => fi('AUTH_TIME', 'Auth.time', TS, 8, DB),
                'MERCHIDCL' => fi('MERCHIDCL', 'Merchant ID', TS, 15, DB),
                'TERMINAL' => fi('TERMINAL', 'Terminal', TS, 10, DB),
                'BILLAMOUNT' => fi('BILLAMOUNT', 'Billing value', TDC, 23,4, DB),
                'CC_LI_AMOUNT' => fi('CC_LI_AMOUNT', 'Limit to', TS, 1, DB),
                'CC_AUTTH_NO' => fi('CC_AUTTH_NO', 'Auth.no.', TS, 10, DB),
                'BILLSTATUS' => fi('BILLSTATUS', 'Billing status', TS, 1, DB),
                'DATAORIGIN' => fi('DATAORIGIN', 'Entry mode', TS, 1, DB),
                'CC_SETTLED' => fi('CC_SETTLED', 'Settled', TS, 1, DB),
                'AUTH_REFNO' => fi('AUTH_REFNO', 'Auth.refer.code', TS, 15, DB),
                'PTOFRCPT' => fi('PTOFRCPT', 'PointOfReceipt', TS, 10, DB),
                'CC_REACT' => fi('CC_REACT', 'Response', TS, 1, DB),
                'AUTH_FLAG' => fi('AUTH_FLAG', 'AuthTran', TS, 1, DB),
                'BILL_PLAN' => fi('BILL_PLAN', 'Bill. Plan No.', TS, 10, DB),
                'BILL_PLANI' => fi('BILL_PLANI', 'Item', TS, 6, DB),
                'CC_RE_AMOUNT' => fi('CC_RE_AMOUNT', 'Currency amount', TDC, 23,4, DB),
                'GL_ACCOUNT' => fi('GL_ACCOUNT', 'G/L Account', TS, 10, DB),
                'CC_STAT_EX' => fi('CC_STAT_EX', 'Call status', TS, 1, DB),
                'CC_REACT_T' => fi('CC_REACT_T', 'Text', TS, 40, DB),
                'RFCAUT' => fi('RFCAUT', 'Destination', TS, 32, DB),
                'AUT_SETINIT' => fi('AUT_SETINIT', 'Init.Authoriz. SET', TS, 30, DB),
                'AUT_SETINFO' => fi('AUT_SETINFO', 'Result Auth. (SET)', TS, 30, DB),
                'PRE_AUTH' => fi('PRE_AUTH', 'Preauth.', TS, 1, DB)
            }
        ),
        'ORDER_SCHEDULE_EX' => new overcast.TypeInfo('ORDER_SCHEDULE_EX', 'Schedule line data output', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'DOC_NUMBER' => fi('DOC_NUMBER', 'Sales Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'SCHED_LINE' => fi('SCHED_LINE', 'Schedule Line', TS, 4, DB),
                'SCHED_TYPE' => fi('SCHED_TYPE', 'Sched.line cat.', TS, 2, DB),
                'RELFORDEL' => fi('RELFORDEL', 'Item rel.f.dlv.', TS, 1, DB),
                'REQ_DATE' => fi('REQ_DATE', 'Delivery Date', TD, 8, DB),
                'REQ_TIME' => fi('REQ_TIME', 'Arrival time', TS, 8, DB),
                'REQ_QTY' => fi('REQ_QTY', 'Order quantity', TDC, 13,3, DB),
                'CONFIR_QTY' => fi('CONFIR_QTY', 'Confirmed Qty', TDC, 13,3, DB),
                'SALES_UNIT' => fi('SALES_UNIT', 'Sales Unit', TS, 3, DB),
                'ISOCODUNIT' => fi('ISOCODUNIT', 'ISO code', TS, 3, DB),
                'REQ_QTY1' => fi('REQ_QTY1', 'Required qty', TDC, 13,3, DB),
                'BASE_UOM' => fi('BASE_UOM', 'Base Unit', TS, 3, DB),
                'ISOBASUNIT' => fi('ISOBASUNIT', 'Target ISO UoM', TS, 3, DB),
                'REQ_DATE1' => fi('REQ_DATE1', 'Requirement dte', TD, 8, DB),
                'REQ_TYPE' => fi('REQ_TYPE', 'RequirementType', TS, 2, DB),
                'PLTYPE' => fi('PLTYPE', 'Planning type', TS, 1, DB),
                'BUSIDOCNR' => fi('BUSIDOCNR', 'Business docum.', TS, 10, DB),
                'BUSIITNR' => fi('BUSIITNR', 'Items', TS, 6, DB),
                'SCHED_LIN1' => fi('SCHED_LIN1', 'Schedule line', TS, 4, DB),
                'EARL_DATE' => fi('EARL_DATE', 'Reservation', TD, 8, DB),
                'MAINT_REQ' => fi('MAINT_REQ', 'Maintenance req', TS, 10, DB),
                'PREQ_NO' => fi('PREQ_NO', 'Purch.Req.', TS, 10, DB),
                'PO_TYPE' => fi('PO_TYPE', 'Order Type', TS, 4, DB),
                'DOC_CAT' => fi('DOC_CAT', 'Document cat.', TS, 1, DB),
                'CONF_STAT' => fi('CONF_STAT', 'Confirm status', TS, 1, DB),
                'IR_IND' => fi('IR_IND', 'Invoice Receipt', TS, 1, DB),
                'RETURNDATE' => fi('RETURNDATE', 'ReturnPackaging', TD, 8, DB),
                'DATE_TYPE' => fi('DATE_TYPE', 'Date type', TS, 1, DB),
                'TP_DATE' => fi('TP_DATE', 'TranspPlngDate', TD, 8, DB),
                'MS_DATE' => fi('MS_DATE', 'Mat.Avail.Date', TD, 8, DB),
                'LOAD_DATE' => fi('LOAD_DATE', 'Loading Date', TD, 8, DB),
                'GI_DATE' => fi('GI_DATE', 'Goods Issue', TD, 8, DB),
                'CORR_QTY' => fi('CORR_QTY', 'Corr.qty', TDC, 13,3, DB),
                'REQ_DLV_BL' => fi('REQ_DLV_BL', 'Delivery block', TS, 2, DB),
                'GRP_DEFIN' => fi('GRP_DEFIN', 'Group definition of structure data', TS, 3, DB),
                'RELEASTYP' => fi('RELEASTYP', 'Rel. Type', TS, 1, DB),
                'FORCAST_NR' => fi('FORCAST_NR', 'F. dlv. sched.', TS, 10, DB),
                'COMMIT_QTY' => fi('COMMIT_QTY', 'Committed qty', TDC, 13,3, DB),
                'SIZE2' => fi('SIZE2', 'Size 2', TDC, 13,3, DB),
                'SIZE3' => fi('SIZE3', 'Size 3', TDC, 13,3, DB),
                'UNIT_MEAS' => fi('UNIT_MEAS', 'Size unit', TS, 3, DB),
                'ISO_ROMEI' => fi('ISO_ROMEI', 'Target ISO UoM', TS, 3, DB),
                'FORMULAKEY' => fi('FORMULAKEY', 'Formula key', TS, 2, DB),
                'SALESQTYNR' => fi('SALESQTYNR', 'Numerator', TDC, 5,0, DB),
                'SALESQTYDE' => fi('SALESQTYDE', 'Denominat.', TDC, 5,0, DB),
                'AVAIL_CON' => fi('AVAIL_CON', 'Avail. confirm.', TS, 1, DB),
                'MOVE_TYPE' => fi('MOVE_TYPE', 'Movement Type', TS, 3, DB),
                'PREQ_ITEM' => fi('PREQ_ITEM', 'Requisn. item', TS, 5, DB),
                'LINTYP_EDI' => fi('LINTYP_EDI', 'Sched.line type', TS, 1, DB),
                'ORDERID' => fi('ORDERID', 'Order', TS, 12, DB),
                'PLANORDNR' => fi('PLANORDNR', 'Planned order', TS, 10, DB),
                'BOMEXPL_NO' => fi('BOMEXPL_NO', 'BOM expl.number', TS, 8, DB),
                'CUSTCHSTAT' => fi('CUSTCHSTAT', 'Engin. change', TS, 17, DB),
                'GURANTEED' => fi('GURANTEED', 'Guaranteed', TDBL, 16,8, DB),
                'MS_TIME' => fi('MS_TIME', 'Matl Staging Tme', TS, 8, DB),
                'TP_TIME' => fi('TP_TIME', 'Tr. Plan. Time', TS, 8, DB),
                'LOAD_TIME' => fi('LOAD_TIME', 'Loading Time', TS, 8, DB),
                'GI_TIME' => fi('GI_TIME', 'GI Time', TS, 8, DB),
                'ROUTESCHED' => fi('ROUTESCHED', 'Route Schedule', TS, 10, DB)
            }
        ),
        'ORDER_CONDITION_EX' => new overcast.TypeInfo('ORDER_CONDITION_EX', 'Conditions Output', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'COND_ST_NO' => fi('COND_ST_NO', 'Step number', TS, 3, DB),
                'COND_COUNT' => fi('COND_COUNT', 'Counter', TS, 2, DB),
                'COND_TYPE' => fi('COND_TYPE', 'Condition Type', TS, 4, DB),
                'COND_VALUE' => fi('COND_VALUE', 'Amount', TDC, 29,9, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency', TS, 5, DB),
                'COND_UNIT' => fi('COND_UNIT', 'Unit of measure', TS, 3, DB),
                'COND_P_UNT' => fi('COND_P_UNT', 'Pricing unit', TDC, 5,0, DB),
                'CURR_ISO' => fi('CURR_ISO', 'ISO code crcy', TS, 3, DB),
                'CD_UNT_ISO' => fi('CD_UNT_ISO', 'ISO cond. UoM', TS, 3, DB),
                'REFOBJTYPE' => fi('REFOBJTYPE', 'Object Type', TS, 10, DB),
                'REFOBJKEY' => fi('REFOBJKEY', 'Key', TS, 70, DB),
                'REFLOGSYS' => fi('REFLOGSYS', 'Logical System', TS, 10, DB),
                'APPLICATIO' => fi('APPLICATIO', 'Application', TS, 2, DB),
                'CONPRICDAT' => fi('CONPRICDAT', 'CondPricingDate', TD, 8, DB),
                'CALCTYPCON' => fi('CALCTYPCON', 'Calculat.type', TS, 1, DB),
                'CONBASEVAL' => fi('CONBASEVAL', 'Cond.base value', TDC, 29,9, DB),
                'CONEXCHRAT' => fi('CONEXCHRAT', 'Cond.exch.rate', TDC, 9,5, DB),
                'NUMCONVERT' => fi('NUMCONVERT', 'Numer.for conv.', TDC, 5,0, DB),
                'DENOMINATO' => fi('DENOMINATO', 'Den. for conv.', TDC, 5,0, DB),
                'CONDTYPE' => fi('CONDTYPE', 'Condit.category', TS, 1, DB),
                'STAT_CON' => fi('STAT_CON', 'Statistical', TS, 1, DB),
                'SCALETYPE' => fi('SCALETYPE', 'Scale type', TS, 1, DB),
                'ACCRUALS' => fi('ACCRUALS', 'Accruals', TS, 1, DB),
                'CONINVOLST' => fi('CONINVOLST', 'Inv.list cond.', TS, 1, DB),
                'CONDORIGIN' => fi('CONDORIGIN', 'Condit.origin', TS, 1, DB),
                'GROUPCOND' => fi('GROUPCOND', 'Group condition', TS, 1, DB),
                'COND_UPDAT' => fi('COND_UPDAT', 'Condit.update', TS, 1, DB),
                'ACCESS_SEQ' => fi('ACCESS_SEQ', 'Access', TS, 2, DB),
                'CONDCOUNT' => fi('CONDCOUNT', 'SequNo of cond.', TS, 2, DB),
                'ROUNDOFFDI' => fi('ROUNDOFFDI', 'Currency amount', TDC, 29,9, DB),
                'CONDVALUE' => fi('CONDVALUE', 'Condition value', TDC, 29,9, DB),
                'CURRENCY_2' => fi('CURRENCY_2', 'Doc. Currency', TS, 5, DB),
                'CURR_ISO_2' => fi('CURR_ISO_2', 'ISO code crcy', TS, 3, DB),
                'CONDCNTRL' => fi('CONDCNTRL', 'Cond.control', TS, 1, DB),
                'CONDISACTI' => fi('CONDISACTI', 'Inactive', TS, 1, DB),
                'CONDCLASS' => fi('CONDCLASS', 'Condition class', TS, 1, DB),
                'FACTBASVAL' => fi('FACTBASVAL', 'CondFactor', TDBL, 16,8, DB),
                'SCALEBASIN' => fi('SCALEBASIN', 'Scale basis', TS, 1, DB),
                'SCALBASVAL' => fi('SCALBASVAL', 'Scale base val.', TDC, 29,9, DB),
                'UNITMEASUR' => fi('UNITMEASUR', 'Scale UoM', TS, 3, DB),
                'ISO_UNIT' => fi('ISO_UNIT', 'ISO code', TS, 3, DB),
                'CURRENCKEY' => fi('CURRENCKEY', 'Scale currency', TS, 5, DB),
                'CURRENISO' => fi('CURRENISO', 'ISO code crcy', TS, 3, DB),
                'CONDINCOMP' => fi('CONDINCOMP', 'Int-comBillCond', TS, 1, DB),
                'CONDCONFIG' => fi('CONDCONFIG', 'Variant cond.', TS, 1, DB),
                'CONDCHAMAN' => fi('CONDCHAMAN', 'Changed manual.', TS, 1, DB),
                'COND_NO' => fi('COND_NO', 'Cond.record no.', TS, 10, DB),
                'TAX_CODE' => fi('TAX_CODE', 'Tax Code', TS, 2, DB),
                'VARCOND' => fi('VARCOND', 'Variant', TS, 26, DB),
                'ACCOUNTKEY' => fi('ACCOUNTKEY', 'Account key', TS, 3, DB),
                'ACCOUNT_KE' => fi('ACCOUNT_KE', 'Accruals', TS, 3, DB),
                'WT_WITHCD' => fi('WT_WITHCD', 'W/tax code', TS, 2, DB),
                'STRUCTCOND' => fi('STRUCTCOND', 'StrucCond.', TS, 1, DB),
                'FACTCONBAS' => fi('FACTCONBAS', 'CondFactor', TDBL, 16,8, DB),
                'CONDCOINHD' => fi('CONDCOINHD', 'HdCond.counter', TS, 2, DB)
            }
        ),
        'ORDER_INCOMPLETE' => new overcast.TypeInfo('ORDER_INCOMPLETE', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'DOC_NUMBER' => fi('DOC_NUMBER', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'SCHED_LINE' => fi('SCHED_LINE', 'Schedule Line', TS, 4, DB),
                'PARTN_ROLE' => fi('PARTN_ROLE', 'Partner Functn', TS, 2, DB),
                'TABLE_NAME' => fi('TABLE_NAME', 'Tables', TS, 30, DB),
                'FIELD_NAME' => fi('FIELD_NAME', 'Field name', TS, 30, DB),
                'FIELD_TEXT' => fi('FIELD_TEXT', 'Long Fld Label', TS, 40, DB)
            }
        ),
        'MESSAGETABLE' => new overcast.TypeInfo('MESSAGETABLE', 'Warning table (XVBFS)', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'TYPE_x' => fi('TYPE_x', 'Message type', TS, 1, DB),
                'ID' => fi('ID', 'Message Class', TS, 20, DB),
                'NUMBER_x' => fi('NUMBER_x', 'Message number', TS, 3, DB),
                'MESSAGE' => fi('MESSAGE', 'Message text', TS, 220, DB),
                'LOG_NO' => fi('LOG_NO', 'Log Number', TS, 20, DB),
                'LOG_MSG_NO' => fi('LOG_MSG_NO', 'Message Number', TS, 6, DB),
                'MESSAGE_V1' => fi('MESSAGE_V1', 'Message Variable', TS, 50, DB),
                'MESSAGE_V2' => fi('MESSAGE_V2', 'Message Variable', TS, 50, DB),
                'MESSAGE_V3' => fi('MESSAGE_V3', 'Message Variable', TS, 50, DB),
                'MESSAGE_V4' => fi('MESSAGE_V4', 'Message Variable', TS, 50, DB),
                'PARAMETER' => fi('PARAMETER', 'Parameter Name', TS, 32, DB),
                'ROW' => fi('ROW', 'Parameter line', TI, 10, DB),
                'FIELD' => fi('FIELD', 'Field name', TS, 30, DB),
                'SYSTEM_x' => fi('SYSTEM_x', 'Logical system', TS, 10, DB)
            }
        ),
        'EXTENSIONIN' => new overcast.TypeInfo('EXTENSIONIN', 'Customer enhancment import', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'STRUCTURE' => fi('STRUCTURE', 'Table ext.struct.', TS, 30, DB),
                'VALUEPART1' => fi('VALUEPART1', 'Data', TS, 240, DB),
                'VALUEPART2' => fi('VALUEPART2', 'Data', TS, 240, DB),
                'VALUEPART3' => fi('VALUEPART3', 'Data', TS, 240, DB),
                'VALUEPART4' => fi('VALUEPART4', 'Data', TS, 240, DB)
            }
        ),
        'PARTNERADDRESSES' => new overcast.TypeInfo('PARTNERADDRESSES', 'BAPI Reference Structure for Addresses (Org./Company)', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'ADDR_NO' => fi('ADDR_NO', 'Address Number', TS, 10, DB),
                'FORMOFADDR' => fi('FORMOFADDR', 'Form of address', TS, 20, DB),
                'NAME' => fi('NAME', 'Name', TS, 40, DB),
                'NAME_2' => fi('NAME_2', 'Name 2', TS, 40, DB),
                'NAME_3' => fi('NAME_3', 'Name 3', TS, 40, DB),
                'NAME_4' => fi('NAME_4', 'Name 4', TS, 40, DB),
                'C_O_NAME' => fi('C_O_NAME', 'c/o', TS, 40, DB),
                'CITY' => fi('CITY', 'City', TS, 40, DB),
                'DISTRICT' => fi('DISTRICT', 'District', TS, 40, DB),
                'CITY_NO' => fi('CITY_NO', 'City Code', TS, 12, DB),
                'POSTL_COD1' => fi('POSTL_COD1', 'Postal Code', TS, 10, DB),
                'POSTL_COD2' => fi('POSTL_COD2', 'PO Box Post Cde', TS, 10, DB),
                'POSTL_COD3' => fi('POSTL_COD3', 'Company Post Cd', TS, 10, DB),
                'PO_BOX' => fi('PO_BOX', 'PO Box', TS, 10, DB),
                'PO_BOX_CIT' => fi('PO_BOX_CIT', 'PO Box City', TS, 40, DB),
                'DELIV_DIS' => fi('DELIV_DIS', 'Delivery Dist.', TS, 15, DB),
                'STREET' => fi('STREET', 'Street', TS, 40, DB),
                'STREET_NO' => fi('STREET_NO', 'Street Code', TS, 12, DB),
                'STR_ABBR' => fi('STR_ABBR', 'Street Abbrev.', TS, 2, DB),
                'HOUSE_NO' => fi('HOUSE_NO', 'House Number', TS, 10, DB),
                'STR_SUPPL1' => fi('STR_SUPPL1', 'Street 2', TS, 40, DB),
                'STR_SUPPL2' => fi('STR_SUPPL2', 'Street 3', TS, 40, DB),
                'LOCATION' => fi('LOCATION', 'Street 5', TS, 40, DB),
                'BUILDING' => fi('BUILDING', 'Building code', TS, 10, DB),
                'FLOOR' => fi('FLOOR', 'Floor', TS, 10, DB),
                'ROOM_NO' => fi('ROOM_NO', 'Room Number', TS, 10, DB),
                'COUNTRY' => fi('COUNTRY', 'Country', TS, 3, DB),
                'LANGU' => fi('LANGU', 'Language', TS, 1, DB),
                'REGION' => fi('REGION', 'Region', TS, 3, DB),
                'SORT1' => fi('SORT1', 'Search Term 1', TS, 20, DB),
                'SORT2' => fi('SORT2', 'Search Term 2', TS, 20, DB),
                'TIME_ZONE' => fi('TIME_ZONE', 'Time Zone', TS, 6, DB),
                'TAXJURCODE' => fi('TAXJURCODE', 'Tax Jurisdiction', TS, 15, DB),
                'ADR_NOTES' => fi('ADR_NOTES', 'Notes', TS, 50, DB),
                'COMM_TYPE' => fi('COMM_TYPE', 'Comm. Method', TS, 3, DB),
                'TEL1_NUMBR' => fi('TEL1_NUMBR', 'Telephone', TS, 30, DB),
                'TEL1_EXT' => fi('TEL1_EXT', 'Extension', TS, 10, DB),
                'FAX_NUMBER' => fi('FAX_NUMBER', 'Fax', TS, 30, DB),
                'FAX_EXTENS' => fi('FAX_EXTENS', 'Extension', TS, 10, DB),
                'STREET_LNG' => fi('STREET_LNG', 'Street', TS, 60, DB),
                'DISTRCT_NO' => fi('DISTRCT_NO', 'District', TS, 8, DB),
                'CHCKSTATUS' => fi('CHCKSTATUS', 'Check Status', TS, 1, DB),
                'PBOXCIT_NO' => fi('PBOXCIT_NO', 'City Code', TS, 12, DB),
                'TRANSPZONE' => fi('TRANSPZONE', 'Transport Zone', TS, 10, DB),
                'HOUSE_NO2' => fi('HOUSE_NO2', 'Supplement', TS, 10, DB),
                'E_MAIL' => fi('E_MAIL', 'E-Mail Address', TS, 241, DB),
                'STR_SUPPL3' => fi('STR_SUPPL3', 'Street 4', TS, 40, DB),
                'TITLE' => fi('TITLE', 'Title', TS, 30, DB),
                'COUNTRYISO' => fi('COUNTRYISO', 'ISO Code', TS, 2, DB),
                'LANGU_ISO' => fi('LANGU_ISO', 'Lang. (ISO)', TS, 2, DB),
                'BUILD_LONG' => fi('BUILD_LONG', 'Building Code', TS, 20, DB),
                'REGIOGROUP' => fi('REGIOGROUP', 'Structure Group', TS, 8, DB),
                'HOME_CITY' => fi('HOME_CITY', 'Different City', TS, 40, DB),
                'HOMECITYNO' => fi('HOMECITYNO', 'City Code', TS, 12, DB),
                'PCODE1_EXT' => fi('PCODE1_EXT', 'Postal Code Ext', TS, 10, DB),
                'PCODE2_EXT' => fi('PCODE2_EXT', 'Postal Code Ext', TS, 10, DB),
                'PCODE3_EXT' => fi('PCODE3_EXT', 'Postal Code Ext', TS, 10, DB),
                'PO_W_O_NO' => fi('PO_W_O_NO', 'PO Box w/o No.', TS, 1, DB),
                'PO_BOX_REG' => fi('PO_BOX_REG', 'PO Region', TS, 3, DB),
                'POBOX_CTRY' => fi('POBOX_CTRY', 'PO box country', TS, 3, DB),
                'PO_CTRYISO' => fi('PO_CTRYISO', 'ISO Code', TS, 2, DB),
                'HOMEPAGE' => fi('HOMEPAGE', 'URI', TS, 132, DB),
                'DONT_USE_S' => fi('DONT_USE_S', 'Undeliverable', TS, 4, DB),
                'DONT_USE_P' => fi('DONT_USE_P', 'Undeliverable', TS, 4, DB),
                'HOUSE_NO3' => fi('HOUSE_NO3', 'Number Range', TS, 10, DB),
                'LANGU_CR' => fi('LANGU_CR', 'Creation lang.', TS, 1, DB),
                'LANGUCRISO' => fi('LANGUCRISO', 'Lang. (ISO)', TS, 2, DB),
                'PO_BOX_LOBBY' => fi('PO_BOX_LOBBY', 'PO Box Lobby', TS, 40, DB),
                'DELI_SERV_TYPE' => fi('DELI_SERV_TYPE', 'Delvry Serv Type', TS, 4, DB),
                'DELI_SERV_NUMBER' => fi('DELI_SERV_NUMBER', 'Delivery Service No.', TS, 10, DB),
                'URI_TYPE' => fi('URI_TYPE', 'URI type', TS, 3, DB),
                'COUNTY_CODE' => fi('COUNTY_CODE', 'County code', TS, 8, DB),
                'COUNTY' => fi('COUNTY', 'County', TS, 40, DB),
                'TOWNSHIP_CODE' => fi('TOWNSHIP_CODE', 'Township code', TS, 8, DB),
                'TOWNSHIP' => fi('TOWNSHIP', 'Township', TS, 40, DB),
                'XPCPT' => fi('XPCPT', 'PurposeComplete Flag', TS, 1, DB),
                'ZZMOBPHONE' => fi('ZZMOBPHONE', 'Telephone No.', TS, 30, DB),
                'ZZMOBPHONECOUNTRY' => fi('ZZMOBPHONECOUNTRY', 'Country', TS, 3, DB),
                'ZZTELCOUNTRY' => fi('ZZTELCOUNTRY', 'Country', TS, 3, DB),
                'ZZFAXCOUNTRY' => fi('ZZFAXCOUNTRY', 'Country', TS, 3, DB)
            }
        )
    };
}