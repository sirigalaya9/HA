global class sapDeliveryMeta0 {
/* 
 * Generated by Overcast UTC 2024-03-12 09:38:03Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */

    static overcast.Realtime.StructureType SS = overcast.Realtime.StructureType.STRUCTURE;
    static overcast.Realtime.StructureType ST = overcast.Realtime.StructureType.TABLE;

    static overcast.Realtime.Direction DI = overcast.Realtime.Direction.INPUT;
    static overcast.Realtime.Direction DOx = overcast.Realtime.Direction.OUTPUT;
    static overcast.Realtime.Direction DB = overcast.Realtime.Direction.BOTH;
    
    static overcast.Realtime.ApexType TS = overcast.Realtime.ApexType.STRINGX;
    static overcast.Realtime.ApexType TI = overcast.Realtime.ApexType.INTEGERX;
    static overcast.Realtime.ApexType TL = overcast.Realtime.ApexType.LONGX;
    static overcast.Realtime.ApexType TB = overcast.Realtime.ApexType.BOOLEANX;
    static overcast.Realtime.ApexType TD = overcast.Realtime.ApexType.DATEX;
    static overcast.Realtime.ApexType TDT = overcast.Realtime.ApexType.DATETIMEX;
    static overcast.Realtime.ApexType TDC = overcast.Realtime.ApexType.DECIMALX;
    static overcast.Realtime.ApexType TDBL = overcast.Realtime.ApexType.DOUBLEX;
    static overcast.Realtime.ApexType TT = overcast.Realtime.ApexType.TIMEX;
    static overcast.Realtime.ApexType TBLB = overcast.Realtime.ApexType.BLOBX;

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, overcast.Realtime.Direction e) {
        return new overcast.FieldInfo(a, b, c, d, e);
    }

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, Integer e, overcast.Realtime.Direction f) {
        return new overcast.FieldInfo(a, b, c, d, e, f);
    }

    public static Map<String, overcast.TypeInfo> metadata = new Map<String, overcast.TypeInfo> {
        'BAPI_DELIVERY_GETLIST' => new overcast.TypeInfo('BAPI_DELIVERY_GETLIST', '', SS, DB,
            new Map<String, overcast.FieldInfo> {
            }
        ),
        'IS_DLV_DATA_CONTROL' => new overcast.TypeInfo('IS_DLV_DATA_CONTROL', 'Selection Criteria for Selecting Deliveries', SS, DI,
            new Map<String, overcast.FieldInfo> {
                'BYPASSING_BUFFER' => fi('BYPASSING_BUFFER', 'Bypass buffer', TS, 1, DI),
                'HEAD_STATUS' => fi('HEAD_STATUS', 'Checkbox', TS, 1, DI),
                'HEAD_PARTNER' => fi('HEAD_PARTNER', 'Checkbox', TS, 1, DI),
                'ITEM' => fi('ITEM', 'Checkbox', TS, 1, DI),
                'ITEM_STATUS' => fi('ITEM_STATUS', 'Checkbox', TS, 1, DI),
                'DOC_FLOW' => fi('DOC_FLOW', 'Checkbox', TS, 1, DI),
                'FT_DATA' => fi('FT_DATA', 'Checkbox', TS, 1, DI),
                'HU_DATA' => fi('HU_DATA', 'Checkbox', TS, 1, DI),
                'SERNO' => fi('SERNO', 'Checkbox', TS, 1, DI)
            }
        ),
        'IT_ABLAD' => new overcast.TypeInfo('IT_ABLAD', 'BAPI Selection Structure: Unloading Point', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'UNLOAD_PT_LOW' => fi('UNLOAD_PT_LOW', 'Unloading Point', TS, 25, DB),
                'UNLOAD_PT_HIGH' => fi('UNLOAD_PT_HIGH', 'Unloading Point', TS, 25, DB)
            }
        ),
        'IT_ABTNR' => new overcast.TypeInfo('IT_ABTNR', 'BAPI Selection Structure: Department Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DEPARTMENT_NO_LOW' => fi('DEPARTMENT_NO_LOW', 'Department', TS, 4, DB),
                'DEPARTMENT_NO_HIGH' => fi('DEPARTMENT_NO_HIGH', 'Department', TS, 4, DB)
            }
        ),
        'IT_AUFNR' => new overcast.TypeInfo('IT_AUFNR', 'BAPI Selection Structure: Order Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'ORDERID_LOW' => fi('ORDERID_LOW', 'Order', TS, 12, DB),
                'ORDERID_HIGH' => fi('ORDERID_HIGH', 'Order', TS, 12, DB)
            }
        ),
        'IT_AULWE' => new overcast.TypeInfo('IT_AULWE', 'BAPI Selection Structure: Route Schedule', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'ROUTESCHED_LOW' => fi('ROUTESCHED_LOW', 'Route Schedule', TS, 10, DB),
                'ROUTESCHED_HIGH' => fi('ROUTESCHED_HIGH', 'Route Schedule', TS, 10, DB)
            }
        ),
        'IT_BESTK' => new overcast.TypeInfo('IT_BESTK', 'BAPI Selection Structure: \'Confirmed\' Status', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DELIV_CHECKED_LOW' => fi('DELIV_CHECKED_LOW', 'Confirmed', TS, 1, DB),
                'DELIV_CHECKED_HIGH' => fi('DELIV_CHECKED_HIGH', 'Confirmed', TS, 1, DB)
            }
        ),
        'IT_BLDAT' => new overcast.TypeInfo('IT_BLDAT', 'BAPI Selection Structure: Document Date in Document', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DOC_DATE_LOW' => fi('DOC_DATE_LOW', 'Document Date', TD, 8, DB),
                'DOC_DATE_HIGH' => fi('DOC_DATE_HIGH', 'Document Date', TD, 8, DB)
            }
        ),
        'IT_CHARG' => new overcast.TypeInfo('IT_CHARG', 'BAPI Selection Structure: Batch Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'BATCH_LOW' => fi('BATCH_LOW', 'Batch', TS, 10, DB),
                'BATCH_HIGH' => fi('BATCH_HIGH', 'Batch', TS, 10, DB)
            }
        ),
        'IT_CMFRE' => new overcast.TypeInfo('IT_CMFRE', 'BAPI Selection Structure: Release Date for Document Credit Management', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'REL_DATE_CREDIT_MAN_LOW' => fi('REL_DATE_CREDIT_MAN_LOW', 'Release date', TD, 8, DB),
                'REL_DATE_CREDIT_MAN_HIGH' => fi('REL_DATE_CREDIT_MAN_HIGH', 'Release date', TD, 8, DB)
            }
        ),
        'IT_CMGST' => new overcast.TypeInfo('IT_CMGST', 'BAPI Selection Structure: Overall Status of Credit Checks', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'STATUS_CREDIT_MAN_LOW' => fi('STATUS_CREDIT_MAN_LOW', 'OverallCredStat', TS, 1, DB),
                'STATUS_CREDIT_MAN_HIGH' => fi('STATUS_CREDIT_MAN_HIGH', 'OverallCredStat', TS, 1, DB)
            }
        ),
        'IT_CMNGV' => new overcast.TypeInfo('IT_CMNGV', 'BAPI Selection Structure: Next Date', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'NEXT_DATE_CREDIT_MAN_LOW' => fi('NEXT_DATE_CREDIT_MAN_LOW', 'Next date', TD, 8, DB),
                'NEXT_DATE_CREDIT_MAN_HIGH' => fi('NEXT_DATE_CREDIT_MAN_HIGH', 'Next date', TD, 8, DB)
            }
        ),
        'IT_CTLPC' => new overcast.TypeInfo('IT_CTLPC', 'BAPI Selection Structure: Credit Management: Risk Class', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'RISK_CATEG_LOW' => fi('RISK_CATEG_LOW', 'Risk category', TS, 3, DB),
                'RISK_CATEG_HIGH' => fi('RISK_CATEG_HIGH', 'Risk category', TS, 3, DB)
            }
        ),
        'IT_EAN11' => new overcast.TypeInfo('IT_EAN11', 'BAPI Selection Structure: European Article Number (EAN)', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'EAN_UPC_LOW' => fi('EAN_UPC_LOW', 'EAN/UPC', TS, 18, DB),
                'EAN_UPC_HIGH' => fi('EAN_UPC_HIGH', 'EAN/UPC', TS, 18, DB)
            }
        ),
        'IT_ERDAT' => new overcast.TypeInfo('IT_ERDAT', 'BAPI Selection Structure: Creation Date Record', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'CR_ON_LOW' => fi('CR_ON_LOW', 'Created On', TD, 8, DB),
                'CR_ON_HIGH' => fi('CR_ON_HIGH', 'Created On', TD, 8, DB)
            }
        ),
        'IT_ERNAM' => new overcast.TypeInfo('IT_ERNAM', 'BAPI Selection Structure: Creation Clerk', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'CREATED_BY_LOW' => fi('CREATED_BY_LOW', 'Created By', TS, 12, DB),
                'CREATED_BY_HIGH' => fi('CREATED_BY_HIGH', 'Created By', TS, 12, DB)
            }
        ),
        'IT_FKSTK' => new overcast.TypeInfo('IT_FKSTK', 'BAPI Selection Structure: Billing Document Status', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'BILLSTATUS_LOW' => fi('BILLSTATUS_LOW', 'Billing status', TS, 1, DB),
                'BILLSTATUS_HIGH' => fi('BILLSTATUS_HIGH', 'Billing status', TS, 1, DB)
            }
        ),
        'IT_GBSTK' => new overcast.TypeInfo('IT_GBSTK', 'BAPI Selection Structure: Overall Processing Status of SD Document', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'PRC_STAT_H_LOW' => fi('PRC_STAT_H_LOW', 'Overall status', TS, 1, DB),
                'PRC_STAT_H_HIGH' => fi('PRC_STAT_H_HIGH', 'Overall status', TS, 1, DB)
            }
        ),
        'IT_GRUPP' => new overcast.TypeInfo('IT_GRUPP', 'BAPI Selection Structure: Customer Credit Group', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'CRED_GROUP_LOW' => fi('CRED_GROUP_LOW', 'Cust.cred.grp', TS, 4, DB),
                'CRED_GROUP_HIGH' => fi('CRED_GROUP_HIGH', 'Cust.cred.grp', TS, 4, DB)
            }
        ),
        'IT_KDMAT' => new overcast.TypeInfo('IT_KDMAT', 'BAPI Selection Structure: Customer\'s Material', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'CUST_MAT_LOW' => fi('CUST_MAT_LOW', 'Cust.material', TS, 35, DB),
                'CUST_MAT_HIGH' => fi('CUST_MAT_HIGH', 'Cust.material', TS, 35, DB)
            }
        ),
        'IT_KKBER' => new overcast.TypeInfo('IT_KKBER', 'BAPI Selection Structure: Credit Control Area', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'C_CTR_AREA_LOW' => fi('C_CTR_AREA_LOW', 'Cred.Contr.Area', TS, 4, DB),
                'C_CTR_AREA_HIGH' => fi('C_CTR_AREA_HIGH', 'Cred.Contr.Area', TS, 4, DB)
            }
        ),
        'IT_KNKLI' => new overcast.TypeInfo('IT_KNKLI', 'BAPI Selection Structure: Account Number Vendor with Credit Limit', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'CRED_ACCNT_LOW' => fi('CRED_ACCNT_LOW', 'Credit account', TS, 10, DB),
                'CRED_ACCNT_HIGH' => fi('CRED_ACCNT_HIGH', 'Credit account', TS, 10, DB)
            }
        ),
        'IT_KODAT' => new overcast.TypeInfo('IT_KODAT', 'BAPI Selection Structure: Pick Date', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'PICKING_DATE_LOW' => fi('PICKING_DATE_LOW', 'Pick Date', TD, 8, DB),
                'PICKING_DATE_HIGH' => fi('PICKING_DATE_HIGH', 'Pick Date', TD, 8, DB)
            }
        ),
        'IT_KOQUK' => new overcast.TypeInfo('IT_KOQUK', 'BAPI Selection Structure: Confirmation Status of Picking', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'ACK_STATUS_PICKING_LOW' => fi('ACK_STATUS_PICKING_LOW', 'Confirmation', TS, 1, DB),
                'ACK_STATUS_PICKING_HIGH' => fi('ACK_STATUS_PICKING_HIGH', 'Confirmation', TS, 1, DB)
            }
        ),
        'IT_KOSTK' => new overcast.TypeInfo('IT_KOSTK', 'BAPI Selection Structure: Overall Status of Picking/Putaway', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'OVERALLPIC_LOW' => fi('OVERALLPIC_LOW', 'Ovr.pick.status', TS, 1, DB),
                'OVERALLPIC_HIGH' => fi('OVERALLPIC_HIGH', 'Ovr.pick.status', TS, 1, DB)
            }
        ),
        'IT_KUNN2' => new overcast.TypeInfo('IT_KUNN2', 'BAPI Selection Structure: Customer Number/Vendor Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'CUSTOMER_LOW' => fi('CUSTOMER_LOW', 'Customer', TS, 10, DB),
                'CUSTOMER_HIGH' => fi('CUSTOMER_HIGH', 'Customer', TS, 10, DB)
            }
        ),
        'IT_KUNNR' => new overcast.TypeInfo('IT_KUNNR', 'BAPI Selection Structure: Customer Number/Vendor Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'CUSTOMER_VENDOR_LOW' => fi('CUSTOMER_VENDOR_LOW', 'Customer', TS, 10, DB),
                'CUSTOMER_VENDOR_HIGH' => fi('CUSTOMER_VENDOR_HIGH', 'Customer', TS, 10, DB)
            }
        ),
        'IT_KUNWE' => new overcast.TypeInfo('IT_KUNWE', 'BAPI Selection Structure: External ID of Delivery Note', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'SHIP_TO_LOW' => fi('SHIP_TO_LOW', 'Ship-To Party', TS, 10, DB),
                'SHIP_TO_HIGH' => fi('SHIP_TO_HIGH', 'Ship-To Party', TS, 10, DB)
            }
        ),
        'IT_LDDAT' => new overcast.TypeInfo('IT_LDDAT', 'BAPI Selection Structure: Loading Date', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'LOAD_DATE_LOW' => fi('LOAD_DATE_LOW', 'Loading Date', TD, 8, DB),
                'LOAD_DATE_HIGH' => fi('LOAD_DATE_HIGH', 'Loading Date', TD, 8, DB)
            }
        ),
        'IT_LFART' => new overcast.TypeInfo('IT_LFART', 'BAPI Selection Structure: Delivery Type', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DLV_TYPE_LOW' => fi('DLV_TYPE_LOW', 'Delivery Type', TS, 4, DB),
                'DLV_TYPE_HIGH' => fi('DLV_TYPE_HIGH', 'Delivery Type', TS, 4, DB)
            }
        ),
        'IT_LFDAT' => new overcast.TypeInfo('IT_LFDAT', 'BAPI Selection Structure: Delivery Date', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DELIV_DATE_LOW' => fi('DELIV_DATE_LOW', 'Delivery date', TD, 8, DB),
                'DELIV_DATE_HIGH' => fi('DELIV_DATE_HIGH', 'Delivery date', TD, 8, DB)
            }
        ),
        'IT_LGNUM' => new overcast.TypeInfo('IT_LGNUM', 'BAPI Selection Structure: Warehouse Number/Warehouse Complex', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'WHSENUMBER_LOW' => fi('WHSENUMBER_LOW', 'Warehouse No.', TS, 3, DB),
                'WHSENUMBER_HIGH' => fi('WHSENUMBER_HIGH', 'Warehouse No.', TS, 3, DB)
            }
        ),
        'IT_LGORT' => new overcast.TypeInfo('IT_LGORT', 'BAPI Selection Structure: Storage Location', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'STGE_LOC_LOW' => fi('STGE_LOC_LOW', 'Storage Loc.', TS, 4, DB),
                'STGE_LOC_HIGH' => fi('STGE_LOC_HIGH', 'Storage Loc.', TS, 4, DB)
            }
        ),
        'IT_LGTOR' => new overcast.TypeInfo('IT_LGTOR', 'BAPI Selection Structure: Door for Warehouse Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DOOR_LOW' => fi('DOOR_LOW', 'Door for Whse', TS, 3, DB),
                'DOOR_HIGH' => fi('DOOR_HIGH', 'Door for Whse', TS, 3, DB)
            }
        ),
        'IT_LIFEX' => new overcast.TypeInfo('IT_LIFEX', 'BAPI Selection Structure: External ID of Delivery Note', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'EXTDELV_NO_LOW' => fi('EXTDELV_NO_LOW', 'Ext. Delivery', TS, 35, DB),
                'EXTDELV_NO_HIGH' => fi('EXTDELV_NO_HIGH', 'Ext. Delivery', TS, 35, DB)
            }
        ),
        'IT_LIFSK' => new overcast.TypeInfo('IT_LIFSK', 'BAPI Selection Structure: Delivery Document Block Doc.Header', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DLV_BLOCK_LOW' => fi('DLV_BLOCK_LOW', 'Delivery block', TS, 2, DB),
                'DLV_BLOCK_HIGH' => fi('DLV_BLOCK_HIGH', 'Delivery block', TS, 2, DB)
            }
        ),
        'IT_LPRIO' => new overcast.TypeInfo('IT_LPRIO', 'BAPI Selection Structure: Delivery Priority', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DLV_PRIO_LOW' => fi('DLV_PRIO_LOW', 'Delivery Prior.', TS, 2, DB),
                'DLV_PRIO_HIGH' => fi('DLV_PRIO_HIGH', 'Delivery Prior.', TS, 2, DB)
            }
        ),
        'IT_LSTEL' => new overcast.TypeInfo('IT_LSTEL', 'BAPI Selection Structure: Loading Point', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'LOADING_PT_LOW' => fi('LOADING_PT_LOW', 'Loading Point', TS, 2, DB),
                'LOADING_PT_HIGH' => fi('LOADING_PT_HIGH', 'Loading Point', TS, 2, DB)
            }
        ),
        'IT_LVSTK' => new overcast.TypeInfo('IT_LVSTK', 'BAPI Selection Structure: Overall Status of WM Activities', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'STATUS_WAREHOUSE_MAN_LOW' => fi('STATUS_WAREHOUSE_MAN_LOW', 'OverallWMStatus', TS, 1, DB),
                'STATUS_WAREHOUSE_MAN_HIGH' => fi('STATUS_WAREHOUSE_MAN_HIGH', 'OverallWMStatus', TS, 1, DB)
            }
        ),
        'IT_MATKL' => new overcast.TypeInfo('IT_MATKL', 'BAPI Selection Structure: Material Group', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'MATL_GROUP_LOW' => fi('MATL_GROUP_LOW', 'Material Group', TS, 9, DB),
                'MATL_GROUP_HIGH' => fi('MATL_GROUP_HIGH', 'Material Group', TS, 9, DB)
            }
        ),
        'IT_MATNR' => new overcast.TypeInfo('IT_MATNR', 'BAPI Selection Structure: Material Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'MATERIAL_LOW' => fi('MATERIAL_LOW', 'Material', TS, 18, DB),
                'MATERIAL_HIGH' => fi('MATERIAL_HIGH', 'Material', TS, 18, DB),
                'HIGH_EXTERNAL' => fi('HIGH_EXTERNAL', 'Material Number', TS, 40, DB),
                'HIGH_GUID' => fi('HIGH_GUID', 'GUID (External)', TS, 32, DB),
                'HIGH_VERSION' => fi('HIGH_VERSION', 'Version Number', TS, 10, DB),
                'LOW_EXTERNAL' => fi('LOW_EXTERNAL', 'Material Number', TS, 40, DB),
                'LOW_GUID' => fi('LOW_GUID', 'GUID (External)', TS, 32, DB),
                'LOW_VERSION' => fi('LOW_VERSION', 'Version Number', TS, 10, DB),
                'MATERIAL_LOW_LONG' => fi('MATERIAL_LOW_LONG', 'Material', TS, 40, DB),
                'MATERIAL_HIGH_LONG' => fi('MATERIAL_HIGH_LONG', 'Material', TS, 40, DB)
            }
        ),
        'IT_PARNR' => new overcast.TypeInfo('IT_PARNR', 'BAPI Selection Structure: Contact Person Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'CONTACT_LOW' => fi('CONTACT_LOW', 'Contact Person', TS, 10, DB),
                'CONTACT_HIGH' => fi('CONTACT_HIGH', 'Contact Person', TS, 10, DB)
            }
        ),
        'IT_PARVW' => new overcast.TypeInfo('IT_PARVW', 'BAPI Selection Structure: Partner Function', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'PARTN_ROLE_LOW' => fi('PARTN_ROLE_LOW', 'Partner Functn', TS, 2, DB),
                'PARTN_ROLE_HIGH' => fi('PARTN_ROLE_HIGH', 'Partner Functn', TS, 2, DB)
            }
        ),
        'IT_PERNR' => new overcast.TypeInfo('IT_PERNR', 'BAPI Selection Structure: Personnel Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'PERSON_NO_LOW' => fi('PERSON_NO_LOW', 'Personnel No.', TS, 8, DB),
                'PERSON_NO_HIGH' => fi('PERSON_NO_HIGH', 'Personnel No.', TS, 8, DB)
            }
        ),
        'IT_PKSTK' => new overcast.TypeInfo('IT_PKSTK', 'BAPI Selection Structure: Overall Packing Status of All Items', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'OVRALL_STATUS_PACKING_LOW' => fi('OVRALL_STATUS_PACKING_LOW', 'Packing status', TS, 1, DB),
                'OVRALL_STATUS_PACKING_HIGH' => fi('OVRALL_STATUS_PACKING_HIGH', 'Packing status', TS, 1, DB)
            }
        ),
        'IT_PRVBE' => new overcast.TypeInfo('IT_PRVBE', 'BAPI Selection Structure: Production Supply Area', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'SUPPLYAREA_LOW' => fi('SUPPLYAREA_LOW', 'Supply Area', TS, 10, DB),
                'SUPPLYAREA_HIGH' => fi('SUPPLYAREA_HIGH', 'Supply Area', TS, 10, DB)
            }
        ),
        'IT_ROUTE' => new overcast.TypeInfo('IT_ROUTE', 'BAPI Selection Structure: Route', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'ROUTE_LOW' => fi('ROUTE_LOW', 'Route', TS, 6, DB),
                'ROUTE_HIGH' => fi('ROUTE_HIGH', 'Route', TS, 6, DB)
            }
        ),
        'IT_SAMMG' => new overcast.TypeInfo('IT_SAMMG', 'BAPI Selection Structure: Group', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'GROUP_NO_COLL_PROC_LOW' => fi('GROUP_NO_COLL_PROC_LOW', 'Group', TS, 10, DB),
                'GROUP_NO_COLL_PROC_HIGH' => fi('GROUP_NO_COLL_PROC_HIGH', 'Group', TS, 10, DB)
            }
        ),
        'IT_SBGRP' => new overcast.TypeInfo('IT_SBGRP', 'BAPI Selection Structure: Processor Group for Credit Management', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'REPR_GROUP_LOW' => fi('REPR_GROUP_LOW', 'Cred.rep.grp', TS, 3, DB),
                'REPR_GROUP_HIGH' => fi('REPR_GROUP_HIGH', 'Cred.rep.grp', TS, 3, DB)
            }
        ),
        'IT_SPART' => new overcast.TypeInfo('IT_SPART', 'BAPI Selection Structure: Division', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DIVISION_LOW' => fi('DIVISION_LOW', 'Division', TS, 2, DB),
                'DIVISION_HIGH' => fi('DIVISION_HIGH', 'Division', TS, 2, DB)
            }
        ),
        'IT_SPDNR' => new overcast.TypeInfo('IT_SPDNR', 'BAPI Selection Structure: Forwarding Agent', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'FWDAGENT_LOW' => fi('FWDAGENT_LOW', 'FwdAgent', TS, 10, DB),
                'FWDAGENT_HIGH' => fi('FWDAGENT_HIGH', 'FwdAgent', TS, 10, DB)
            }
        ),
        'IT_TDDAT' => new overcast.TypeInfo('IT_TDDAT', 'BAPI Selection Structure: Transportation Planning Date', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'TP_DATE_LOW' => fi('TP_DATE_LOW', 'TranspPlngDate', TD, 8, DB),
                'TP_DATE_HIGH' => fi('TP_DATE_HIGH', 'TranspPlngDate', TD, 8, DB)
            }
        ),
        'IT_TKNUM' => new overcast.TypeInfo('IT_TKNUM', 'BAPI Selection Structure: Shipment Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'SHIPMENTNUM_LOW' => fi('SHIPMENTNUM_LOW', 'Shipment Number', TS, 10, DB),
                'SHIPMENTNUM_HIGH' => fi('SHIPMENTNUM_HIGH', 'Shipment Number', TS, 10, DB)
            }
        ),
        'IT_TRAID' => new overcast.TypeInfo('IT_TRAID', 'BAPI Selection Structure: Shipment Identification', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'TRANSP_ID_LOW' => fi('TRANSP_ID_LOW', 'Mns of Trans.ID', TS, 20, DB),
                'TRANSP_ID_HIGH' => fi('TRANSP_ID_HIGH', 'Mns of Trans.ID', TS, 20, DB)
            }
        ),
        'IT_TRSTA' => new overcast.TypeInfo('IT_TRSTA', 'BAPI Selection Structure: Status of Transportation Planning', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'STATUS_TRANSP_DISPO_LOW' => fi('STATUS_TRANSP_DISPO_LOW', 'Trns.plan.stat.', TS, 1, DB),
                'STATUS_TRANSP_DISPO_HIGH' => fi('STATUS_TRANSP_DISPO_HIGH', 'Trns.plan.stat.', TS, 1, DB)
            }
        ),
        'IT_VBELN' => new overcast.TypeInfo('IT_VBELN', 'BAPI Selection Structure: Document Number Delivery', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DELIV_NUMB_LOW' => fi('DELIV_NUMB_LOW', 'Delivery', TS, 10, DB),
                'DELIV_NUMB_HIGH' => fi('DELIV_NUMB_HIGH', 'Delivery', TS, 10, DB)
            }
        ),
        'IT_VBTYP' => new overcast.TypeInfo('IT_VBTYP', 'BAPI Selection Structure: SD Document Category', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'SD_DOC_CAT_LOW' => fi('SD_DOC_CAT_LOW', 'Document cat.', TS, 1, DB),
                'SD_DOC_CAT_HIGH' => fi('SD_DOC_CAT_HIGH', 'Document cat.', TS, 1, DB)
            }
        ),
        'IT_VGBEL' => new overcast.TypeInfo('IT_VGBEL', 'BAPI Selection Structure: Document Number of Preceding Document', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'REF_DOC_LOW' => fi('REF_DOC_LOW', 'Reference Doc.', TS, 10, DB),
                'REF_DOC_HIGH' => fi('REF_DOC_HIGH', 'Reference Doc.', TS, 10, DB)
            }
        ),
        'IT_VGSYS' => new overcast.TypeInfo('IT_VGSYS', 'BAPI Selection Structure: Logical System of Preceding Document', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'REF_DOC_LOGSYS_LOW' => fi('REF_DOC_LOGSYS_LOW', 'PrDocLogSys', TS, 10, DB),
                'REF_DOC_LOGSYS_HIGH' => fi('REF_DOC_LOGSYS_HIGH', 'PrDocLogSys', TS, 10, DB)
            }
        ),
        'IT_VKBUR' => new overcast.TypeInfo('IT_VKBUR', 'BAPI Selection Structure: Sales Office', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'SALES_OFF_LOW' => fi('SALES_OFF_LOW', 'Sales Office', TS, 4, DB),
                'SALES_OFF_HIGH' => fi('SALES_OFF_HIGH', 'Sales Office', TS, 4, DB)
            }
        ),
        'IT_VKGRP' => new overcast.TypeInfo('IT_VKGRP', 'BAPI Selection Structure: Sales Group', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'SALES_GRP_LOW' => fi('SALES_GRP_LOW', 'Sales Group', TS, 3, DB),
                'SALES_GRP_HIGH' => fi('SALES_GRP_HIGH', 'Sales Group', TS, 3, DB)
            }
        ),
        'IT_VKORG' => new overcast.TypeInfo('IT_VKORG', 'BAPI Selection Structure: Sales Organization', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'SALESORG_LOW' => fi('SALESORG_LOW', 'Sales Org.', TS, 4, DB),
                'SALESORG_HIGH' => fi('SALESORG_HIGH', 'Sales Org.', TS, 4, DB)
            }
        ),
        'IT_VSBED' => new overcast.TypeInfo('IT_VSBED', 'BAPI Selection Structure: Shipping Condition', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'SHIP_COND_LOW' => fi('SHIP_COND_LOW', 'Shp.Cond.', TS, 2, DB),
                'SHIP_COND_HIGH' => fi('SHIP_COND_HIGH', 'Shp.Cond.', TS, 2, DB)
            }
        ),
        'IT_VSTEL' => new overcast.TypeInfo('IT_VSTEL', 'BAPI Selection Structure: Shipping Point/Goods Receiving Point', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'SHIP_POINT_LOW' => fi('SHIP_POINT_LOW', 'Shipping Point', TS, 4, DB),
                'SHIP_POINT_HIGH' => fi('SHIP_POINT_HIGH', 'Shipping Point', TS, 4, DB)
            }
        ),
        'IT_VTWEG' => new overcast.TypeInfo('IT_VTWEG', 'BAPI Selection Structure: Distribution Channel', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'DISTR_CHAN_LOW' => fi('DISTR_CHAN_LOW', 'Distr. Channel', TS, 2, DB),
                'DISTR_CHAN_HIGH' => fi('DISTR_CHAN_HIGH', 'Distr. Channel', TS, 2, DB)
            }
        ),
        'IT_WADAT' => new overcast.TypeInfo('IT_WADAT', 'BAPI Selection Structure: Goods Issue Date', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'GI_DATE_LOW' => fi('GI_DATE_LOW', 'Goods Issue', TD, 8, DB),
                'GI_DATE_HIGH' => fi('GI_DATE_HIGH', 'Goods Issue', TD, 8, DB)
            }
        ),
        'IT_WADAT_IST' => new overcast.TypeInfo('IT_WADAT_IST', 'BAPI Selection Structure: Goods Issue Date', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Dr./Cr. signs', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Option', TS, 2, DB),
                'LOW' => fi('LOW', 'Actual GI date', TD, 8, DB),
                'HIGH' => fi('HIGH', 'Actual GI date', TD, 8, DB)
            }
        ),
        'IT_WAKTI' => new overcast.TypeInfo('IT_WAKTI', 'BAPI Selection Structure: Action', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'PROMOTION_LOW' => fi('PROMOTION_LOW', 'Promotion', TS, 10, DB),
                'PROMOTION_HIGH' => fi('PROMOTION_HIGH', 'Promotion', TS, 10, DB)
            }
        ),
        'IT_WAUHR' => new overcast.TypeInfo('IT_WAUHR', 'BAPI Selection Structure: Goods Issue Time', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'GI_TIME_LOW' => fi('GI_TIME_LOW', 'GI Time', TS, 8, DB),
                'GI_TIME_HIGH' => fi('GI_TIME_HIGH', 'GI Time', TS, 8, DB)
            }
        ),
        'IT_WBSTK' => new overcast.TypeInfo('IT_WBSTK', 'BAPI Selection Structure: Overall Goods Movement Status', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'OVERALL_STATUS_GOODS_MOVEM_LOW' => fi('OVERALL_STATUS_GOODS_MOVEM_LOW', 'TotalGdsMvtStat', TS, 1, DB),
                'OVERALL_STATUS_GOODS_MOVE_HIGH' => fi('OVERALL_STATUS_GOODS_MOVE_HIGH', 'TotalGdsMvtStat', TS, 1, DB)
            }
        ),
        'IT_WERKS' => new overcast.TypeInfo('IT_WERKS', 'BAPI Selection Structure: Plant', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'PLANT_LOW' => fi('PLANT_LOW', 'Plant', TS, 4, DB),
                'PLANT_HIGH' => fi('PLANT_HIGH', 'Plant', TS, 4, DB)
            }
        ),
        'IT_XBLNR' => new overcast.TypeInfo('IT_XBLNR', 'BAPI Selection Structure: Reference Document Number', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SIGN' => fi('SIGN', 'Inclusive/exclusive', TS, 1, DB),
                'OPTION' => fi('OPTION', 'Selection op. OPTION', TS, 2, DB),
                'REF_DOC_NO_LOW' => fi('REF_DOC_NO_LOW', 'Reference', TS, 16, DB),
                'REF_DOC_NO_HIGH' => fi('REF_DOC_NO_HIGH', 'Reference', TS, 16, DB)
            }
        ),
        'ET_DELIVERY_HEADER' => new overcast.TypeInfo('ET_DELIVERY_HEADER', 'BAPI Structure Delivery Header Analog LIKP', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'VBELN' => fi('VBELN', 'Delivery', TS, 10, DB),
                'ERNAM' => fi('ERNAM', 'Created By', TS, 12, DB),
                'ERZET' => fi('ERZET', 'Time', TS, 8, DB),
                'ERDAT' => fi('ERDAT', 'Created On', TD, 8, DB),
                'BZIRK' => fi('BZIRK', 'Sales district', TS, 6, DB),
                'VSTEL' => fi('VSTEL', 'Shipping Point', TS, 4, DB),
                'VKORG' => fi('VKORG', 'Sales Org.', TS, 4, DB),
                'LFART' => fi('LFART', 'Delivery Type', TS, 4, DB),
                'AUTLF' => fi('AUTLF', 'Complete dlv.', TS, 1, DB),
                'KZAZU' => fi('KZAZU', 'Order Combinat.', TS, 1, DB),
                'WADAT' => fi('WADAT', 'Planned gds mvmt', TD, 8, DB),
                'LDDAT' => fi('LDDAT', 'Loading Date', TD, 8, DB),
                'TDDAT' => fi('TDDAT', 'TranspPlngDate', TD, 8, DB),
                'LFDAT' => fi('LFDAT', 'Delivery Date', TD, 8, DB),
                'KODAT' => fi('KODAT', 'Pick Date', TD, 8, DB),
                'ABLAD' => fi('ABLAD', 'Unloading Point', TS, 25, DB),
                'INCO1' => fi('INCO1', 'Incoterms', TS, 3, DB),
                'INCO2' => fi('INCO2', 'Incoterms 2', TS, 28, DB),
                'EXPKZ' => fi('EXPKZ', 'Export', TS, 1, DB),
                'ROUTE' => fi('ROUTE', 'Route', TS, 6, DB),
                'FAKSK' => fi('FAKSK', 'Billing block', TS, 2, DB),
                'LIFSK' => fi('LIFSK', 'Delivery block', TS, 2, DB),
                'VBTYP' => fi('VBTYP', 'Document cat.', TS, 1, DB),
                'KNFAK' => fi('KNFAK', 'FactoryCalendar', TS, 2, DB),
                'TPQUA' => fi('TPQUA', 'Means Transp. Qual', TS, 1, DB),
                'TPGRP' => fi('TPGRP', 'Means of Transp. Grp', TS, 2, DB),
                'LPRIO' => fi('LPRIO', 'Delivery Prior.', TS, 2, DB),
                'VSBED' => fi('VSBED', 'Shp.Cond.', TS, 2, DB),
                'KUNNR' => fi('KUNNR', 'Ship-To Party', TS, 10, DB),
                'KUNAG' => fi('KUNAG', 'Sold-To Party', TS, 10, DB),
                'KDGRP' => fi('KDGRP', 'Customer group', TS, 2, DB),
                'STZKL' => fi('STZKL', 'Wait Time Class', TDC, 3,2, DB),
                'STZZU' => fi('STZZU', 'Wait Time Surcharge', TDC, 3,0, DB),
                'BTGEW' => fi('BTGEW', 'Total Weight', TDC, 15,3, DB),
                'NTGEW' => fi('NTGEW', 'Net Weight', TDC, 15,3, DB),
                'GEWEI' => fi('GEWEI', 'Unit of Weight', TS, 3, DB),
                'VOLUM' => fi('VOLUM', 'Volume', TDC, 15,3, DB),
                'VOLEH' => fi('VOLEH', 'Volume Unit', TS, 3, DB),
                'ANZPK' => fi('ANZPK', 'No.of packages', TS, 5, DB),
                'BEROT' => fi('BEROT', 'PickedItmLocat.', TS, 20, DB),
                'LFUHR' => fi('LFUHR', 'TimeOfDelivery', TS, 8, DB),
                'GRULG' => fi('GRULG', 'Weight group', TS, 4, DB),
                'LSTEL' => fi('LSTEL', 'Loading Point', TS, 2, DB),
                'TRAGR' => fi('TRAGR', 'Trans. Group', TS, 4, DB),
                'FKARV' => fi('FKARV', 'DlvBillingType', TS, 4, DB),
                'FKDAT' => fi('FKDAT', 'Billing Date', TD, 8, DB),
                'PERFK' => fi('PERFK', 'Invoicing dates', TS, 2, DB),
                'ROUTA' => fi('ROUTA', 'Route', TS, 6, DB),
                'STAFO' => fi('STAFO', 'Update group', TS, 6, DB),
                'KALSM' => fi('KALSM', 'Procedure', TS, 6, DB),
                'KNUMV' => fi('KNUMV', 'Doc. condition', TS, 10, DB),
                'WAERK' => fi('WAERK', 'Doc. Currency', TS, 5, DB),
                'VKBUR' => fi('VKBUR', 'Sales Office', TS, 4, DB),
                'VBEAK' => fi('VBEAK', 'Total proc.time', TDC, 7,2, DB),
                'ZUKRL' => fi('ZUKRL', 'Comb.criteria', TS, 40, DB),
                'VERUR' => fi('VERUR', 'Original doc.', TS, 35, DB),
                'COMMN' => fi('COMMN', 'CommunicationNo', TS, 5, DB),
                'STWAE' => fi('STWAE', 'Stats Currency', TS, 5, DB),
                'STCUR' => fi('STCUR', 'Exch.rate stats', TDC, 9,5, DB),
                'EXNUM' => fi('EXNUM', 'For.tr.data no.', TS, 10, DB),
                'AENAM' => fi('AENAM', 'Changed By', TS, 12, DB),
                'AEDAT' => fi('AEDAT', 'Changed On', TD, 8, DB),
                'LGNUM' => fi('LGNUM', 'Warehouse No.', TS, 3, DB),
                'LISPL' => fi('LISPL', 'ID: delivery split', TS, 1, DB),
                'VKOIV' => fi('VKOIV', 'Sales Org. ICB', TS, 4, DB),
                'VTWIV' => fi('VTWIV', 'Distrib.channel', TS, 2, DB),
                'SPAIV' => fi('SPAIV', 'Div. IV', TS, 2, DB),
                'FKAIV' => fi('FKAIV', 'IntercoBillType', TS, 4, DB),
                'PIOIV' => fi('PIOIV', 'Billing date', TS, 2, DB),
                'FKDIV' => fi('FKDIV', 'Billing date', TD, 8, DB),
                'KUNIV' => fi('KUNIV', 'Cust(inter-co)', TS, 10, DB),
                'KKBER' => fi('KKBER', 'Cred.Contr.Area', TS, 4, DB),
                'KNKLI' => fi('KNKLI', 'Credit account', TS, 10, DB),
                'GRUPP' => fi('GRUPP', 'Cust.cred.grp', TS, 4, DB),
                'SBGRP' => fi('SBGRP', 'Cred.rep.grp', TS, 3, DB),
                'CTLPC' => fi('CTLPC', 'Risk category', TS, 3, DB),
                'CMWAE' => fi('CMWAE', 'Currency', TS, 5, DB),
                'AMTBL' => fi('AMTBL', 'Credit value', TDC, 15,2, DB),
                'BOLNR' => fi('BOLNR', 'Bill of lading', TS, 35, DB),
                'LIFNR' => fi('LIFNR', 'Supplier', TS, 10, DB),
                'TRATY' => fi('TRATY', 'MnsOfTrns type', TS, 4, DB),
                'TRAID' => fi('TRAID', 'Mns of Trans.ID', TS, 20, DB),
                'CMFRE' => fi('CMFRE', 'Release date', TD, 8, DB),
                'CMNGV' => fi('CMNGV', 'Next date', TD, 8, DB),
                'XABLN' => fi('XABLN', 'GR/GI Slip No.', TS, 10, DB),
                'BLDAT' => fi('BLDAT', 'Document Date', TD, 8, DB),
                'WADAT_IST' => fi('WADAT_IST', 'Actual GI date', TD, 8, DB),
                'TRSPG' => fi('TRSPG', 'ShpmtBlReason', TS, 2, DB),
                'TPSID' => fi('TPSID', 'ID transp.syst.', TS, 5, DB),
                'LIFEX' => fi('LIFEX', 'Ext. Delivery', TS, 35, DB),
                'TERNR' => fi('TERNR', 'Order', TS, 12, DB),
                'KALSM_CH' => fi('KALSM_CH', 'Search proced.', TS, 6, DB),
                'KLIEF' => fi('KLIEF', 'Corr.delivery', TS, 1, DB),
                'KALSP' => fi('KALSP', 'Procedure', TS, 6, DB),
                'KNUMP' => fi('KNUMP', 'Doc. condition', TS, 10, DB),
                'NETWR' => fi('NETWR', 'Net value', TDC, 15,2, DB),
                'AULWE' => fi('AULWE', 'Route Schedule', TS, 10, DB),
                'WERKS' => fi('WERKS', 'Receiving plant', TS, 4, DB),
                'LCNUM' => fi('LCNUM', 'Financ.doc.no.', TS, 10, DB),
                'ABSSC' => fi('ABSSC', 'Paym.guar.proc.', TS, 6, DB),
                'KOUHR' => fi('KOUHR', 'Picking time', TS, 8, DB),
                'TDUHR' => fi('TDUHR', 'Tr. Plan. Time', TS, 8, DB),
                'LDUHR' => fi('LDUHR', 'Loading Time', TS, 8, DB),
                'WAUHR' => fi('WAUHR', 'GI Time', TS, 8, DB),
                'LGTOR' => fi('LGTOR', 'Door for Whse', TS, 3, DB),
                'LGBZO' => fi('LGBZO', 'Staging Area', TS, 10, DB),
                'AKWAE' => fi('AKWAE', 'LettOfCredCrcy', TS, 5, DB),
                'AKKUR' => fi('AKKUR', 'LettOfCredRate', TDC, 9,5, DB),
                'AKPRZ' => fi('AKPRZ', 'Depreciation', TDC, 5,2, DB),
                'PROLI' => fi('PROLI', 'DG mgmt profile', TS, 3, DB),
                'XBLNR' => fi('XBLNR', 'Reference', TS, 25, DB),
                'HANDLE' => fi('HANDLE', 'Key', TS, 22, DB),
                'TSEGFL' => fi('TSEGFL', 'TSegment exists', TS, 1, DB),
                'TSEGTP' => fi('TSEGTP', 'Template', TS, 10, DB),
                'TZONIS' => fi('TZONIS', 'Del. loc. tzone', TS, 6, DB),
                'TZONRC' => fi('TZONRC', 'Rec. time zone', TS, 6, DB),
                'CONT_DG' => fi('CONT_DG', 'Contains DG', TS, 1, DB),
                'VERURSYS' => fi('VERURSYS', 'Original system', TS, 10, DB),
                'KZWAB' => fi('KZWAB', 'Ind.gds mvmnt', TS, 1, DB),
                'VLSTK' => fi('VLSTK', 'StatDecntrlWhse', TS, 1, DB),
                'TCODE' => fi('TCODE', 'Transaction Code', TS, 20, DB),
                'VSART' => fi('VSART', 'Shipping type', TS, 2, DB),
                'TRMTYP' => fi('TRMTYP', 'MeansTransp.', TS, 18, DB),
                'SDABW' => fi('SDABW', 'Spec.processing', TS, 4, DB),
                'VBUND' => fi('VBUND', 'Company ID', TS, 6, DB),
                'XWOFF' => fi('XWOFF', 'Calcn of val.Open', TS, 1, DB),
                'DIRTA' => fi('DIRTA', 'Immed.TO', TS, 1, DB),
                'PRVBE' => fi('PRVBE', 'Supply Area', TS, 10, DB),
                'FOLAR' => fi('FOLAR', 'Delivery Type', TS, 4, DB),
                'PODAT' => fi('PODAT', 'POD date', TD, 8, DB),
                'POTIM' => fi('POTIM', 'Confirm. time', TS, 8, DB),
                'VGANZ' => fi('VGANZ', 'No. Itms Pred. Sys.', TI, 10, DB),
                'IMWRK' => fi('IMWRK', 'In Plant', TS, 1, DB),
                'SPE_LOEKZ' => fi('SPE_LOEKZ', 'Doc.delet.ID', TS, 1, DB),
                'SPE_LOC_SEQ' => fi('SPE_LOC_SEQ', 'Location Seq.', TS, 3, DB),
                'SPE_ACC_APP_STS' => fi('SPE_ACC_APP_STS', 'Del.Conf.Stat.', TS, 1, DB),
                'SPE_SHP_INF_STS' => fi('SPE_SHP_INF_STS', 'Ship.Info.Stat.', TS, 1, DB),
                'SPE_RET_CANC' => fi('SPE_RET_CANC', 'Ret.ASN Canc.', TS, 1, DB),
                'SPE_WAUHR_IST' => fi('SPE_WAUHR_IST', 'GI Time', TS, 8, DB),
                'SPE_WAZONE_IST' => fi('SPE_WAZONE_IST', 'Time Zone', TS, 6, DB),
                'SPE_REV_VLSTK' => fi('SPE_REV_VLSTK', 'StatDecntrlWhse', TS, 1, DB),
                'SPE_LE_SCENARIO' => fi('SPE_LE_SCENARIO', 'Scenario Logistic Ex', TS, 1, DB),
                'SPE_ORIG_SYS' => fi('SPE_ORIG_SYS', 'Original System Type', TS, 1, DB),
                'SPE_CHNG_SYS' => fi('SPE_CHNG_SYS', 'Changer\'s Sys.Type', TS, 1, DB),
                'SPE_GEOROUTE' => fi('SPE_GEOROUTE', 'Georoute', TS, 10, DB),
                'SPE_GEOROUTEIND' => fi('SPE_GEOROUTEIND', 'Chg Ind Route', TS, 1, DB),
                'SPE_CARRIER_IND' => fi('SPE_CARRIER_IND', 'Change Ind.', TS, 1, DB),
                'SPE_GTS_REL' => fi('SPE_GTS_REL', 'Gds Traffic Ty', TS, 2, DB),
                'SPE_GTS_RT_CDE' => fi('SPE_GTS_RT_CDE', 'GTSRouteCode', TS, 10, DB),
                'SPE_REL_TMSTMP' => fi('SPE_REL_TMSTMP', 'Rls Time Stamp', TDC, 15,0, DB),
                'SPE_UNIT_SYSTEM' => fi('SPE_UNIT_SYSTEM', 'Msrmnt Unit Sys', TS, 10, DB),
                'SPE_INV_BFR_GI' => fi('SPE_INV_BFR_GI', 'Inv.Bf.GI', TS, 1, DB),
                'SPE_QI_STATUS' => fi('SPE_QI_STATUS', 'QI Status', TS, 1, DB),
                'SPE_RED_IND' => fi('SPE_RED_IND', 'Redirected', TS, 1, DB),
                'SAKES' => fi('SAKES', 'Storage Status', TS, 1, DB),
                'SPE_LIFEX_TYPE' => fi('SPE_LIFEX_TYPE', 'Type Ext. Ident', TS, 1, DB),
                'SPE_TTYPE' => fi('SPE_TTYPE', 'Means of Trans.', TS, 10, DB),
                'INCOV' => fi('INCOV', 'Inco. Version', TS, 4, DB),
                'INCO2_L' => fi('INCO2_L', 'Inco. Location1', TS, 70, DB),
                'INCO3_L' => fi('INCO3_L', 'Inco. Location2', TS, 70, DB),
                'TRMTYP_LONG' => fi('TRMTYP_LONG', 'MeansTransp.', TS, 40, DB),
                'VBTYP_LONG' => fi('VBTYP_LONG', 'Document Cat.', TS, 4, DB)
            }
        ),
        'ET_DELIVERY_ITEM' => new overcast.TypeInfo('ET_DELIVERY_ITEM', 'BAPI Structure Delivery Header Analog LIPS', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'VBELN' => fi('VBELN', 'Delivery', TS, 10, DB),
                'POSNR' => fi('POSNR', 'Item', TS, 6, DB),
                'PSTYV' => fi('PSTYV', 'Item category', TS, 4, DB),
                'ERNAM' => fi('ERNAM', 'Created By', TS, 12, DB),
                'ERZET' => fi('ERZET', 'Time', TS, 8, DB),
                'ERDAT' => fi('ERDAT', 'Created On', TD, 8, DB),
                'MATNR' => fi('MATNR', 'Material', TS, 18, DB),
                'MATWA' => fi('MATWA', 'MaterialEntered', TS, 18, DB),
                'MATKL' => fi('MATKL', 'Material Group', TS, 9, DB),
                'WERKS' => fi('WERKS', 'Plant', TS, 4, DB),
                'LGORT' => fi('LGORT', 'Storage Loc.', TS, 4, DB),
                'CHARG' => fi('CHARG', 'Batch', TS, 10, DB),
                'LICHN' => fi('LICHN', 'Vendor Batch', TS, 15, DB),
                'KDMAT' => fi('KDMAT', 'Cust.material', TS, 35, DB),
                'PRODH' => fi('PRODH', 'Prod. Hierarchy', TS, 18, DB),
                'LFIMG' => fi('LFIMG', 'Delivery qty', TDC, 13,3, DB),
                'MEINS' => fi('MEINS', 'Base Unit', TS, 3, DB),
                'VRKME' => fi('VRKME', 'Sales Unit', TS, 3, DB),
                'UMVKZ' => fi('UMVKZ', 'Numerator', TDC, 5,0, DB),
                'UMVKN' => fi('UMVKN', 'Denominat.', TDC, 5,0, DB),
                'NTGEW' => fi('NTGEW', 'Net Weight', TDC, 15,3, DB),
                'BRGEW' => fi('BRGEW', 'Gross Weight', TDC, 15,3, DB),
                'GEWEI' => fi('GEWEI', 'Unit of Weight', TS, 3, DB),
                'VOLUM' => fi('VOLUM', 'Volume', TDC, 15,3, DB),
                'VOLEH' => fi('VOLEH', 'Volume Unit', TS, 3, DB),
                'KZTLF' => fi('KZTLF', 'Part.Dlv./Item', TS, 1, DB),
                'UEBTK' => fi('UEBTK', 'Unlimited', TS, 1, DB),
                'UEBTO' => fi('UEBTO', 'Overdeliv. Tol.', TDC, 3,1, DB),
                'UNTTO' => fi('UNTTO', 'Underdel. Tol.', TDC, 3,1, DB),
                'CHSPL' => fi('CHSPL', 'Batch split', TS, 1, DB),
                'FAKSP' => fi('FAKSP', 'Block', TS, 2, DB),
                'MBDAT' => fi('MBDAT', 'Mat.Avail.Date', TD, 8, DB),
                'LGMNG' => fi('LGMNG', 'Qty (stckp.unt)', TDC, 13,3, DB),
                'ARKTX' => fi('ARKTX', 'Description', TS, 40, DB),
                'LGPBE' => fi('LGPBE', 'Storage Bin', TS, 10, DB),
                'VBELV' => fi('VBELV', 'Originating Doc', TS, 10, DB),
                'POSNV' => fi('POSNV', 'Item', TS, 6, DB),
                'VBTYV' => fi('VBTYV', 'Document cat.', TS, 1, DB),
                'VGSYS' => fi('VGSYS', 'PrDocLogSys', TS, 10, DB),
                'VGBEL' => fi('VGBEL', 'Reference Doc.', TS, 10, DB),
                'VGPOS' => fi('VGPOS', 'Reference Item', TS, 6, DB),
                'UPFLU' => fi('UPFLU', 'Update doc.flow', TS, 1, DB),
                'UEPOS' => fi('UEPOS', 'Higher-lev.item', TS, 6, DB),
                'FKREL' => fi('FKREL', 'Relev.for Bill.', TS, 1, DB),
                'LADGR' => fi('LADGR', 'Loading Group', TS, 4, DB),
                'TRAGR' => fi('TRAGR', 'Trans. Group', TS, 4, DB),
                'KOMKZ' => fi('KOMKZ', 'Picking ID', TS, 1, DB),
                'LGNUM' => fi('LGNUM', 'Warehouse No.', TS, 3, DB),
                'LISPL' => fi('LISPL', 'Whse no. split', TS, 1, DB),
                'LGTYP' => fi('LGTYP', 'Storage Type', TS, 3, DB),
                'LGPLA' => fi('LGPLA', 'Storage Bin', TS, 10, DB),
                'BWTEX' => fi('BWTEX', 'Separate val.', TS, 1, DB),
                'BWART' => fi('BWART', 'Movement Type', TS, 3, DB),
                'BWLVS' => fi('BWLVS', 'Movement Type', TS, 3, DB),
                'KZDLG' => fi('KZDLG', 'Ind.dynamic bin', TS, 1, DB),
                'BDART' => fi('BDART', 'RequirementType', TS, 2, DB),
                'PLART' => fi('PLART', 'Planning type', TS, 1, DB),
                'MTART' => fi('MTART', 'Material Type', TS, 4, DB),
                'XCHPF' => fi('XCHPF', 'Batch Mgmt Rqt', TS, 1, DB),
                'XCHAR' => fi('XCHAR', 'Batches', TS, 1, DB),
                'VGREF' => fi('VGREF', 'Preced. with ref.', TS, 1, DB),
                'POSAR' => fi('POSAR', 'Item type', TS, 1, DB),
                'BWTAR' => fi('BWTAR', 'Valuation Type', TS, 10, DB),
                'SUMBD' => fi('SUMBD', 'Req\'mt totals.', TS, 1, DB),
                'MTVFP' => fi('MTVFP', 'Avail. check', TS, 2, DB),
                'EANNR' => fi('EANNR', 'EAN number', TS, 13, DB),
                'GSBER' => fi('GSBER', 'Business Area', TS, 4, DB),
                'VKBUR' => fi('VKBUR', 'Sales Office', TS, 4, DB),
                'VKGRP' => fi('VKGRP', 'Sales Group', TS, 3, DB),
                'VTWEG' => fi('VTWEG', 'Distr. Channel', TS, 2, DB),
                'SPART' => fi('SPART', 'Division', TS, 2, DB),
                'GRKOR' => fi('GRKOR', 'Delivery group', TS, 3, DB),
                'FMENG' => fi('FMENG', 'Qty. is fixed', TS, 1, DB),
                'ANTLF' => fi('ANTLF', 'Max.Part.Deliv.', TDC, 1,0, DB),
                'VBEAF' => fi('VBEAF', 'Fixed proc.time', TDC, 5,2, DB),
                'VBEAV' => fi('VBEAV', 'Var. proc. time', TDC, 5,2, DB),
                'STAFO' => fi('STAFO', 'Update group', TS, 6, DB),
                'WAVWR' => fi('WAVWR', 'Cost', TDC, 13,2, DB),
                'KZWI1' => fi('KZWI1', 'Subtotal 1', TDC, 13,2, DB),
                'KZWI2' => fi('KZWI2', 'Subtotal 2', TDC, 13,2, DB),
                'KZWI3' => fi('KZWI3', 'Subtotal 3', TDC, 13,2, DB),
                'KZWI4' => fi('KZWI4', 'Subtotal 4', TDC, 13,2, DB),
                'KZWI5' => fi('KZWI5', 'Subtotal 5', TDC, 13,2, DB),
                'KZWI6' => fi('KZWI6', 'Subtotal 6', TDC, 13,2, DB),
                'SOBKZ' => fi('SOBKZ', 'Special Stock', TS, 1, DB),
                'AEDAT' => fi('AEDAT', 'Changed On', TD, 8, DB),
                'EAN11' => fi('EAN11', 'EAN/UPC', TS, 18, DB),
                'KVGR1' => fi('KVGR1', 'Industry sector', TS, 3, DB),
                'KVGR2' => fi('KVGR2', 'Customer group', TS, 3, DB),
                'KVGR3' => fi('KVGR3', 'Customer type', TS, 3, DB),
                'KVGR4' => fi('KVGR4', 'Potential Group', TS, 3, DB),
                'KVGR5' => fi('KVGR5', 'Rebate group', TS, 3, DB),
                'MVGR1' => fi('MVGR1', 'MaterialGroup 1', TS, 3, DB),
                'MVGR2' => fi('MVGR2', 'MaterialGroup 2', TS, 3, DB),
                'MVGR3' => fi('MVGR3', 'MaterialGroup 3', TS, 3, DB),
                'MVGR4' => fi('MVGR4', 'MaterialGroup 4', TS, 3, DB),
                'MVGR5' => fi('MVGR5', 'MaterialGroup 5', TS, 3, DB),
                'VPZUO' => fi('VPZUO', 'Allocation ind.', TS, 1, DB),
                'VGTYP' => fi('VGTYP', 'Document cat.', TS, 1, DB),
                'RFVGTYP' => fi('RFVGTYP', 'PrecedDocCentrl', TS, 1, DB),
                'KOSTL' => fi('KOSTL', 'Cost Center', TS, 10, DB),
                'KOKRS' => fi('KOKRS', 'CO Area', TS, 4, DB),
                'PAOBJNR' => fi('PAOBJNR', 'Profit. Segment', TS, 10, DB),
                'PRCTR' => fi('PRCTR', 'Profit Center', TS, 10, DB),
                'PS_PSP_PNR' => fi('PS_PSP_PNR', 'WBS Element', TS, 8, DB),
                'AUFNR' => fi('AUFNR', 'Order', TS, 12, DB),
                'POSNR_PP' => fi('POSNR_PP', 'Order item no.', TS, 4, DB),
                'KDAUF' => fi('KDAUF', 'Sales Order', TS, 10, DB),
                'KDPOS' => fi('KDPOS', 'Sales Ord. Item', TS, 6, DB),
                'VPMAT' => fi('VPMAT', 'Plng material', TS, 18, DB),
                'VPWRK' => fi('VPWRK', 'Planning plant', TS, 4, DB),
                'PRBME' => fi('PRBME', 'Prod. grp unit', TS, 3, DB),
                'UMREF' => fi('UMREF', 'Conversion', TDBL, 16,8, DB),
                'KNTTP' => fi('KNTTP', 'Acct Assgmt Cat', TS, 1, DB),
                'KZVBR' => fi('KZVBR', 'Consumption', TS, 1, DB),
                'FIPOS' => fi('FIPOS', 'Commitment item', TS, 14, DB),
                'FISTL' => fi('FISTL', 'Funds Center', TS, 16, DB),
                'GEBER' => fi('GEBER', 'Fund', TS, 10, DB),
                'PCKPF' => fi('PCKPF', 'Packing control', TS, 1, DB),
                'BEDAR_LF' => fi('BEDAR_LF', 'Reqmts class', TS, 3, DB),
                'CMPNT' => fi('CMPNT', 'Credit active', TS, 1, DB),
                'KCMENG' => fi('KCMENG', 'Cumul.batch qty', TDC, 15,3, DB),
                'KCBRGEW' => fi('KCBRGEW', 'Cum.gross wght', TDC, 15,3, DB),
                'KCNTGEW' => fi('KCNTGEW', 'Cumul.net wght', TDC, 15,3, DB),
                'KCVOLUM' => fi('KCVOLUM', 'Cumul.volume', TDC, 15,3, DB),
                'UECHA' => fi('UECHA', 'HghLevItmBatch', TS, 6, DB),
                'CUOBJ' => fi('CUOBJ', 'Configuration', TS, 18, DB),
                'CUOBJ_CH' => fi('CUOBJ_CH', 'Int.object no.', TS, 18, DB),
                'ANZSN' => fi('ANZSN', 'No.serial no.', TI, 10, DB),
                'SERAIL' => fi('SERAIL', 'SerialNoProfile', TS, 4, DB),
                'KCGEWEI' => fi('KCGEWEI', 'Unit of Weight', TS, 3, DB),
                'KCVOLEH' => fi('KCVOLEH', 'Volume Unit', TS, 3, DB),
                'SERNR' => fi('SERNR', 'BOM expl.number', TS, 8, DB),
                'ABRLI' => fi('ABRLI', 'Int.dlv.scd.no.', TS, 4, DB),
                'ABART' => fi('ABART', 'Rel. Type', TS, 1, DB),
                'ABRVW' => fi('ABRVW', 'Usage', TS, 3, DB),
                'QPLOS' => fi('QPLOS', 'Inspection Lot', TS, 12, DB),
                'QTLOS' => fi('QTLOS', 'Partial lot', TS, 6, DB),
                'NACHL' => fi('NACHL', 'No GR posted', TS, 1, DB),
                'MAGRV' => fi('MAGRV', 'Matl Grp Pckmat', TS, 4, DB),
                'OBJKO' => fi('OBJKO', 'Object no. hdr', TS, 22, DB),
                'OBJPO' => fi('OBJPO', 'ObjNo  Item', TS, 22, DB),
                'AESKD' => fi('AESKD', 'Engin. change', TS, 17, DB),
                'SHKZG' => fi('SHKZG', 'Returns', TS, 1, DB),
                'PROSA' => fi('PROSA', 'MatDetermActive', TS, 1, DB),
                'UEPVW' => fi('UEPVW', 'Usage HL item', TS, 1, DB),
                'EMPST' => fi('EMPST', 'Recv. point', TS, 25, DB),
                'ABTNR' => fi('ABTNR', 'Department', TS, 4, DB),
                'KOQUI' => fi('KOQUI', 'Confirmation', TS, 1, DB),
                'STADAT' => fi('STADAT', 'Statistics date', TD, 8, DB),
                'AKTNR' => fi('AKTNR', 'Promotion', TS, 10, DB),
                'KNUMH_CH' => fi('KNUMH_CH', 'NoCondRec.Batch', TS, 10, DB),
                'PREFE' => fi('PREFE', 'Preference', TS, 1, DB),
                'EXART' => fi('EXART', 'BusTransactType', TS, 2, DB),
                'CLINT' => fi('CLINT', 'Int class no.', TS, 10, DB),
                'CHMVS' => fi('CHMVS', 'Qty proposal', TS, 3, DB),
                'ABELN' => fi('ABELN', 'Alloc. Table', TS, 10, DB),
                'ABELP' => fi('ABELP', 'Item', TS, 5, DB),
                'LFIMG_FLO' => fi('LFIMG_FLO', 'Internal field/ Do not use     / LFIMG in float / MUM', TDBL, 16,8, DB),
                'LGMNG_FLO' => fi('LGMNG_FLO', 'Internal field/ Do not use     / LGMNG in float / MUM', TDBL, 16,8, DB),
                'KCMENG_FLO' => fi('KCMENG_FLO', 'Internal field/ Do not use     / KCMENG in float / MUM', TDBL, 16,8, DB),
                'KZUMW' => fi('KZUMW', 'Envt. relevant', TS, 1, DB),
                'KMPMG' => fi('KMPMG', 'Quantity', TDC, 13,3, DB),
                'AUREL' => fi('AUREL', 'AT-Relevant', TS, 1, DB),
                'KPEIN' => fi('KPEIN', 'Pricing unit', TDC, 5,0, DB),
                'KMEIN' => fi('KMEIN', 'Unit of measure', TS, 3, DB),
                'NETPR' => fi('NETPR', 'Net price', TDC, 11,2, DB),
                'NETWR' => fi('NETWR', 'Net Value', TDC, 15,2, DB),
                'KOWRR' => fi('KOWRR', 'Statist.value', TS, 1, DB),
                'KZBEW' => fi('KZBEW', 'Movement ind.', TS, 1, DB),
                'MFRGR' => fi('MFRGR', 'Mat.freight grp', TS, 8, DB),
                'CHHPV' => fi('CHHPV', 'Pack acc.batch', TS, 1, DB),
                'ABFOR' => fi('ABFOR', 'PaytGuarantForm', TS, 2, DB),
                'ABGES' => fi('ABGES', 'Guaranteed', TDBL, 16,8, DB),
                'MBUHR' => fi('MBUHR', 'Matl Staging Tme', TS, 8, DB),
                'WKTNR' => fi('WKTNR', 'Value contract no.', TS, 10, DB),
                'WKTPS' => fi('WKTPS', 'Val. cont.item', TS, 6, DB),
                'J_1BCFOP' => fi('J_1BCFOP', 'CFOP', TS, 10, DB),
                'J_1BTAXLW1' => fi('J_1BTAXLW1', 'ICMS law', TS, 3, DB),
                'J_1BTAXLW2' => fi('J_1BTAXLW2', 'IPI law', TS, 3, DB),
                'J_1BTXSDC' => fi('J_1BTXSDC', 'Tax code', TS, 2, DB),
                'SITUA' => fi('SITUA', 'Situation', TS, 2, DB),
                'RSNUM' => fi('RSNUM', 'Reservation', TS, 10, DB),
                'RSPOS' => fi('RSPOS', 'Item no.', TS, 4, DB),
                'RSART' => fi('RSART', 'Record type', TS, 1, DB),
                'KANNR' => fi('KANNR', 'Sequence number', TS, 35, DB),
                'KZFME' => fi('KZFME', 'Leading UoM', TS, 1, DB),
                'PROFL' => fi('PROFL', 'DGIndProfile', TS, 3, DB),
                'KCMENGVME' => fi('KCMENGVME', 'Cumul.batch qty', TDC, 15,3, DB),
                'KCMENGVMEF' => fi('KCMENGVMEF', 'Cumulated batch split quantity in VRKME and float', TDBL, 16,8, DB),
                'KZBWS' => fi('KZBWS', 'Valuation', TS, 1, DB),
                'PSPNR' => fi('PSPNR', 'Project def.', TS, 8, DB),
                'EPRIO' => fi('EPRIO', 'Withdr.Seq.Grp', TS, 4, DB),
                'RULES' => fi('RULES', 'Stk determ.rule', TS, 4, DB),
                'KZBEF' => fi('KZBEF', 'Inv.Mgmt active', TS, 1, DB),
                'MPROF' => fi('MPROF', 'Mfr Part Profile', TS, 4, DB),
                'EMATN' => fi('EMATN', 'MPN: Material', TS, 18, DB),
                'LGBZO' => fi('LGBZO', 'Staging Area', TS, 10, DB),
                'HANDLE' => fi('HANDLE', 'Key', TS, 22, DB),
                'VERURPOS' => fi('VERURPOS', 'Orig. item', TS, 6, DB),
                'LIFEXPOS' => fi('LIFEXPOS', 'Ext. item', TS, 6, DB),
                'NOATP' => fi('NOATP', 'No avail. check', TS, 1, DB),
                'NOPCK' => fi('NOPCK', 'Not rel.picking', TS, 1, DB),
                'RBLVS' => fi('RBLVS', 'RefMvtType WM', TS, 3, DB),
                'BERID' => fi('BERID', 'MRP Area', TS, 10, DB),
                'BESTQ' => fi('BESTQ', 'Stock Category', TS, 1, DB),
                'UMBSQ' => fi('UMBSQ', 'Stock Category', TS, 1, DB),
                'UMMAT' => fi('UMMAT', 'Receiving Mat.', TS, 18, DB),
                'UMWRK' => fi('UMWRK', 'Receiving plant', TS, 4, DB),
                'UMLGO' => fi('UMLGO', 'Receiving SLoc.', TS, 4, DB),
                'UMCHA' => fi('UMCHA', 'Receiving Batch', TS, 10, DB),
                'UMBAR' => fi('UMBAR', 'Val. Type Tfr.', TS, 10, DB),
                'UMSOK' => fi('UMSOK', 'Sp.ind.st.tfr.', TS, 1, DB),
                'SONUM' => fi('SONUM', 'Spec.Stock No.', TS, 16, DB),
                'USONU' => fi('USONU', 'Spec.Stock No.', TS, 16, DB),
                'AKKUR' => fi('AKKUR', 'LettOfCredRate', TDC, 9,5, DB),
                'AKMNG' => fi('AKMNG', 'Current qty', TS, 1, DB),
                'VKGRU' => fi('VKGRU', 'Class. of Items', TS, 3, DB),
                'SHKZG_UM' => fi('SHKZG_UM', 'Main posting id', TS, 1, DB),
                'INSMK' => fi('INSMK', 'Stock Type', TS, 1, DB),
                'KZECH' => fi('KZECH', 'Enter batch', TS, 1, DB),
                'FLGWM' => fi('FLGWM', 'Indicator: Copy dest. storage data from preceding document', TS, 1, DB),
                'BERKZ' => fi('BERKZ', 'Staging Ind.', TS, 1, DB),
                'HUPOS' => fi('HUPOS', 'Indicator: Delivery item is a HU item', TS, 1, DB),
                'NOWAB' => fi('NOWAB', 'No gds movement', TS, 1, DB),
                'KONTO' => fi('KONTO', 'G/L Account', TS, 10, DB),
                'KZEAR' => fi('KZEAR', 'Final Issue', TS, 1, DB),
                'HSDAT' => fi('HSDAT', 'Date of Manuf.', TD, 8, DB),
                'VFDAT' => fi('VFDAT', 'SLED/BBD', TD, 8, DB),
                'LFGJA' => fi('LFGJA', 'Year cur.period', TS, 4, DB),
                'LFBNR' => fi('LFBNR', 'Reference Doc.', TS, 10, DB),
                'LFPOS' => fi('LFPOS', 'Ref. Doc. Item', TS, 4, DB),
                'GRUND' => fi('GRUND', 'Reason for mvt.', TS, 4, DB),
                'FOBWA' => fi('FOBWA', 'Sub.movmnt type', TS, 3, DB),
                'DLVTP' => fi('DLVTP', 'Delivery Cat.', TS, 2, DB),
                'EXBWR' => fi('EXBWR', 'Ext. Amount LC', TDC, 13,2, DB),
                'BPMNG' => fi('BPMNG', 'Qty in OPUn', TDC, 13,3, DB),
                'EXVKW' => fi('EXVKW', 'Sales Value', TDC, 13,2, DB),
                'CMPRE_FLT' => fi('CMPRE_FLT', 'Credit price', TDBL, 16,8, DB),
                'KZPOD' => fi('KZPOD', 'POD indicator', TS, 1, DB),
                'LFDEZ' => fi('LFDEZ', 'Not WMS-relevnt', TS, 1, DB),
                'UMREV' => fi('UMREV', 'ConversionFactr', TDBL, 16,8, DB),
                'PODREL' => fi('PODREL', 'POD rel. RC/SC', TS, 1, DB),
                'KZUML' => fi('KZUML', 'St.tfr./tfr.pst', TS, 1, DB),
                'FKBER' => fi('FKBER', 'Functional Area', TS, 16, DB),
                'GRANT_NBR' => fi('GRANT_NBR', 'Grant', TS, 20, DB),
                'KZWSO' => fi('KZWSO', 'Units meas. use', TS, 1, DB),
                'GMCONTROL' => fi('GMCONTROL', 'Gds mvmt contrl', TS, 1, DB),
                'POSTING_CHANGE' => fi('POSTING_CHANGE', 'WBWKZ', TS, 1, DB),
                'UM_PS_PSP_PNR' => fi('UM_PS_PSP_PNR', 'Trsfr WBS Elmnt', TS, 8, DB),
                'PRE_VL_ETENS' => fi('PRE_VL_ETENS', 'Sequential No.', TS, 4, DB),
                'SPE_GEN_ELIKZ' => fi('SPE_GEN_ELIKZ', 'Deliv. Compl.', TS, 1, DB),
                'SPE_SCRAP_IND' => fi('SPE_SCRAP_IND', 'Scrap Indicator', TS, 1, DB),
                'SPE_AUTH_NUMBER' => fi('SPE_AUTH_NUMBER', 'RMA Number', TS, 20, DB),
                'SPE_INSPOUT_GUID' => fi('SPE_INSPOUT_GUID', 'Inspection GUID', TBLB, 16, DB),
                'SPE_FOLLOW_UP' => fi('SPE_FOLLOW_UP', 'Follow-Up Code', TS, 4, DB),
                'SPE_EXP_DATE_EXT' => fi('SPE_EXP_DATE_EXT', 'End Validity Period', TDC, 15,0, DB),
                'SPE_EXP_DATE_INT' => fi('SPE_EXP_DATE_INT', 'End internal val.', TDC, 15,0, DB),
                'SPE_AUTH_COMPLET' => fi('SPE_AUTH_COMPLET', 'RMA No. Completed', TS, 1, DB),
                'ORMNG' => fi('ORMNG', 'Delivery Qty', TDC, 13,3, DB),
                'SPE_ATP_TMSTMP' => fi('SPE_ATP_TMSTMP', 'ATP Time Stamp', TDC, 15,0, DB),
                'SPE_ORIG_SYS' => fi('SPE_ORIG_SYS', 'Original System Type', TS, 1, DB),
                'SPE_LIEFFZ' => fi('SPE_LIEFFZ', 'CQ  Vendor', TDC, 15,3, DB),
                'SPE_IMWRK' => fi('SPE_IMWRK', 'In Plant', TS, 1, DB),
                'SPE_LIFEXPOS2' => fi('SPE_LIFEXPOS2', 'Ext. ident.', TS, 35, DB),
                'SPE_EXCEPT_CODE' => fi('SPE_EXCEPT_CODE', 'Except.Code WH', TS, 4, DB),
                'SPE_KEEP_QTY' => fi('SPE_KEEP_QTY', 'Retention Qty', TDC, 13,3, DB),
                'SPE_ALTERNATE' => fi('SPE_ALTERNATE', 'Alt.ProdNr.', TS, 40, DB),
                'SPE_MAT_SUBST' => fi('SPE_MAT_SUBST', 'Reasn', TS, 1, DB),
                'SPE_STRUC' => fi('SPE_STRUC', 'Structure', TS, 3, DB),
                'SPE_EXP_DATE_EXT_B' => fi('SPE_EXP_DATE_EXT_B', 'Begin Valid. Period', TDC, 15,0, DB),
                'STK_SEGMENT' => fi('STK_SEGMENT', 'Stock Segment', TS, 16, DB),
                'REQ_SEGMENT' => fi('REQ_SEGMENT', 'Reqmnt Segment', TS, 16, DB),
                'MATNR_LONG' => fi('MATNR_LONG', 'Material', TS, 40, DB),
                'MATWA_LONG' => fi('MATWA_LONG', 'MaterialEntered', TS, 40, DB),
                'VPMAT_LONG' => fi('VPMAT_LONG', 'Plng material', TS, 40, DB),
                'EMATN_LONG' => fi('EMATN_LONG', 'MPN Material', TS, 40, DB),
                'UMMAT_LONG' => fi('UMMAT_LONG', 'Receiving Mat.', TS, 40, DB),
                'VBTYV_LONG' => fi('VBTYV_LONG', 'Document Cat.', TS, 4, DB),
                'VGTYP_LONG' => fi('VGTYP_LONG', 'Document Cat.', TS, 4, DB),
                'RFVGTYP_LONG' => fi('RFVGTYP_LONG', 'PrecedDocCentrl', TS, 4, DB),
                'STK_SEG_LONG' => fi('STK_SEG_LONG', 'Stock Segment', TS, 40, DB),
                'REQ_SEG_LONG' => fi('REQ_SEG_LONG', 'Reqmnt Segment', TS, 40, DB)
            }
        ),
        'ET_DELIVERY_HEADER_STS' => new overcast.TypeInfo('ET_DELIVERY_HEADER_STS', 'BAPI Structure Delivery Header Analog VBUK', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'VBELN' => fi('VBELN', 'SD Document', TS, 10, DB),
                'RFSTK' => fi('RFSTK', 'Ref. status', TS, 1, DB),
                'RFGSK' => fi('RFGSK', 'Total RefStatus', TS, 1, DB),
                'BESTK' => fi('BESTK', 'Confirmed', TS, 1, DB),
                'LFSTK' => fi('LFSTK', 'Delivery status', TS, 1, DB),
                'LFGSK' => fi('LFGSK', 'Overall dlv.st.', TS, 1, DB),
                'WBSTK' => fi('WBSTK', 'TotalGdsMvtStat', TS, 1, DB),
                'FKSTK' => fi('FKSTK', 'Billing status', TS, 1, DB),
                'FKSAK' => fi('FKSAK', 'Bill.Stat.Order', TS, 1, DB),
                'BUCHK' => fi('BUCHK', 'Posting Status', TS, 1, DB),
                'ABSTK' => fi('ABSTK', 'Rejection stat.', TS, 1, DB),
                'GBSTK' => fi('GBSTK', 'Overall status', TS, 1, DB),
                'KOSTK' => fi('KOSTK', 'Ovr.pick.status', TS, 1, DB),
                'LVSTK' => fi('LVSTK', 'OverallWMStatus', TS, 1, DB),
                'UVALS' => fi('UVALS', 'Item Data', TS, 1, DB),
                'UVVLS' => fi('UVVLS', 'Item deliv.data', TS, 1, DB),
                'UVFAS' => fi('UVFAS', 'Item bill.data', TS, 1, DB),
                'UVALL' => fi('UVALL', 'Header data', TS, 1, DB),
                'UVVLK' => fi('UVVLK', 'Header dlv.data', TS, 1, DB),
                'UVFAK' => fi('UVFAK', 'Header bill.dat', TS, 1, DB),
                'UVPRS' => fi('UVPRS', 'Pricing', TS, 1, DB),
                'VBTYP' => fi('VBTYP', 'Document cat.', TS, 1, DB),
                'VBOBJ' => fi('VBOBJ', 'Document object', TS, 1, DB),
                'AEDAT' => fi('AEDAT', 'Changed On', TD, 8, DB),
                'FKIVK' => fi('FKIVK', 'Totals status', TS, 1, DB),
                'RELIK' => fi('RELIK', 'Inv.list status', TS, 1, DB),
                'UVK01' => fi('UVK01', 'Hdr reserves 1', TS, 1, DB),
                'UVK02' => fi('UVK02', 'Hdr reserves 2', TS, 1, DB),
                'UVK03' => fi('UVK03', 'Hdr reserves 3', TS, 1, DB),
                'UVK04' => fi('UVK04', 'Hdr reserves 4', TS, 1, DB),
                'UVK05' => fi('UVK05', 'Hdr reserves 5', TS, 1, DB),
                'UVS01' => fi('UVS01', 'Total reserves1', TS, 1, DB),
                'UVS02' => fi('UVS02', 'TotalReserves2', TS, 1, DB),
                'UVS03' => fi('UVS03', 'Total reserves3', TS, 1, DB),
                'UVS04' => fi('UVS04', 'Total reserves4', TS, 1, DB),
                'UVS05' => fi('UVS05', 'Total reserves5', TS, 1, DB),
                'PKSTK' => fi('PKSTK', 'Packing status', TS, 1, DB),
                'CMPSA' => fi('CMPSA', 'Static check', TS, 1, DB),
                'CMPSB' => fi('CMPSB', 'Dynamic check', TS, 1, DB),
                'CMPSC' => fi('CMPSC', 'Value', TS, 1, DB),
                'CMPSD' => fi('CMPSD', 'TermsOfPayment', TS, 1, DB),
                'CMPSE' => fi('CMPSE', 'Customer date', TS, 1, DB),
                'CMPSF' => fi('CMPSF', 'Open items', TS, 1, DB),
                'CMPSG' => fi('CMPSG', 'Oldest item', TS, 1, DB),
                'CMPSH' => fi('CMPSH', 'Max.dunn.level', TS, 1, DB),
                'CMPSI' => fi('CMPSI', 'Financial doc.', TS, 1, DB),
                'CMPSJ' => fi('CMPSJ', 'ExptCreditInsur', TS, 1, DB),
                'CMPSK' => fi('CMPSK', 'Payment card', TS, 1, DB),
                'CMPSL' => fi('CMPSL', 'Reserve', TS, 1, DB),
                'CMPS0' => fi('CMPS0', 'Reserve', TS, 1, DB),
                'CMPS1' => fi('CMPS1', 'Reserve', TS, 1, DB),
                'CMPS2' => fi('CMPS2', 'Reserve', TS, 1, DB),
                'CMGST' => fi('CMGST', 'OverallCredStat', TS, 1, DB),
                'TRSTA' => fi('TRSTA', 'Trns.plan.stat.', TS, 1, DB),
                'KOQUK' => fi('KOQUK', 'Confirmation', TS, 1, DB),
                'COSTA' => fi('COSTA', 'Confirm status', TS, 1, DB),
                'SAPRL' => fi('SAPRL', 'SAP Release', TS, 4, DB),
                'UVPAS' => fi('UVPAS', 'It.data packag.', TS, 1, DB),
                'UVPIS' => fi('UVPIS', 'It.data pck/putaway', TS, 1, DB),
                'UVWAS' => fi('UVWAS', 'Item data: GM', TS, 1, DB),
                'UVPAK' => fi('UVPAK', 'Head.data pckg.', TS, 1, DB),
                'UVPIK' => fi('UVPIK', 'Head.data pck/putawy', TS, 1, DB),
                'UVWAK' => fi('UVWAK', 'Head. data GM', TS, 1, DB),
                'UVGEK' => fi('UVGEK', 'Head.data dan.gds', TS, 1, DB),
                'CMPSM' => fi('CMPSM', 'Data obsolete', TS, 1, DB),
                'DCSTK' => fi('DCSTK', 'Delay status', TS, 1, DB),
                'VESTK' => fi('VESTK', 'HU in stock', TS, 1, DB),
                'VLSTK' => fi('VLSTK', 'StatDecntrlWhse', TS, 1, DB),
                'RRSTA' => fi('RRSTA', 'Rev.det. status', TS, 1, DB),
                'BLOCK' => fi('BLOCK', 'Indicator: Document preselected for archiving', TS, 1, DB),
                'FSSTK' => fi('FSSTK', 'Ov. b.blk stat.', TS, 1, DB),
                'LSSTK' => fi('LSSTK', 'Dlv. blk status', TS, 1, DB),
                'SPSTG' => fi('SPSTG', 'Overall blk st.', TS, 1, DB),
                'PDSTK' => fi('PDSTK', 'POD status', TS, 1, DB),
                'FMSTK' => fi('FMSTK', 'Status Funds Mgmt', TS, 1, DB),
                'MANEK' => fi('MANEK', 'Manual Completion', TS, 1, DB),
                'SPE_TMPID' => fi('SPE_TMPID', 'Temp', TS, 1, DB),
                'HDALL' => fi('HDALL', 'Hold', TS, 1, DB),
                'HDALS' => fi('HDALS', 'PHold', TS, 1, DB),
                'VBTYP_LONG' => fi('VBTYP_LONG', 'Document Cat.', TS, 4, DB)
            }
        ),
        'ET_DELIVERY_ITEM_STS' => new overcast.TypeInfo('ET_DELIVERY_ITEM_STS', 'BAPI Structure Delivery Item Status Analog VBUP', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'VBELN' => fi('VBELN', 'SD Document', TS, 10, DB),
                'POSNR' => fi('POSNR', 'Item', TS, 6, DB),
                'RFSTA' => fi('RFSTA', 'Reference stat.', TS, 1, DB),
                'RFGSA' => fi('RFGSA', 'Reference stat.', TS, 1, DB),
                'BESTA' => fi('BESTA', 'Confirmed', TS, 1, DB),
                'LFSTA' => fi('LFSTA', 'Delivery status', TS, 1, DB),
                'LFGSA' => fi('LFGSA', 'Overall dlv.st.', TS, 1, DB),
                'WBSTA' => fi('WBSTA', 'GoodsMovementSt', TS, 1, DB),
                'FKSTA' => fi('FKSTA', 'Billing Status', TS, 1, DB),
                'FKSAA' => fi('FKSAA', 'Billing Status', TS, 1, DB),
                'ABSTA' => fi('ABSTA', 'Rejection stat.', TS, 1, DB),
                'GBSTA' => fi('GBSTA', 'Overall status', TS, 1, DB),
                'KOSTA' => fi('KOSTA', 'Picking status', TS, 1, DB),
                'LVSTA' => fi('LVSTA', 'WM activ.status', TS, 1, DB),
                'UVALL' => fi('UVALL', 'Item', TS, 1, DB),
                'UVVLK' => fi('UVVLK', 'Item deliv.data', TS, 1, DB),
                'UVFAK' => fi('UVFAK', 'Item bill.data', TS, 1, DB),
                'UVPRS' => fi('UVPRS', 'Pricing', TS, 1, DB),
                'FKIVP' => fi('FKIVP', 'Interco. BillSt', TS, 1, DB),
                'UVP01' => fi('UVP01', 'Item reserves 1', TS, 1, DB),
                'UVP02' => fi('UVP02', 'Item reserves 2', TS, 1, DB),
                'UVP03' => fi('UVP03', 'Item reserves 3', TS, 1, DB),
                'UVP04' => fi('UVP04', 'Item reserves 4', TS, 1, DB),
                'UVP05' => fi('UVP05', 'Item reserves 5', TS, 1, DB),
                'PKSTA' => fi('PKSTA', 'Packing status', TS, 1, DB),
                'KOQUA' => fi('KOQUA', 'Confirmation', TS, 1, DB),
                'COSTA' => fi('COSTA', 'Confirm status', TS, 1, DB),
                'CMPPI' => fi('CMPPI', 'Financial doc.', TS, 1, DB),
                'CMPPJ' => fi('CMPPJ', 'ExptCreditInsur', TS, 1, DB),
                'UVPIK' => fi('UVPIK', 'Item data pck/putawy', TS, 1, DB),
                'UVPAK' => fi('UVPAK', 'It.data pckgng', TS, 1, DB),
                'UVWAK' => fi('UVWAK', 'Item data: GM', TS, 1, DB),
                'DCSTA' => fi('DCSTA', 'Delay status', TS, 1, DB),
                'RRSTA' => fi('RRSTA', 'Rev.det. status', TS, 1, DB),
                'VLSTP' => fi('VLSTP', 'Decentr.whse', TS, 1, DB),
                'FSSTA' => fi('FSSTA', 'B. block status', TS, 1, DB),
                'LSSTA' => fi('LSSTA', 'Dlv. blk status', TS, 1, DB),
                'PDSTA' => fi('PDSTA', 'POD status', TS, 1, DB),
                'MANEK' => fi('MANEK', 'Manual Completion', TS, 1, DB),
                'HDALL' => fi('HDALL', 'DlyItemNotComp.', TS, 1, DB)
            }
        ),
        'ET_DELIVERY_PARTNER' => new overcast.TypeInfo('ET_DELIVERY_PARTNER', 'BAPI Structure Partner for a Delivery Analog VBPA', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'VBELN' => fi('VBELN', 'SD Document', TS, 10, DB),
                'POSNR' => fi('POSNR', 'Item', TS, 6, DB),
                'PARVW' => fi('PARVW', 'Partner Functn', TS, 2, DB),
                'KUNNR' => fi('KUNNR', 'Customer', TS, 10, DB),
                'LIFNR' => fi('LIFNR', 'Supplier', TS, 10, DB),
                'PERNR' => fi('PERNR', 'Personnel No.', TS, 8, DB),
                'PARNR' => fi('PARNR', 'Contact Person', TS, 10, DB),
                'ADRNR' => fi('ADRNR', 'Address', TS, 10, DB),
                'ABLAD' => fi('ABLAD', 'Unloading Point', TS, 25, DB),
                'LAND1' => fi('LAND1', 'Country', TS, 3, DB),
                'ADRDA' => fi('ADRDA', 'Adress ind.', TS, 1, DB),
                'XCPDK' => fi('XCPDK', 'One-time acct', TS, 1, DB),
                'HITYP' => fi('HITYP', 'Hierarchy type', TS, 1, DB),
                'PRFRE' => fi('PRFRE', 'Price determin.', TS, 1, DB),
                'BOKRE' => fi('BOKRE', 'Rebate', TS, 1, DB),
                'HISTUNR' => fi('HISTUNR', 'Hierarchy level', TS, 2, DB),
                'KNREF' => fi('KNREF', 'Partner desc.', TS, 30, DB),
                'LZONE' => fi('LZONE', 'Transport Zone', TS, 10, DB),
                'HZUOR' => fi('HZUOR', 'Hier.assignment', TS, 2, DB),
                'STCEG' => fi('STCEG', 'VAT Reg. No.', TS, 20, DB),
                'PARVW_FF' => fi('PARVW_FF', 'F.partners', TS, 1, DB),
                'ADRNP' => fi('ADRNP', 'Person Number', TS, 10, DB),
                'KALE' => fi('KALE', 'Appointments', TS, 1, DB)
            }
        ),
        'ET_DOCUMENT_FLOW' => new overcast.TypeInfo('ET_DOCUMENT_FLOW', 'BAPI Structure Document Flow Analog VBFA', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'VBELV' => fi('VBELV', 'Preceding Doc.', TS, 10, DB),
                'POSNV' => fi('POSNV', 'Preceding item', TS, 6, DB),
                'VBELN' => fi('VBELN', 'Follow-on doc.', TS, 10, DB),
                'POSNN' => fi('POSNN', 'Subsequent item', TS, 6, DB),
                'VBTYP_N' => fi('VBTYP_N', 'Subs.doc.categ.', TS, 1, DB),
                'RFMNG' => fi('RFMNG', 'Quantity', TDC, 15,3, DB),
                'MEINS' => fi('MEINS', 'Base Unit', TS, 3, DB),
                'RFWRT' => fi('RFWRT', 'Reference value', TDC, 15,2, DB),
                'WAERS' => fi('WAERS', 'Stats Currency', TS, 5, DB),
                'VBTYP_V' => fi('VBTYP_V', 'Prec.doc.categ.', TS, 1, DB),
                'PLMIN' => fi('PLMIN', 'Pos./ negative', TS, 1, DB),
                'TAQUI' => fi('TAQUI', 'Confirmation ID', TS, 1, DB),
                'ERDAT' => fi('ERDAT', 'Created On', TD, 8, DB),
                'ERZET' => fi('ERZET', 'Time', TS, 8, DB),
                'MATNR' => fi('MATNR', 'Material', TS, 18, DB),
                'BWART' => fi('BWART', 'Movement Type', TS, 3, DB),
                'BDART' => fi('BDART', 'RequirementType', TS, 2, DB),
                'PLART' => fi('PLART', 'Planning type', TS, 1, DB),
                'STUFE' => fi('STUFE', 'Level', TS, 2, DB),
                'LGNUM' => fi('LGNUM', 'Warehouse No.', TS, 3, DB),
                'AEDAT' => fi('AEDAT', 'Changed On', TD, 8, DB),
                'FKTYP' => fi('FKTYP', 'BillingCategory', TS, 1, DB),
                'BRGEW' => fi('BRGEW', 'Gross Weight', TDC, 15,3, DB),
                'GEWEI' => fi('GEWEI', 'Unit of Weight', TS, 3, DB),
                'VOLUM' => fi('VOLUM', 'Volume', TDC, 15,3, DB),
                'VOLEH' => fi('VOLEH', 'Volume Unit', TS, 3, DB),
                'FPLNR' => fi('FPLNR', 'Bill. Plan No.', TS, 10, DB),
                'FPLTR' => fi('FPLTR', 'Item', TS, 6, DB),
                'RFMNG_FLO' => fi('RFMNG_FLO', 'Quantity', TDBL, 16,8, DB),
                'RFMNG_FLT' => fi('RFMNG_FLT', 'Quantity', TDBL, 16,8, DB),
                'VRKME' => fi('VRKME', 'Sales Unit', TS, 3, DB),
                'ABGES' => fi('ABGES', 'Guaranteed', TDBL, 16,8, DB),
                'SOBKZ' => fi('SOBKZ', 'Special Stock', TS, 1, DB),
                'SONUM' => fi('SONUM', 'Spec.Stock No.', TS, 16, DB),
                'KZBEF' => fi('KZBEF', 'Inv.Mgmt active', TS, 1, DB),
                'NTGEW' => fi('NTGEW', 'Net Weight', TDC, 13,3, DB),
                'LOGSYS' => fi('LOGSYS', 'Logical System', TS, 10, DB),
                'WBSTA' => fi('WBSTA', 'GoodsMovementSt', TS, 1, DB),
                'CMETH' => fi('CMETH', 'Conv. Method', TS, 1, DB),
                'MJAHR' => fi('MJAHR', 'Mat. Doc. Year', TS, 4, DB),
                'MATNR_LONG' => fi('MATNR_LONG', 'Material', TS, 40, DB),
                'VBTYP_N_LONG' => fi('VBTYP_N_LONG', 'Document Cat.', TS, 4, DB),
                'VBTYP_V_LONG' => fi('VBTYP_V_LONG', 'Document Cat.', TS, 4, DB)
            }
        ),
        'ET_FOREIGN_TRADE_HEADER' => new overcast.TypeInfo('ET_FOREIGN_TRADE_HEADER', 'BAPI Structure Foreign Trade Analog EIKP', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'EXNUM' => fi('EXNUM', 'For.tr.data no.', TS, 10, DB),
                'ALAND' => fi('ALAND', 'Deliv.country', TS, 3, DB),
                'EXPVZ' => fi('EXPVZ', 'ModeOfTr-Border', TS, 1, DB),
                'ZOLLA' => fi('ZOLLA', 'Customs office', TS, 6, DB),
                'ZOLLB' => fi('ZOLLB', 'Office of dest.', TS, 6, DB),
                'ZOLL1' => fi('ZOLL1', 'Customs office1', TS, 6, DB),
                'ZOLL2' => fi('ZOLL2', 'Customs office2', TS, 6, DB),
                'ZOLL3' => fi('ZOLL3', 'Customs office3', TS, 6, DB),
                'ZOLL4' => fi('ZOLL4', 'Customs office4', TS, 6, DB),
                'ZOLL5' => fi('ZOLL5', 'Customs office5', TS, 6, DB),
                'ZOLL6' => fi('ZOLL6', 'Customs office6', TS, 6, DB),
                'KZGBE' => fi('KZGBE', 'Cross.border MT', TS, 30, DB),
                'KZABE' => fi('KZABE', 'Means of transp', TS, 30, DB),
                'STGBE' => fi('STGBE', 'OriginMT-Border', TS, 3, DB),
                'STABE' => fi('STABE', 'OrigCtry-Depar.', TS, 3, DB),
                'CONTA' => fi('CONTA', 'Container', TS, 1, DB),
                'GRWCU' => fi('GRWCU', 'Currency', TS, 5, DB),
                'IEVER' => fi('IEVER', 'DoModeOfTransp.', TS, 1, DB),
                'SEGAL' => fi('SEGAL', 'Excl./Incl.', TS, 2, DB),
                'WZOCU' => fi('WZOCU', 'Currency', TS, 5, DB),
                'PRONU' => fi('PRONU', 'Invoice number', TS, 25, DB),
                'PRODA' => fi('PRODA', 'Invoice date', TD, 8, DB),
                'VORPA' => fi('VORPA', 'PrevDocType', TS, 10, DB),
                'VORDA' => fi('VORDA', 'Date prel.doc.', TD, 8, DB),
                'VORNU' => fi('VORNU', 'Prel.doc. no.', TS, 25, DB),
                'BEHOE' => fi('BEHOE', 'Iss.authority', TS, 10, DB),
                'KENNU' => fi('KENNU', 'Cust.off./ID no', TS, 6, DB),
                'VOISO' => fi('VOISO', 'ISO code', TS, 2, DB),
                'PREFPACOD' => fi('PREFPACOD', 'Preference code', TS, 3, DB),
                'PREFA' => fi('PREFA', 'Preference type', TS, 10, DB),
                'PREFN' => fi('PREFN', 'Pref.doc. no.', TS, 25, DB),
                'PREDU' => fi('PREDU', 'Date', TD, 8, DB),
                'PRISO' => fi('PRISO', 'ISO code', TS, 2, DB),
                'PRHOE' => fi('PRHOE', 'Iss.authority', TS, 10, DB),
                'PRUEL' => fi('PRUEL', 'Validity date', TD, 8, DB),
                'NACAR' => fi('NACAR', 'Verif.type', TS, 10, DB),
                'NACNU' => fi('NACNU', 'Verificat. no.', TS, 25, DB),
                'NACDA' => fi('NACDA', 'Date', TD, 8, DB),
                'NAISO' => fi('NAISO', 'ISO code', TS, 2, DB),
                'NAHOE' => fi('NAHOE', 'Iss.authority', TS, 10, DB),
                'NAUEL' => fi('NAUEL', 'Validity period', TD, 8, DB),
                'TEXT1' => fi('TEXT1', 'Description', TS, 40, DB),
                'TEXT2' => fi('TEXT2', 'Description', TS, 40, DB),
                'TEXT3' => fi('TEXT3', 'Description', TS, 40, DB),
                'EXDAR' => fi('EXDAR', 'Export document', TS, 10, DB),
                'EXDAA' => fi('EXDAA', 'Exp.decl.', TS, 25, DB),
                'EXDAB' => fi('EXDAB', 'ExportDecl.ValidTo', TS, 25, DB),
                'EXDTA' => fi('EXDTA', 'T doc. type', TS, 10, DB),
                'EXDT2' => fi('EXDT2', 'T document no.', TS, 25, DB),
                'EXDTB' => fi('EXDTB', 'T doc.-NextPage', TS, 25, DB),
                'EXDPA' => fi('EXDPA', 'Pref.type', TS, 10, DB),
                'EXPRE' => fi('EXPRE', 'Pref.doc. no.', TS, 25, DB),
                'EXDT5' => fi('EXDT5', 'T5 document no.', TS, 25, DB),
                'LADEL' => fi('LADEL', 'Place of load.', TS, 40, DB),
                'AUSFU' => fi('AUSFU', 'Exporter', TS, 10, DB),
                'EIOKW' => fi('EIOKW', 'Complete', TS, 1, DB),
                'AUSOK' => fi('AUSOK', 'Correct data', TS, 1, DB),
                'LAZL1' => fi('LAZL1', 'Cus.off.ctry', TS, 3, DB),
                'LAZL2' => fi('LAZL2', 'Cus.off.ctry', TS, 3, DB),
                'LAZL3' => fi('LAZL3', 'Cus.off.ctry', TS, 3, DB),
                'LAZL4' => fi('LAZL4', 'Cus.off.ctry', TS, 3, DB),
                'LAZL5' => fi('LAZL5', 'Cus.off.ctry', TS, 3, DB),
                'LAZL6' => fi('LAZL6', 'Cus.off.ctry', TS, 3, DB),
                'AZOLL' => fi('AZOLL', 'ExpCusOffice', TS, 6, DB),
                'AHBAS' => fi('AHBAS', 'FT BasDocCat.', TS, 3, DB),
                'REFNR' => fi('REFNR', 'SD Document', TS, 10, DB),
                'MABSD' => fi('MABSD', 'Selection date', TD, 8, DB),
                'BFMAR' => fi('BFMAR', 'MoTransp. type', TS, 6, DB),
                'CUDCL' => fi('CUDCL', 'Cust.decl.type', TS, 3, DB)
            }
        ),
        'ET_FOREIGN_TRADE_ITEM' => new overcast.TypeInfo('ET_FOREIGN_TRADE_ITEM', 'BAPI Structure Foreign Trade Item Analog EIPO', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'EXNUM' => fi('EXNUM', 'For.tr.data no.', TS, 10, DB),
                'EXPOS' => fi('EXPOS', 'Item', TS, 6, DB),
                'STAWN' => fi('STAWN', 'Comm./imp. code', TS, 17, DB),
                'EXPRF' => fi('EXPRF', 'Procedure', TS, 8, DB),
                'EXART' => fi('EXART', 'BusTransactType', TS, 2, DB),
                'HERKL' => fi('HERKL', 'Ctry of origin', TS, 3, DB),
                'HERKR' => fi('HERKR', 'Reg. of origin', TS, 3, DB),
                'GRWRT' => fi('GRWRT', 'Statist.value', TDC, 13,2, DB),
                'PREFPACOD' => fi('PREFPACOD', 'Preference code', TS, 3, DB),
                'SEGAL' => fi('SEGAL', 'Excl./Incl.', TS, 2, DB),
                'MOWNR' => fi('MOWNR', 'EU prod.list no.', TS, 12, DB),
                'MOGRU' => fi('MOGRU', 'CAP prod. group', TS, 6, DB),
                'GPNUM' => fi('GPNUM', 'PRODCOM no.', TS, 9, DB),
                'CASNR' => fi('CASNR', 'CAS no.(pharm.)', TS, 15, DB),
                'STEUC' => fi('STEUC', 'Control code', TS, 16, DB),
                'WZOLL' => fi('WZOLL', 'Customs value', TDC, 13,2, DB),
                'VERLD' => fi('VERLD', 'Dispatch ctry', TS, 3, DB),
                'HANLD' => fi('HANLD', 'Trading country', TS, 3, DB),
                'TEXT1' => fi('TEXT1', 'Description', TS, 40, DB),
                'TEXT2' => fi('TEXT2', 'Description', TS, 40, DB),
                'TEXT3' => fi('TEXT3', 'Description', TS, 40, DB),
                'COKON' => fi('COKON', 'Customs quota', TS, 6, DB),
                'COPHA' => fi('COPHA', 'Pharmaceu.prod.', TS, 6, DB),
                'COADI' => fi('COADI', 'Antidumping', TS, 6, DB),
                'PRONU' => fi('PRONU', 'Invoice number', TS, 25, DB),
                'PRODA' => fi('PRODA', 'Invoice date', TD, 8, DB),
                'VORPA' => fi('VORPA', 'PrevDocType', TS, 10, DB),
                'VORNU' => fi('VORNU', 'Prel.doc. no.', TS, 25, DB),
                'VORDA' => fi('VORDA', 'Date prel.doc.', TD, 8, DB),
                'BEHOE' => fi('BEHOE', 'Iss.authority', TS, 10, DB),
                'KENNU' => fi('KENNU', 'Cust.off./ID no', TS, 6, DB),
                'VOISO' => fi('VOISO', 'ISO code', TS, 2, DB),
                'PREFA' => fi('PREFA', 'Preference type', TS, 10, DB),
                'PREFN' => fi('PREFN', 'Pref.doc. no.', TS, 25, DB),
                'PREDU' => fi('PREDU', 'Date', TD, 8, DB),
                'PRISO' => fi('PRISO', 'ISO code', TS, 2, DB),
                'PRHOE' => fi('PRHOE', 'Iss.authority', TS, 10, DB),
                'PRUEL' => fi('PRUEL', 'Validity date', TD, 8, DB),
                'NACAR' => fi('NACAR', 'Verif.type', TS, 10, DB),
                'NACNU' => fi('NACNU', 'Verificat. no.', TS, 25, DB),
                'NACDA' => fi('NACDA', 'Date', TD, 8, DB),
                'NAISO' => fi('NAISO', 'ISO code', TS, 2, DB),
                'NAHOE' => fi('NAHOE', 'Iss.authority', TS, 10, DB),
                'NAUEL' => fi('NAUEL', 'Validity period', TD, 8, DB),
                'NACA2' => fi('NACA2', 'Verif.type', TS, 10, DB),
                'NACN2' => fi('NACN2', 'Verificat. no.', TS, 25, DB),
                'NACD2' => fi('NACD2', 'Date', TD, 8, DB),
                'NAIS2' => fi('NAIS2', 'ISO code', TS, 2, DB),
                'NAHO2' => fi('NAHO2', 'Iss.authority', TS, 10, DB),
                'NAUE2' => fi('NAUE2', 'Validity period', TD, 8, DB),
                'NACA3' => fi('NACA3', 'Verif.type', TS, 10, DB),
                'NACN3' => fi('NACN3', 'Verificat. no.', TS, 25, DB),
                'NACD3' => fi('NACD3', 'Date', TD, 8, DB),
                'NAIS3' => fi('NAIS3', 'ISO code', TS, 2, DB),
                'NAHO3' => fi('NAHO3', 'Iss.authority', TS, 10, DB),
                'NAUE3' => fi('NAUE3', 'Validity period', TD, 8, DB),
                'NACA4' => fi('NACA4', 'Verif.type', TS, 10, DB),
                'NACN4' => fi('NACN4', 'Verificat. no.', TS, 25, DB),
                'NACD4' => fi('NACD4', 'Date', TD, 8, DB),
                'NAIS4' => fi('NAIS4', 'ISO code', TS, 2, DB),
                'NAHO4' => fi('NAHO4', 'Iss.authority', TS, 10, DB),
                'NAUE4' => fi('NAUE4', 'Validity period', TD, 8, DB),
                'NACA5' => fi('NACA5', 'Verif.type', TS, 10, DB),
                'NACN5' => fi('NACN5', 'Verificat. no.', TS, 25, DB),
                'NACD5' => fi('NACD5', 'Date', TD, 8, DB),
                'NAIS5' => fi('NAIS5', 'ISO code', TS, 2, DB),
                'NAHO5' => fi('NAHO5', 'Iss.authority', TS, 10, DB),
                'NAUE5' => fi('NAUE5', 'Validity period', TD, 8, DB),
                'EXDAR' => fi('EXDAR', 'Export document', TS, 10, DB),
                'EXDAA' => fi('EXDAA', 'Exp.decl.', TS, 25, DB),
                'EXDAB' => fi('EXDAB', 'ExportDecl.ValidTo', TS, 25, DB),
                'EXDTA' => fi('EXDTA', 'T doc. type', TS, 10, DB),
                'EXDT2' => fi('EXDT2', 'T document no.', TS, 25, DB),
                'EXDTB' => fi('EXDTB', 'T doc.-NextPage', TS, 25, DB),
                'EXDPA' => fi('EXDPA', 'Pref.type', TS, 10, DB),
                'EXPRE' => fi('EXPRE', 'Pref.doc. no.', TS, 25, DB),
                'EXDT5' => fi('EXDT5', 'T5 document no.', TS, 25, DB),
                'AUSOK' => fi('AUSOK', 'Correct data', TS, 1, DB),
                'COIMP' => fi('COIMP', 'Import code no.', TS, 17, DB),
                'HERSE' => fi('HERSE', 'Manufact. no.', TS, 10, DB),
                'COBLD' => fi('COBLD', 'Code DestinCtry', TS, 17, DB),
                'EIOKW' => fi('EIOKW', 'Complete', TS, 1, DB),
                'EIOKA' => fi('EIOKA', 'EDI customs', TS, 1, DB),
                'GBNUM' => fi('GBNUM', 'Cu.decl.list-No', TS, 20, DB),
                'RGNNR' => fi('RGNNR', 'Reg.no.', TS, 20, DB),
                'PRENC' => fi('PRENC', 'Exemption cert.', TS, 1, DB),
                'PRENO' => fi('PRENO', 'Exempt.cert.no.', TS, 8, DB),
                'PREND' => fi('PREND', 'Iss.date of crt', TD, 8, DB),
                'KTNUM' => fi('KTNUM', 'Ceiling number', TS, 10, DB),
                'PLNUM' => fi('PLNUM', 'Ceiling number', TS, 10, DB),
                'POSAR' => fi('POSAR', 'Item type', TS, 1, DB),
                'PSTYV' => fi('PSTYV', 'Item Category', TS, 4, DB)
            }
        ),
        'ET_HU_HEADER' => new overcast.TypeInfo('ET_HU_HEADER', 'BAPI Structure Handling Unit Header Analog VEKP', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'VENUM' => fi('VENUM', 'Internal HU no.', TS, 10, DB),
                'EXIDV' => fi('EXIDV', 'Handling Unit', TS, 20, DB),
                'EXIDA' => fi('EXIDA', 'ID Type', TS, 1, DB),
                'VSTEL' => fi('VSTEL', 'Shipping Point', TS, 4, DB),
                'LSTEL' => fi('LSTEL', 'Loading Point', TS, 2, DB),
                'BRGEW' => fi('BRGEW', 'Total Weight', TDC, 15,3, DB),
                'NTGEW' => fi('NTGEW', 'Loading weight', TDC, 15,3, DB),
                'MAGEW' => fi('MAGEW', 'Allowed weight', TDC, 15,3, DB),
                'TARAG' => fi('TARAG', 'Tare weight', TDC, 15,3, DB),
                'GEWEI' => fi('GEWEI', 'Unit of Weight', TS, 3, DB),
                'BTVOL' => fi('BTVOL', 'Total Volume', TDC, 15,3, DB),
                'NTVOL' => fi('NTVOL', 'Loading volume', TDC, 15,3, DB),
                'MAVOL' => fi('MAVOL', 'Allowed volume', TDC, 15,3, DB),
                'TAVOL' => fi('TAVOL', 'Tare volume', TDC, 15,3, DB),
                'VOLEH' => fi('VOLEH', 'Volume Unit', TS, 3, DB),
                'ANZGL' => fi('ANZGL', 'Similar', TI, 10, DB),
                'ERNAM' => fi('ERNAM', 'Created By', TS, 12, DB),
                'ERDAT' => fi('ERDAT', 'Created On', TD, 8, DB),
                'ERUHR' => fi('ERUHR', 'Time', TS, 8, DB),
                'AENAM' => fi('AENAM', 'Changed By', TS, 12, DB),
                'AEDAT' => fi('AEDAT', 'Changed On', TD, 8, DB),
                'AEZET' => fi('AEZET', 'Time of change', TS, 8, DB),
                'SORTL' => fi('SORTL', 'Search term', TS, 10, DB),
                'VEGR1' => fi('VEGR1', 'HU group 1', TS, 5, DB),
                'VEGR2' => fi('VEGR2', 'HU group 2', TS, 5, DB),
                'VEGR3' => fi('VEGR3', 'HU group 3', TS, 5, DB),
                'VEGR4' => fi('VEGR4', 'HU group 4', TS, 5, DB),
                'VEGR5' => fi('VEGR5', 'HU group 5', TS, 5, DB),
                'VHILM' => fi('VHILM', 'PackMaterials', TS, 18, DB),
                'LAENG' => fi('LAENG', 'Length', TDC, 13,3, DB),
                'BREIT' => fi('BREIT', 'Width', TDC, 13,3, DB),
                'HOEHE' => fi('HOEHE', 'Height', TDC, 13,3, DB),
                'MEABM' => fi('MEABM', 'Unit', TS, 3, DB),
                'ERLKZ' => fi('ERLKZ', 'Status', TS, 1, DB),
                'GEWTO' => fi('GEWTO', 'Excess wt tolerance', TDC, 3,1, DB),
                'VOLTO' => fi('VOLTO', 'Excess volume tol.', TDC, 3,1, DB),
                'MEINS' => fi('MEINS', 'Base Unit', TS, 3, DB),
                'VOLEH_MAX' => fi('VOLEH_MAX', 'Volume Unit', TS, 3, DB),
                'GEWEI_MAX' => fi('GEWEI_MAX', 'Unit of Weight', TS, 3, DB),
                'VBELN_GEN' => fi('VBELN_GEN', 'Gen.delivery', TS, 10, DB),
                'POSNR_GEN' => fi('POSNR_GEN', 'Generated item', TS, 6, DB),
                'INHALT' => fi('INHALT', 'Content', TS, 40, DB),
                'VHART' => fi('VHART', 'Packag.mat.type', TS, 4, DB),
                'KAPPL' => fi('KAPPL', 'Application', TS, 2, DB),
                'KALSM' => fi('KALSM', 'OutputDet.Proc.', TS, 6, DB),
                'KSCHL' => fi('KSCHL', 'Output Type', TS, 4, DB),
                'MAGRV' => fi('MAGRV', 'Matl Grp Pckmat', TS, 4, DB),
                'WERKS' => fi('WERKS', 'Plant', TS, 4, DB),
                'PSTYV' => fi('PSTYV', 'Item Category', TS, 4, DB),
                'VKORG' => fi('VKORG', 'Sales Org.', TS, 4, DB),
                'VTWEG' => fi('VTWEG', 'RefDistCh-Cust/Mat.', TS, 2, DB),
                'LADLG' => fi('LADLG', 'LgthLoadingPltf', TDC, 7,0, DB),
                'LADEH' => fi('LADEH', 'Unit of length', TS, 3, DB),
                'FARZT' => fi('FARZT', 'Travel time', TDC, 3,0, DB),
                'FAREH' => fi('FAREH', 'Trav.time unit', TS, 3, DB),
                'ENTFE' => fi('ENTFE', 'Distance', TDC, 7,0, DB),
                'EHENT' => fi('EHENT', 'Un. of distance', TS, 3, DB),
                'LGORT' => fi('LGORT', 'Stor. Location', TS, 4, DB),
                'GEWFX' => fi('GEWFX', 'Wt/vol. fixed', TS, 1, DB),
                'VELTP' => fi('VELTP', 'Pack.matl cat.', TS, 1, DB),
                'EXIDV2' => fi('EXIDV2', 'HU ID 2', TS, 20, DB),
                'LANDT' => fi('LANDT', 'Country MoT', TS, 3, DB),
                'LANDF' => fi('LANDF', 'Driver\'s natl.', TS, 3, DB),
                'NAMEF' => fi('NAMEF', 'Driver', TS, 35, DB),
                'NAMBE' => fi('NAMBE', 'Alt.Driver', TS, 35, DB),
                'VHILM_KU' => fi('VHILM_KU', 'CustPckgingMatl', TS, 35, DB),
                'VPOBJ' => fi('VPOBJ', 'Object', TS, 2, DB),
                'VPOBJKEY' => fi('VPOBJKEY', 'Object', TS, 20, DB),
                'HANDLE' => fi('HANDLE', 'Handle', TS, 22, DB),
                'WMSTA' => fi('WMSTA', 'Container stat.', TS, 1, DB),
                'LGNUM' => fi('LGNUM', 'Whse number', TS, 3, DB),
                'SAPRL' => fi('SAPRL', 'SAP Release', TS, 4, DB),
                'KZGVH' => fi('KZGVH', 'Closed', TS, 1, DB),
                'ADGE_DG' => fi('ADGE_DG', 'DG-relevant', TS, 1, DB),
                'ADGE_DGPR' => fi('ADGE_DGPR', 'Print-relevant', TS, 1, DB),
                'UEVEL' => fi('UEVEL', 'Higher-level HU', TS, 10, DB),
                'PACKVORSCHR' => fi('PACKVORSCHR', 'PackInstructn', TS, 22, DB),
                'PACKVORSCHR_ST' => fi('PACKVORSCHR_ST', 'Loc.pack.status', TS, 1, DB),
                'LABELTYP' => fi('LABELTYP', 'No shipping label', TS, 1, DB),
                'ZUL_AUFL' => fi('ZUL_AUFL', 'Allowed load', TDC, 15,3, DB),
                'STATUS' => fi('STATUS', 'HU status', TS, 4, DB),
                'HU_LGORT' => fi('HU_LGORT', 'HU storage loc.', TS, 1, DB),
                'HU_SYSTEM' => fi('HU_SYSTEM', 'HU system', TS, 1, DB),
                'SPE_HDALL' => fi('SPE_HDALL', 'Hold', TS, 1, DB),
                'DISP_STATUS_DEC_WMS' => fi('DISP_STATUS_DEC_WMS', 'StatDecntrlWhse', TS, 1, DB),
                'SPE_DELDEC' => fi('SPE_DELDEC', 'Del.', TS, 1, DB),
                'SPE_IDART_01' => fi('SPE_IDART_01', 'HU ID Type', TS, 1, DB),
                'SPE_IDENT_01' => fi('SPE_IDENT_01', 'Alt Hnd Unit ID', TS, 40, DB),
                'SPE_IDART_02' => fi('SPE_IDART_02', 'HU ID Type', TS, 1, DB),
                'SPE_IDENT_02' => fi('SPE_IDENT_02', 'Alt Hnd Unit ID', TS, 40, DB),
                'SPE_IDART_03' => fi('SPE_IDART_03', 'HU ID Type', TS, 1, DB),
                'SPE_IDENT_03' => fi('SPE_IDENT_03', 'Alt Hnd Unit ID', TS, 40, DB),
                'SPE_IDART_04' => fi('SPE_IDART_04', 'HU ID Type', TS, 1, DB),
                'SPE_IDENT_04' => fi('SPE_IDENT_04', 'Alt Hnd Unit ID', TS, 40, DB),
                'VHILM_LONG' => fi('VHILM_LONG', 'PackMaterials', TS, 40, DB)
            }
        ),
        'ET_ITEM_SERIAL_NO' => new overcast.TypeInfo('ET_ITEM_SERIAL_NO', 'BAPI Delivery Serial Numbers Item', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'DELIV_NUMB' => fi('DELIV_NUMB', 'Delivery', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'SERIALNO' => fi('SERIALNO', 'Serial Number', TS, 18, DB),
                'UII' => fi('UII', 'UII', TS, 72, DB)
            }
        ),
        'EXTENSIONIN' => new overcast.TypeInfo('EXTENSIONIN', 'Reference Structure for BAPI Parameters EXTENSIONIN/EXTENSIONOUT', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'STRUCTURE' => fi('STRUCTURE', 'Table ext.struct.', TS, 30, DB),
                'VALUEPART1' => fi('VALUEPART1', 'Data', TS, 240, DB),
                'VALUEPART2' => fi('VALUEPART2', 'Data', TS, 240, DB),
                'VALUEPART3' => fi('VALUEPART3', 'Data', TS, 240, DB),
                'VALUEPART4' => fi('VALUEPART4', 'Data', TS, 240, DB)
            }
        ),
        'EXTENSIONOUT' => new overcast.TypeInfo('EXTENSIONOUT', 'Reference Structure for BAPI Parameters EXTENSIONIN/EXTENSIONOUT', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'STRUCTURE' => fi('STRUCTURE', 'Structure name of  BAPI table extension', TS, 30, DB),
                'VALUEPART1' => fi('VALUEPART1', 'Data part of BAPI extension parameter', TS, 240, DB),
                'VALUEPART2' => fi('VALUEPART2', 'Data part of BAPI extension parameter', TS, 240, DB),
                'VALUEPART3' => fi('VALUEPART3', 'Data part of BAPI extension parameter', TS, 240, DB),
                'VALUEPART4' => fi('VALUEPART4', 'Data part of BAPI extension parameter', TS, 240, DB)
            }
        ),
        'RETURN_x' => new overcast.TypeInfo('RETURN_x', 'Return Parameter(s)', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'TYPE_x' => fi('TYPE_x', 'Message type', TS, 1, DB),
                'ID' => fi('ID', 'Message Class', TS, 20, DB),
                'NUMBER_x' => fi('NUMBER_x', 'Message number', TS, 3, DB),
                'MESSAGE' => fi('MESSAGE', 'Message text', TS, 220, DB),
                'LOG_NO' => fi('LOG_NO', 'Log Number', TS, 20, DB),
                'LOG_MSG_NO' => fi('LOG_MSG_NO', 'Message Number', TS, 6, DB),
                'MESSAGE_V1' => fi('MESSAGE_V1', 'Message Variable', TS, 50, DB),
                'MESSAGE_V2' => fi('MESSAGE_V2', 'Message Variable', TS, 50, DB),
                'MESSAGE_V3' => fi('MESSAGE_V3', 'Message Variable', TS, 50, DB),
                'MESSAGE_V4' => fi('MESSAGE_V4', 'Message Variable', TS, 50, DB),
                'PARAMETER' => fi('PARAMETER', 'Parameter Name', TS, 32, DB),
                'ROW' => fi('ROW', 'Parameter line', TI, 10, DB),
                'FIELD' => fi('FIELD', 'Field name', TS, 30, DB),
                'SYSTEM_x' => fi('SYSTEM_x', 'Logical system', TS, 10, DB)
            }
        )
    };
}