/* 
 * Generated by Overcast UTC 2024-03-18 07:45:19Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ovcSAPGOSGetDocumentTest {
    @istest
    private static void testovcSAPGOSGetDocument() {
        ovcSAPGOSGetDocument actual = new ovcSAPGOSGetDocument();
        system.assertNotEquals(null, actual.SO_DOCUMENT_READ_API1);
        system.assertNotEquals(null, actual.FILTER);
        system.assertNotEquals(null, actual.DOCUMENT_DATA);
        system.assertNotEquals(null, actual.OBJECT_HEADER);
        system.assertNotEquals(null, actual.CONTENTS_HEX);
    }

    @istest
    private static void testSO_DOCUMENT_READ_API1() {
        ovcSAPGOSGetDocument.SO_DOCUMENT_READ_API1 actual = new ovcSAPGOSGetDocument.SO_DOCUMENT_READ_API1();

        actual.DOCUMENT_ID = 'a';
        system.assertEquals('a', actual.DOCUMENT_ID);
    }
    @istest
    private static void testFILTER() {
        ovcSAPGOSGetDocument.FILTER actual = new ovcSAPGOSGetDocument.FILTER();

        actual.SEND_INFO = 'a';
        actual.NO_CONTENT = 'a';
        actual.REC_LIST = 'a';
        system.assertEquals('a', actual.SEND_INFO);
        system.assertEquals('a', actual.NO_CONTENT);
        system.assertEquals('a', actual.REC_LIST);
    }
    @istest
    private static void testDOCUMENT_DATA() {
        ovcSAPGOSGetDocument.DOCUMENT_DATA actual = new ovcSAPGOSGetDocument.DOCUMENT_DATA();

        actual.DOC_ID = 'a';
        actual.OBJECT_ID = 'a';
        actual.OBJ_TYPE = 'a';
        actual.OBJ_NAME = 'a';
        actual.OBJ_DESCR = 'a';
        actual.OBJ_LANGU = 'a';
        actual.OBJ_SORT = 'a';
        actual.CREATOR_ID = 'a';
        actual.CREAT_NAME = 'a';
        actual.CREAT_FNAM = 'a';
        actual.CREAT_DATE = Date.newInstance(2000,1,1);
        actual.CREAT_TIME = 'a';
        actual.CHANGER_ID = 'a';
        actual.CHANG_NAME = 'a';
        actual.CHANG_FNAM = 'a';
        actual.CHANG_DATE = Date.newInstance(2000,1,1);
        actual.CHANG_TIME = 'a';
        actual.OWNER_ID = 'a';
        actual.OWNER_NAM = 'a';
        actual.OWNER_FNAM = 'a';
        actual.LAST_ACCES = Date.newInstance(2000,1,1);
        actual.OBJ_EXPDAT = Date.newInstance(2000,1,1);
        actual.SENSITIVTY = 'a';
        actual.OBJ_PRIO = 'a';
        actual.NO_CHANGE = 'a';
        actual.PRIORITY = 'a';
        actual.HISTORY = 'a';
        actual.RESUB = 'a';
        actual.RESUB_DATE = Date.newInstance(2000,1,1);
        actual.SENDER_ID = 'a';
        actual.SEND_NAM = 'a';
        actual.SEND_FNAM = 'a';
        actual.SEND_DATE = Date.newInstance(2000,1,1);
        actual.SEND_TIME = 'a';
        actual.FORWARD_ID = 'a';
        actual.FORW_NAM = 'a';
        actual.FORW_FNAM = 'a';
        actual.FORW_DATE = Date.newInstance(2000,1,1);
        actual.FORW_TIME = 'a';
        actual.REC_ID = 'a';
        actual.REC_NAM = 'a';
        actual.REC_FNAM = 'a';
        actual.REC_DATE = Date.newInstance(2000,1,1);
        actual.REC_TIME = 'a';
        actual.EXPRESS = 'a';
        actual.COPY = 'a';
        actual.BLIND_COPY = 'a';
        actual.NO_FORWARD = 'a';
        actual.NO_PRINT = 'a';
        actual.TO_ANSWER = 'a';
        actual.TO_DO_EXPL = 'a';
        actual.TO_DO_GRP = 'a';
        actual.C_TO_DO = 'a';
        actual.C_IN_PROC = 'a';
        actual.C_DONE = 'a';
        actual.C_EXPRESS = 'a';
        actual.C_COPY = 'a';
        actual.C_BLIND_CP = 'a';
        actual.C_TO_REPLY = 'a';
        actual.C_ANSWERED = 'a';
        actual.C_READ = 'a';
        actual.C_RECEIVER = 'a';
        actual.PROC_TYPE = 'a';
        actual.PROC_NAME = 'a';
        actual.PROC_SYST = 'a';
        actual.PROC_CLINT = 'a';
        actual.SKIP_SCREN = 'a';
        actual.TO_DO_OUT = 'a';
        actual.FREE_DEL = 'a';
        actual.READ = 'a';
        actual.READ_DATE = Date.newInstance(2000,1,1);
        actual.READ_TIME = 'a';
        actual.TO_DO_STAT = 'a';
        actual.STILL_TODO = 'a';
        actual.REPLY_SENT = 'a';
        actual.RESUB_READ = 'a';
        actual.EXPIRY_DAT = Date.newInstance(2000,1,1);
        actual.DOC_SIZE = 'a';
        system.assertEquals('a', actual.DOC_ID);
        system.assertEquals('a', actual.OBJECT_ID);
        system.assertEquals('a', actual.OBJ_TYPE);
        system.assertEquals('a', actual.OBJ_NAME);
        system.assertEquals('a', actual.OBJ_DESCR);
        system.assertEquals('a', actual.OBJ_LANGU);
        system.assertEquals('a', actual.OBJ_SORT);
        system.assertEquals('a', actual.CREATOR_ID);
        system.assertEquals('a', actual.CREAT_NAME);
        system.assertEquals('a', actual.CREAT_FNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.CREAT_DATE);
        system.assertEquals('a', actual.CREAT_TIME);
        system.assertEquals('a', actual.CHANGER_ID);
        system.assertEquals('a', actual.CHANG_NAME);
        system.assertEquals('a', actual.CHANG_FNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.CHANG_DATE);
        system.assertEquals('a', actual.CHANG_TIME);
        system.assertEquals('a', actual.OWNER_ID);
        system.assertEquals('a', actual.OWNER_NAM);
        system.assertEquals('a', actual.OWNER_FNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LAST_ACCES);
        system.assertEquals(Date.newInstance(2000,1,1), actual.OBJ_EXPDAT);
        system.assertEquals('a', actual.SENSITIVTY);
        system.assertEquals('a', actual.OBJ_PRIO);
        system.assertEquals('a', actual.NO_CHANGE);
        system.assertEquals('a', actual.PRIORITY);
        system.assertEquals('a', actual.HISTORY);
        system.assertEquals('a', actual.RESUB);
        system.assertEquals(Date.newInstance(2000,1,1), actual.RESUB_DATE);
        system.assertEquals('a', actual.SENDER_ID);
        system.assertEquals('a', actual.SEND_NAM);
        system.assertEquals('a', actual.SEND_FNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.SEND_DATE);
        system.assertEquals('a', actual.SEND_TIME);
        system.assertEquals('a', actual.FORWARD_ID);
        system.assertEquals('a', actual.FORW_NAM);
        system.assertEquals('a', actual.FORW_FNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.FORW_DATE);
        system.assertEquals('a', actual.FORW_TIME);
        system.assertEquals('a', actual.REC_ID);
        system.assertEquals('a', actual.REC_NAM);
        system.assertEquals('a', actual.REC_FNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.REC_DATE);
        system.assertEquals('a', actual.REC_TIME);
        system.assertEquals('a', actual.EXPRESS);
        system.assertEquals('a', actual.COPY);
        system.assertEquals('a', actual.BLIND_COPY);
        system.assertEquals('a', actual.NO_FORWARD);
        system.assertEquals('a', actual.NO_PRINT);
        system.assertEquals('a', actual.TO_ANSWER);
        system.assertEquals('a', actual.TO_DO_EXPL);
        system.assertEquals('a', actual.TO_DO_GRP);
        system.assertEquals('a', actual.C_TO_DO);
        system.assertEquals('a', actual.C_IN_PROC);
        system.assertEquals('a', actual.C_DONE);
        system.assertEquals('a', actual.C_EXPRESS);
        system.assertEquals('a', actual.C_COPY);
        system.assertEquals('a', actual.C_BLIND_CP);
        system.assertEquals('a', actual.C_TO_REPLY);
        system.assertEquals('a', actual.C_ANSWERED);
        system.assertEquals('a', actual.C_READ);
        system.assertEquals('a', actual.C_RECEIVER);
        system.assertEquals('a', actual.PROC_TYPE);
        system.assertEquals('a', actual.PROC_NAME);
        system.assertEquals('a', actual.PROC_SYST);
        system.assertEquals('a', actual.PROC_CLINT);
        system.assertEquals('a', actual.SKIP_SCREN);
        system.assertEquals('a', actual.TO_DO_OUT);
        system.assertEquals('a', actual.FREE_DEL);
        system.assertEquals('a', actual.READ);
        system.assertEquals(Date.newInstance(2000,1,1), actual.READ_DATE);
        system.assertEquals('a', actual.READ_TIME);
        system.assertEquals('a', actual.TO_DO_STAT);
        system.assertEquals('a', actual.STILL_TODO);
        system.assertEquals('a', actual.REPLY_SENT);
        system.assertEquals('a', actual.RESUB_READ);
        system.assertEquals(Date.newInstance(2000,1,1), actual.EXPIRY_DAT);
        system.assertEquals('a', actual.DOC_SIZE);
    }
    @istest
    private static void testOBJECT_HEADER() {
        ovcSAPGOSGetDocument.OBJECT_HEADER actual = new ovcSAPGOSGetDocument.OBJECT_HEADER();

        actual.LINE = 'a';
        system.assertEquals('a', actual.LINE);
    }
    @istest
    private static void testCONTENTS_HEX() {
        ovcSAPGOSGetDocument.CONTENTS_HEX actual = new ovcSAPGOSGetDocument.CONTENTS_HEX();

        actual.LINE = null;
        system.assertEquals(null, actual.LINE);
    }

    @istest
    private static void testRun() {
        ovcSAPGOSGetDocument request = testSetup();
        ovcSAPGOSGetDocument response = request.run();
        system.assertEquals('a', response.SO_DOCUMENT_READ_API1.DOCUMENT_ID);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static ovcSAPGOSGetDocument testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ovcSAPGOSGetDocument');
        ovcSAPGOSGetDocument request = new ovcSAPGOSGetDocument();
        request.SO_DOCUMENT_READ_API1.DOCUMENT_ID = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ovcSAPGOSGetDocument input = new ovcSAPGOSGetDocument();
        input.SO_DOCUMENT_READ_API1.DOCUMENT_ID = 'a';
        ovcSAPGOSGetDocument actual = (ovcSAPGOSGetDocument)JSON.deserialize(input.serialize(), ovcSAPGOSGetDocument.class);
        system.assertEquals('a', actual.SO_DOCUMENT_READ_API1.DOCUMENT_ID);
    }

    @istest
    private static void testDeserialize() {
        ovcSAPGOSGetDocument output = new ovcSAPGOSGetDocument();
        output.SO_DOCUMENT_READ_API1.DOCUMENT_ID = 'a';

        string s = output.serialize();
        ovcSAPGOSGetDocument actual = ovcSAPGOSGetDocument.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.SO_DOCUMENT_READ_API1.DOCUMENT_ID);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ovcSAPGOSGetDocument actual = ovcSAPGOSGetDocument.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ovcSAPGOSGetDocument actual = ovcSAPGOSGetDocument.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        ovcSAPGOSGetDocument output = new ovcSAPGOSGetDocument();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ovcSAPGOSGetDocument output = new ovcSAPGOSGetDocument();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ovcSAPGOSGetDocument output2 = new ovcSAPGOSGetDocument();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ovcSAPGOSGetDocument output = new ovcSAPGOSGetDocument();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('SO_DOCUMENT_READ_API1'));
        system.assert(keys.contains('FILTER'));
        system.assert(keys.contains('DOCUMENT_DATA'));
        system.assert(keys.contains('OBJECT_HEADER'));
        system.assert(keys.contains('CONTENTS_HEX'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('SO_DOCUMENT_READ_API1', first.name);
    }

    @istest
    private static void testException() {
        ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException e = new ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            ovcSAPGOSGetDocument.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException e) {
            System.assert(true);
        }
        
        try {
            ovcSAPGOSGetDocument output = new ovcSAPGOSGetDocument();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            ovcSAPGOSGetDocument output = new ovcSAPGOSGetDocument();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException e) {
            System.assert(true);
        }

        try {
            ovcSAPGOSGetDocument output = new ovcSAPGOSGetDocument();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            ovcSAPGOSGetDocument.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException e) {
            System.assert(true);
        }
        
        try {
            ovcSAPGOSGetDocument.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ovcSAPGOSGetDocument.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPGOSGetDocument.ovcSAPGOSGetDocumentException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        ovcSAPGOSGetDocument output = new ovcSAPGOSGetDocument();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}