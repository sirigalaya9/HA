global class sapInvoiceListMeta0 {
/* 
 * Generated by Overcast UTC 2024-03-12 09:38:08Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */

    static overcast.Realtime.StructureType SS = overcast.Realtime.StructureType.STRUCTURE;
    static overcast.Realtime.StructureType ST = overcast.Realtime.StructureType.TABLE;

    static overcast.Realtime.Direction DI = overcast.Realtime.Direction.INPUT;
    static overcast.Realtime.Direction DOx = overcast.Realtime.Direction.OUTPUT;
    static overcast.Realtime.Direction DB = overcast.Realtime.Direction.BOTH;
    
    static overcast.Realtime.ApexType TS = overcast.Realtime.ApexType.STRINGX;
    static overcast.Realtime.ApexType TI = overcast.Realtime.ApexType.INTEGERX;
    static overcast.Realtime.ApexType TL = overcast.Realtime.ApexType.LONGX;
    static overcast.Realtime.ApexType TB = overcast.Realtime.ApexType.BOOLEANX;
    static overcast.Realtime.ApexType TD = overcast.Realtime.ApexType.DATEX;
    static overcast.Realtime.ApexType TDT = overcast.Realtime.ApexType.DATETIMEX;
    static overcast.Realtime.ApexType TDC = overcast.Realtime.ApexType.DECIMALX;
    static overcast.Realtime.ApexType TDBL = overcast.Realtime.ApexType.DOUBLEX;
    static overcast.Realtime.ApexType TT = overcast.Realtime.ApexType.TIMEX;
    static overcast.Realtime.ApexType TBLB = overcast.Realtime.ApexType.BLOBX;

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, overcast.Realtime.Direction e) {
        return new overcast.FieldInfo(a, b, c, d, e);
    }

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, Integer e, overcast.Realtime.Direction f) {
        return new overcast.FieldInfo(a, b, c, d, e, f);
    }

    public static Map<String, overcast.TypeInfo> metadata = new Map<String, overcast.TypeInfo> {
        'BAPI_WEBINVOICE_GETLIST' => new overcast.TypeInfo('BAPI_WEBINVOICE_GETLIST', '', SS, DI,
            new Map<String, overcast.FieldInfo> {
                'PARTNER_NUMBER' => fi('PARTNER_NUMBER', 'Partner Number', TS, 10, DI),
                'PARTNER_ROLE' => fi('PARTNER_ROLE', 'Partner function', TS, 2, DI),
                'BILLINGDOC_FROM' => fi('BILLINGDOC_FROM', 'Billing document', TS, 10, DI),
                'BILLINGDOC_TO' => fi('BILLINGDOC_TO', 'Billing document', TS, 10, DI),
                'MAXROWS' => fi('MAXROWS', 'Max. Number of Lines Selected', TI, 10, DI),
                'REFDOC_FROM' => fi('REFDOC_FROM', 'Reference Document', TS, 16, DI),
                'REFDOC_TO' => fi('REFDOC_TO', 'Reference Document', TS, 16, DI),
                'DATE_FROM' => fi('DATE_FROM', 'Billing date', TD, 8, DI),
                'DATE_TO' => fi('DATE_TO', 'Billing date', TD, 8, DI),
                'COMPANYCODE' => fi('COMPANYCODE', 'Company Code', TS, 4, DI),
                'LANGU' => fi('LANGU', 'Language key', TS, 1, DI)
            }
        ),
        'RETURN_x' => new overcast.TypeInfo('RETURN_x', 'Return Parameter', SS, DOx,
            new Map<String, overcast.FieldInfo> {
                'TYPE_x' => fi('TYPE_x', 'Message type', TS, 1, DOx),
                'ID' => fi('ID', 'Message Class', TS, 20, DOx),
                'NUMBER_x' => fi('NUMBER_x', 'Message number', TS, 3, DOx),
                'MESSAGE' => fi('MESSAGE', 'Message text', TS, 220, DOx),
                'LOG_NO' => fi('LOG_NO', 'Log Number', TS, 20, DOx),
                'LOG_MSG_NO' => fi('LOG_MSG_NO', 'Message Number', TS, 6, DOx),
                'MESSAGE_V1' => fi('MESSAGE_V1', 'Message Variable', TS, 50, DOx),
                'MESSAGE_V2' => fi('MESSAGE_V2', 'Message Variable', TS, 50, DOx),
                'MESSAGE_V3' => fi('MESSAGE_V3', 'Message Variable', TS, 50, DOx),
                'MESSAGE_V4' => fi('MESSAGE_V4', 'Message Variable', TS, 50, DOx),
                'PARAMETER' => fi('PARAMETER', 'Parameter Name', TS, 32, DOx),
                'ROW' => fi('ROW', 'Parameter line', TI, 10, DOx),
                'FIELD' => fi('FIELD', 'Field name', TS, 30, DOx),
                'SYSTEM_x' => fi('SYSTEM_x', 'Logical system', TS, 10, DOx)
            }
        ),
        'WEBINVOICEDOCUMENTLIST' => new overcast.TypeInfo('WEBINVOICEDOCUMENTLIST', 'Table of Billing Documents', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'BILLINGDOC' => fi('BILLINGDOC', 'Billing Doc.', TS, 10, DB),
                'BILL_TYPE' => fi('BILL_TYPE', 'Billing Type', TS, 4, DB),
                'BILL_TYPE_TEXT' => fi('BILL_TYPE_TEXT', 'Description', TS, 20, DB),
                'BILLCATEG' => fi('BILLCATEG', 'BillingCategory', TS, 1, DB),
                'BILLCATEG_TEXT' => fi('BILLCATEG_TEXT', 'Short text', TS, 60, DB),
                'SD_DOC_CAT' => fi('SD_DOC_CAT', 'Document cat.', TS, 1, DB),
                'SD_DOC_CAT_TEXT' => fi('SD_DOC_CAT_TEXT', 'Short text', TS, 60, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Doc. Currency', TS, 5, DB),
                'CURRENCY_ISO' => fi('CURRENCY_ISO', 'ISO Code', TS, 3, DB),
                'NET_VALUE' => fi('NET_VALUE', 'Net Value', TDC, 15,2, DB),
                'SOLD_TO' => fi('SOLD_TO', 'Sold-To Party', TS, 10, DB),
                'PAYER' => fi('PAYER', 'Payer', TS, 10, DB),
                'TAX_AMOUNT' => fi('TAX_AMOUNT', 'Tax amount', TDC, 13,2, DB),
                'CANCELLED' => fi('CANCELLED', 'Cancelled', TS, 1, DB),
                'BILL_DATE' => fi('BILL_DATE', 'Billing Date', TD, 8, DB),
                'INCOTERMS1' => fi('INCOTERMS1', 'Incoterms', TS, 3, DB),
                'INCOTERMS1_TEXT' => fi('INCOTERMS1_TEXT', 'Description', TS, 30, DB),
                'INCOTERMS2' => fi('INCOTERMS2', 'Incoterms 2', TS, 28, DB),
                'PMNTTRMS' => fi('PMNTTRMS', 'Pyt Terms', TS, 4, DB),
                'PMNTTRMS_TEXT' => fi('PMNTTRMS_TEXT', 'Description', TS, 30, DB),
                'COMP_CODE' => fi('COMP_CODE', 'Company Code', TS, 4, DB),
                'COMP_NAME' => fi('COMP_NAME', 'Company Name', TS, 25, DB),
                'REFERENCE' => fi('REFERENCE', 'Reference no.', TS, 16, DB),
                'BLINE_DATE' => fi('BLINE_DATE', 'Baseline Date', TD, 8, DB),
                'DSCT_DATE1' => fi('DSCT_DATE1', 'Cash discount 1', TD, 8, DB),
                'DSCT_DATE2' => fi('DSCT_DATE2', 'Cash discount 2', TD, 8, DB),
                'NET_DATE' => fi('NET_DATE', 'Net date', TD, 8, DB),
                'DSCT_PCT1' => fi('DSCT_PCT1', 'Disc.percent 1', TDC, 5,3, DB),
                'DSCT_PCT2' => fi('DSCT_PCT2', 'Disc.percent 2', TDC, 5,3, DB),
                'INCOTERMSV' => fi('INCOTERMSV', 'Inco. Version', TS, 4, DB),
                'INCOTERMS2L' => fi('INCOTERMS2L', 'Inco. Location1', TS, 70, DB),
                'INCOTERMS3L' => fi('INCOTERMS3L', 'Inco. Location2', TS, 70, DB),
                'SD_DOC_CAT_LONG' => fi('SD_DOC_CAT_LONG', 'Document Cat.', TS, 4, DB),
                'INCOTERMSV_TEXT' => fi('INCOTERMSV_TEXT', 'Description', TS, 30, DB)
            }
        )
    };
}