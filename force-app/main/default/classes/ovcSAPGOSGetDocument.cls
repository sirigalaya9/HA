global class ovcSAPGOSGetDocument extends overcast.Realtime.ScenarioExtension implements overcast.Realtime.Runnable {
/* 
 * Generated by Overcast UTC 2024-03-18 07:45:19Z.
 * This class belongs to the ovcSAPGOSGetDocument Real-time Integration Scenario.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
     global class ovcSAPGOSGetDocumentException extends overcast.Realtime.ScenarioException {
         private List<String> messages;
        global override List<String> getMessages() {
            return messages;
        }
        public void setMessages(List<String> messages) {
            this.messages = messages;
        }

        private List<String> backendMessages;
        global override List<String> getBackendMessages() {
            return backendMessages;
        }
        public void setBackendMessages(List<String> backendMessages) {
            this.backendMessages = backendMessages;
        }

        public ovcSAPGOSGetDocumentException(List<object> messages, List<object> backendMessages) {
            super(string.join(messages, ';'));
            this.messages = new List<String>();
            for (object message : messages) {
                this.messages.add((String)message);
            }
            this.backendMessages = new List<String>();
            if (backendMessages != null) {
                for (object message : backendMessages) {
                    this.backendMessages.add((String)message);
                }
            }
        }
    }
    global ovcSAPGOSGetDocument() {
        this.SO_DOCUMENT_READ_API1 = new ovcSAPGOSGetDocument.SO_DOCUMENT_READ_API1();
        this.FILTER = new ovcSAPGOSGetDocument.FILTER();
        this.DOCUMENT_DATA = new ovcSAPGOSGetDocument.DOCUMENT_DATA();
        this.OBJECT_HEADER = new list<ovcSAPGOSGetDocument.OBJECT_HEADER>();
        this.CONTENTS_HEX = new list<ovcSAPGOSGetDocument.CONTENTS_HEX>();
    }

    public class SO_DOCUMENT_READ_API1 {
        @AuraEnabled public String DOCUMENT_ID { get; set; }

        public SO_DOCUMENT_READ_API1() {}
    }

    public class FILTER {
        @AuraEnabled public String SEND_INFO { get; set; }
        @AuraEnabled public String NO_CONTENT { get; set; }
        @AuraEnabled public String REC_LIST { get; set; }

        public FILTER() {}
    }

    public class DOCUMENT_DATA {
        @AuraEnabled public String DOC_ID { get; set; }
        @AuraEnabled public String OBJECT_ID { get; set; }
        @AuraEnabled public String OBJ_TYPE { get; set; }
        @AuraEnabled public String OBJ_NAME { get; set; }
        @AuraEnabled public String OBJ_DESCR { get; set; }
        @AuraEnabled public String OBJ_LANGU { get; set; }
        @AuraEnabled public String OBJ_SORT { get; set; }
        @AuraEnabled public String CREATOR_ID { get; set; }
        @AuraEnabled public String CREAT_NAME { get; set; }
        @AuraEnabled public String CREAT_FNAM { get; set; }
        @AuraEnabled public Date CREAT_DATE { get; set; }
        @AuraEnabled public String CREAT_TIME { get; set; }
        @AuraEnabled public String CHANGER_ID { get; set; }
        @AuraEnabled public String CHANG_NAME { get; set; }
        @AuraEnabled public String CHANG_FNAM { get; set; }
        @AuraEnabled public Date CHANG_DATE { get; set; }
        @AuraEnabled public String CHANG_TIME { get; set; }
        @AuraEnabled public String OWNER_ID { get; set; }
        @AuraEnabled public String OWNER_NAM { get; set; }
        @AuraEnabled public String OWNER_FNAM { get; set; }
        @AuraEnabled public Date LAST_ACCES { get; set; }
        @AuraEnabled public Date OBJ_EXPDAT { get; set; }
        @AuraEnabled public String SENSITIVTY { get; set; }
        @AuraEnabled public String OBJ_PRIO { get; set; }
        @AuraEnabled public String NO_CHANGE { get; set; }
        @AuraEnabled public String PRIORITY { get; set; }
        @AuraEnabled public String HISTORY { get; set; }
        @AuraEnabled public String RESUB { get; set; }
        @AuraEnabled public Date RESUB_DATE { get; set; }
        @AuraEnabled public String SENDER_ID { get; set; }
        @AuraEnabled public String SEND_NAM { get; set; }
        @AuraEnabled public String SEND_FNAM { get; set; }
        @AuraEnabled public Date SEND_DATE { get; set; }
        @AuraEnabled public String SEND_TIME { get; set; }
        @AuraEnabled public String FORWARD_ID { get; set; }
        @AuraEnabled public String FORW_NAM { get; set; }
        @AuraEnabled public String FORW_FNAM { get; set; }
        @AuraEnabled public Date FORW_DATE { get; set; }
        @AuraEnabled public String FORW_TIME { get; set; }
        @AuraEnabled public String REC_ID { get; set; }
        @AuraEnabled public String REC_NAM { get; set; }
        @AuraEnabled public String REC_FNAM { get; set; }
        @AuraEnabled public Date REC_DATE { get; set; }
        @AuraEnabled public String REC_TIME { get; set; }
        @AuraEnabled public String EXPRESS { get; set; }
        @AuraEnabled public String COPY { get; set; }
        @AuraEnabled public String BLIND_COPY { get; set; }
        @AuraEnabled public String NO_FORWARD { get; set; }
        @AuraEnabled public String NO_PRINT { get; set; }
        @AuraEnabled public String TO_ANSWER { get; set; }
        @AuraEnabled public String TO_DO_EXPL { get; set; }
        @AuraEnabled public String TO_DO_GRP { get; set; }
        @AuraEnabled public String C_TO_DO { get; set; }
        @AuraEnabled public String C_IN_PROC { get; set; }
        @AuraEnabled public String C_DONE { get; set; }
        @AuraEnabled public String C_EXPRESS { get; set; }
        @AuraEnabled public String C_COPY { get; set; }
        @AuraEnabled public String C_BLIND_CP { get; set; }
        @AuraEnabled public String C_TO_REPLY { get; set; }
        @AuraEnabled public String C_ANSWERED { get; set; }
        @AuraEnabled public String C_READ { get; set; }
        @AuraEnabled public String C_RECEIVER { get; set; }
        @AuraEnabled public String PROC_TYPE { get; set; }
        @AuraEnabled public String PROC_NAME { get; set; }
        @AuraEnabled public String PROC_SYST { get; set; }
        @AuraEnabled public String PROC_CLINT { get; set; }
        @AuraEnabled public String SKIP_SCREN { get; set; }
        @AuraEnabled public String TO_DO_OUT { get; set; }
        @AuraEnabled public String FREE_DEL { get; set; }
        @AuraEnabled public String READ { get; set; }
        @AuraEnabled public Date READ_DATE { get; set; }
        @AuraEnabled public String READ_TIME { get; set; }
        @AuraEnabled public String TO_DO_STAT { get; set; }
        @AuraEnabled public String STILL_TODO { get; set; }
        @AuraEnabled public String REPLY_SENT { get; set; }
        @AuraEnabled public String RESUB_READ { get; set; }
        @AuraEnabled public Date EXPIRY_DAT { get; set; }
        @AuraEnabled public String DOC_SIZE { get; set; }

        public DOCUMENT_DATA() {}
    }

    public class OBJECT_HEADER {
        @AuraEnabled public String LINE { get; set; }

        public OBJECT_HEADER() {}
    }

    public class CONTENTS_HEX {
        @AuraEnabled public Blob LINE { get; set; }

        public CONTENTS_HEX() {}
    }

    @AuraEnabled public ovcSAPGOSGetDocument.SO_DOCUMENT_READ_API1 SO_DOCUMENT_READ_API1 { get; set; }
    @AuraEnabled public ovcSAPGOSGetDocument.FILTER FILTER { get; set; }
    @AuraEnabled public ovcSAPGOSGetDocument.DOCUMENT_DATA DOCUMENT_DATA { get; set; }
    @AuraEnabled public list<ovcSAPGOSGetDocument.OBJECT_HEADER> OBJECT_HEADER { get; set; }
    @AuraEnabled public list<ovcSAPGOSGetDocument.CONTENTS_HEX> CONTENTS_HEX { get; set; }

    public string inputSetName { get; set; }

    public ovcSAPGOSGetDocument run() {
        overcast.Logger logger1 = createLogger();
        try {
            ovcSAPGOSGetDocument response = this.run(logger1, null);
            logger1.commitToDatabase();
            return response;
        }
        catch (Exception e) {
            logger1.addLog('ERROR', e.getTypeName() + ': ' + e.getMessage());
            logger1.setStatusCode(300);
            logger1.commitToDatabase();
            throw e;
        }
    }
    
    public ovcSAPGOSGetDocument run(overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = setup(logger, namedCredential);

        if (Test.isRunningTest()) {
            if (this.dynamicBody != null) {
                return this;
            }
            return ovcSAPGOSGetDocument.deserialize(this.testResponse);
        }
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);
        
        return ovcSAPGOSGetDocument.deserialize(sh.Response);
    }

    public string runAsync(overcast.Logger logger, string namedCredential, Continuation con) {
        overcast.SynchronousHandler sh = setup(logger, namedCredential);

        sh.ContinuationWebRequest = new HttpRequest();
        overcast.EpgwController.ExecuteScenarioSynchronously(sh, logger);

        return con.addHttpRequest(sh.ContinuationWebRequest);
    }

    public static ovcSAPGOSGetDocument handleAsyncResponse(HttpResponse resp) {
        return ovcSAPGOSGetDocument.deserialize(resp.getBody());
    }

    public static ovcSAPGOSGetDocument getAsyncResponse(String requestLabel) {
        HttpResponse response = Continuation.getResponse(requestLabel);
        return handleAsyncResponse(response);
    }

    private overcast.SynchronousHandler setup(overcast.Logger logger, string namedCredential) {
        overcast.SynchronousHandler sh = overcast.SynchronousHandler.CreateFromName('ovcSAPGOSGetDocument');

        sh.InputSetName = this.inputSetName;
        sh.InputJson = this.serialize();
        sh.NamedCredential = namedCredential;
        if (logger != null) {
            logger.setInputSetName(String.isBlank(this.inputSetName) ? sh.CorrelationId : this.inputSetName);
            logger.setIdemId(sh.CorrelationId);
        }
                sh.loadExtensions(this);

        return sh;
    }

    private static overcast.Logger createLogger() {
        return new overcast.Logger('ovcSAPGOSGetDocument');
    }

    global override string getBackendMessage() {
        return this.backendMessage;
    }

    global string serialize() {
        if (dynamicBody != null) {
            return JSON.serialize(dynamicBody, true);
        }
        return JSON.serialize(this, true);
    }

        
    public class BodyContents extends overcast.Realtime.ContentsBody {
        public ovcSAPGOSGetDocument output { get; set; }
    }

    private static ovcSAPGOSGetDocument.BodyContents getBodyContents(string responseData) {
        if (string.isblank(responseData)) {
            throw new ovcSAPGOSGetDocumentException('Response null for ovcSAPGOSGetDocument request.');
        }

        ovcSAPGOSGetDocument.BodyContents contents = (ovcSAPGOSGetDocument.BodyContents) JSON.deserialize(responseData, ovcSAPGOSGetDocument.BodyContents.class);
        if (contents.error != null) {
            ovcSAPGOSGetDocumentException ex = new ovcSAPGOSGetDocumentException(string.join(contents.error, ';'));
            ex.setMessages(contents.error);
            ex.setBackendMessages(contents.backendErrorMessages == null ? new List<String>() : contents.backendErrorMessages);
            throw ex;
        }
        return contents;
    }

    public static ovcSAPGOSGetDocument deserialize(string responsedata) {
        if (overcast.Globals.IsOCF) {
            ovcSAPGOSGetDocument obj = new ovcSAPGOSGetDocument();
            obj.loadAsyncResponse(responsedata);
            return obj;
        }
        ovcSAPGOSGetDocument.BodyContents contents = getBodyContents(responsedata);
        contents.output.backendMessage = contents.backendMessage;

        return contents.output;
    }

    private static map<string, string> getOutputData(string responseData) {
        if (string.isblank(responsedata)) {
            throw new ovcSAPGOSGetDocumentException('Response null for ovcSAPGOSGetDocument request.');
        }

        map<string, string> m = new map<string, string>();

        JSONParser jresponse = JSON.createParser(responsedata);
        jresponse.nextValue();

        boolean hasOutput = false;
        string[] errors = null;
        string[] backendErrorMessages = null;
        while (jresponse.nextValue() != JSONToken.END_OBJECT && jresponse.getCurrentToken() != null) {
            if (jresponse.getCurrentName() == 'output') {
                jresponse.skipChildren();
                hasOutput = true;
                continue;
            }
            if (jresponse.getCurrentName() == 'backendMessage') {
                m.put('backendMessage', (string)jresponse.readValueAs(string.class));
                continue;
            }
            if (jresponse.getCurrentName() == 'error') {
                errors = (string[])jresponse.readValueAs(list<string>.class);
                jresponse.skipChildren();
                continue;
            }
            if (jresponse.getCurrentName() == 'backendErrorMessages') {
                backendErrorMessages = (string[])jresponse.readValueAs(list<string>.class);
                jresponse.skipChildren();
                continue;
            }
        }
        if (errors != null) {
            ovcSAPGOSGetDocumentException ex = new ovcSAPGOSGetDocumentException(string.join(errors, ';'));
            ex.setMessages(errors);
            ex.setBackendMessages(backendErrorMessages == null ? new List<String>() : backendErrorMessages);
            throw ex;
        }
        if (!hasOutput) {
            throw new ovcSAPGOSGetDocumentException('Malformed response for ovcSAPGOSGetDocument request.');
        }
        integer start = responsedata.indexOf(':') + 1;
        integer lastIndex = m.get('backendMessage') == null
            ? responsedata.length() - 2
            : responsedata.lastIndexOf('backendMessage');
        integer finish = responsedata.lastIndexOf('}', lastIndex) + 1;
        m.put('output', responseData.substring(start, finish));
        return m;
    }


    public transient string testResponse;
    private transient string outputData;
    private transient string backendMessage;

    private transient map<string, overcast.TypeInfo> metadata;
    private transient map<string, object> dynamicBody;

    global void loadAsyncResponse(string responseBody) {
        if (overcast.Globals.IsOCF) {
            if (string.isblank(responseBody)) {
                throw new ovcSAPGOSGetDocumentException('Response null for ovcSAPGOSGetDocument request.');
            }
            map<string, object> responseObj = (map<string, object>)JSON.deserializeUntyped(responseBody);
            if (responseObj.containsKey('error')) {
                throw new ovcSAPGOSGetDocumentException((List<object>)responseObj.get('error'), (List<object>)responseObj.get('backendErrorMessages'));
            }
            backendMessage = (string)responseObj.get('backendMessage');
            dynamicBody = (map<string, object>)responseObj.get('output');
            return;
        }

        map<string, string> m = getOutputData(responseBody);
        outputData = m.get('output');
        backendMessage = m.get('backendMessage');
        
        if (outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
    }

    global string getTopTypeName() {
        return 'SO_DOCUMENT_READ_API1';
    }

    global void set(string typeName, object records) {
        if (typeName == '@testResponse') {
            dynamicBody = (map<string, object>)records;
            return;
        }
        if (dynamicBody == null) {
            dynamicBody = new map<string, object>();
        }
        
        dynamicBody.put(typeName, records);
    }
    
    global object get(string typeName) {
        if (dynamicBody == null && outputData != null) {
            dynamicBody = (map<string, object>)JSON.deserializeUntyped(outputData);
        }
        if (dynamicBody == null) { 
            return null;
        }
        return dynamicBody.get(typeName);
    }

    global map<string, overcast.TypeInfo> getMetadata() {
        if (metadata == null) {
            metadata = new Map<String, overcast.TypeInfo>();
            metadata.putAll(ovcSAPGOSGetDocumentMeta0.metadata);
        }
        return metadata;
    }

}