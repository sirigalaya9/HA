/* 
 * Generated by Overcast UTC 2024-03-12 08:26:19Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class haefeleGeneralMaterialDataTest {
    @istest
    private static void testhaefeleGeneralMaterialData() {
        haefeleGeneralMaterialData actual = new haefeleGeneralMaterialData();
        system.assertNotEquals(null, actual.MARA);
    }

    @istest
    private static void testMARA() {
        haefeleGeneralMaterialData.MARA actual = new haefeleGeneralMaterialData.MARA();

        actual.MATNR = 'a';
        actual.ERSDA = Date.newInstance(2000,1,1);
        actual.ERNAM = 'a';
        actual.LAEDA = Date.newInstance(2000,1,1);
        actual.AENAM = 'a';
        actual.LVORM = 'a';
        actual.MEINS = 'a';
        actual.BSTME = 'a';
        actual.PRDHA = 'a';
        actual.MSTAE = 'a';
        system.assertEquals('a', actual.MATNR);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERSDA);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LAEDA);
        system.assertEquals('a', actual.AENAM);
        system.assertEquals('a', actual.LVORM);
        system.assertEquals('a', actual.MEINS);
        system.assertEquals('a', actual.BSTME);
        system.assertEquals('a', actual.PRDHA);
        system.assertEquals('a', actual.MSTAE);
    }
    @istest
    private static void testrunQuery() {
        haefeleGeneralMaterialData request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        haefeleGeneralMaterialData response = request.runQuery(query1);
        system.assertEquals('a', response.MARA[0].MATNR);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static haefeleGeneralMaterialData testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('haefeleGeneralMaterialData');
        haefeleGeneralMaterialData request = new haefeleGeneralMaterialData();
        haefeleGeneralMaterialData.MARA value1 = new haefeleGeneralMaterialData.MARA();
        value1.MATNR = 'a';
        request.MARA.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        haefeleGeneralMaterialData input = new haefeleGeneralMaterialData();
        haefeleGeneralMaterialData.MARA value1 = new haefeleGeneralMaterialData.MARA();
        value1.MATNR = 'a';
        input.MARA.add(value1);
        haefeleGeneralMaterialData actual = (haefeleGeneralMaterialData)JSON.deserialize(input.serialize(), haefeleGeneralMaterialData.class);
        system.assertEquals('a', actual.MARA[0].MATNR);
    }

    @istest
    private static void testDeserialize() {
        haefeleGeneralMaterialData output = new haefeleGeneralMaterialData();
        haefeleGeneralMaterialData.MARA value1 = new haefeleGeneralMaterialData.MARA();
        value1.MATNR = 'a';
        output.MARA.add(value1);

        string s = output.serialize();
        haefeleGeneralMaterialData actual = haefeleGeneralMaterialData.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.MARA[0].MATNR);
    }

    @istest
    private static void testDeserializeError() {
        try {
            haefeleGeneralMaterialData actual = haefeleGeneralMaterialData.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (haefeleGeneralMaterialData.haefeleGeneralMaterialDataException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            haefeleGeneralMaterialData actual = haefeleGeneralMaterialData.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (haefeleGeneralMaterialData.haefeleGeneralMaterialDataException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        haefeleGeneralMaterialData output = new haefeleGeneralMaterialData();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        haefeleGeneralMaterialData output = new haefeleGeneralMaterialData();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        haefeleGeneralMaterialData output2 = new haefeleGeneralMaterialData();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        haefeleGeneralMaterialData output = new haefeleGeneralMaterialData();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('MARA'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('MARA', first.name);
    }

    @istest
    private static void testException() {
        haefeleGeneralMaterialData.haefeleGeneralMaterialDataException e = new haefeleGeneralMaterialData.haefeleGeneralMaterialDataException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            haefeleGeneralMaterialData.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleGeneralMaterialData.haefeleGeneralMaterialDataException e) {
            System.assert(true);
        }
        
        try {
            haefeleGeneralMaterialData output = new haefeleGeneralMaterialData();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleGeneralMaterialData.haefeleGeneralMaterialDataException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            haefeleGeneralMaterialData output = new haefeleGeneralMaterialData();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleGeneralMaterialData.haefeleGeneralMaterialDataException e) {
            System.assert(true);
        }

        try {
            haefeleGeneralMaterialData output = new haefeleGeneralMaterialData();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleGeneralMaterialData.haefeleGeneralMaterialDataException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            haefeleGeneralMaterialData.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleGeneralMaterialData.haefeleGeneralMaterialDataException e) {
            System.assert(true);
        }
        
        try {
            haefeleGeneralMaterialData.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleGeneralMaterialData.haefeleGeneralMaterialDataException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            haefeleGeneralMaterialData.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleGeneralMaterialData.haefeleGeneralMaterialDataException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        haefeleGeneralMaterialData output = new haefeleGeneralMaterialData();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}