/* 
 * Generated by Overcast UTC 2024-03-12 09:34:02Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class RT_SAP_Customer_CreateTest {
    @istest
    private static void testRT_SAP_Customer_Create() {
        RT_SAP_Customer_Create actual = new RT_SAP_Customer_Create();
        system.assertNotEquals(null, actual.Z_HWWPIWS_CREATE_CUSTOMER);
        system.assertNotEquals(null, actual.IS_COMPANYINFO);
        system.assertNotEquals(null, actual.IS_CRM);
        system.assertNotEquals(null, actual.ET_MSG_OUT);
    }

    @istest
    private static void testZ_HWWPIWS_CREATE_CUSTOMER() {
        RT_SAP_Customer_CreateZHWWPIWSCREATECUST actual = new RT_SAP_Customer_CreateZHWWPIWSCREATECUST();

        actual.I_SOURCE = 'a';
        actual.I_SESSION = 'a';
        actual.I_VKORG = 'a';
        actual.E_KUNNR = 'a';
        system.assertEquals('a', actual.I_SOURCE);
        system.assertEquals('a', actual.I_SESSION);
        system.assertEquals('a', actual.I_VKORG);
        system.assertEquals('a', actual.E_KUNNR);
    }
    @istest
    private static void testIS_COMPANYINFO() {
        RT_SAP_Customer_CreateIS_COMPANYINFO actual = new RT_SAP_Customer_CreateIS_COMPANYINFO();

        actual.NAME = 'a';
        actual.STREET = 'a';
        actual.HOUSE_NO = 'a';
        actual.DISTRICT = 'a';
        actual.POSTL_COD1 = 'a';
        actual.CITY = 'a';
        actual.COUNTRY = 'a';
        actual.TELEPHONE = 'a';
        actual.FAX = 'a';
        actual.E_MAIL = 'a';
        actual.LANGU_ISO = 'a';
        actual.ZZHWW_PINNR = 'a';
        actual.STCEG = 'a';
        actual.TITLE_P = 'a';
        actual.FIRSTNAME = 'a';
        actual.LASTNAME = 'a';
        actual.TELEPHONE_CONTACT = 'a';
        actual.MOBILE_CONTACT = 'a';
        actual.E_MAIL_CONTACT = 'a';
        actual.KVGR1 = 'a';
        actual.ZZHWW_CUSCLAS_MSEG = 'a';
        actual.STCD1 = 'a';
        actual.ZZHWW_CUSCLAS_CSEG_1 = 'a';
        actual.NAME2 = 'a';
        actual.REGION = 'a';
        actual.STREET2 = 'a';
        actual.STREET3 = 'a';
        actual.STREET4 = 'a';
        actual.STREET5 = 'a';
        actual.JMZAH = 'a';
        actual.STCD6 = 'a';
        actual.STCD2 = 'a';
        actual.STCD3 = 'a';
        actual.STCD4 = 'a';
        actual.STCD5 = 'a';
        system.assertEquals('a', actual.NAME);
        system.assertEquals('a', actual.STREET);
        system.assertEquals('a', actual.HOUSE_NO);
        system.assertEquals('a', actual.DISTRICT);
        system.assertEquals('a', actual.POSTL_COD1);
        system.assertEquals('a', actual.CITY);
        system.assertEquals('a', actual.COUNTRY);
        system.assertEquals('a', actual.TELEPHONE);
        system.assertEquals('a', actual.FAX);
        system.assertEquals('a', actual.E_MAIL);
        system.assertEquals('a', actual.LANGU_ISO);
        system.assertEquals('a', actual.ZZHWW_PINNR);
        system.assertEquals('a', actual.STCEG);
        system.assertEquals('a', actual.TITLE_P);
        system.assertEquals('a', actual.FIRSTNAME);
        system.assertEquals('a', actual.LASTNAME);
        system.assertEquals('a', actual.TELEPHONE_CONTACT);
        system.assertEquals('a', actual.MOBILE_CONTACT);
        system.assertEquals('a', actual.E_MAIL_CONTACT);
        system.assertEquals('a', actual.KVGR1);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_MSEG);
        system.assertEquals('a', actual.STCD1);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_CSEG_1);
        system.assertEquals('a', actual.NAME2);
        system.assertEquals('a', actual.REGION);
        system.assertEquals('a', actual.STREET2);
        system.assertEquals('a', actual.STREET3);
        system.assertEquals('a', actual.STREET4);
        system.assertEquals('a', actual.STREET5);
        system.assertEquals('a', actual.JMZAH);
        system.assertEquals('a', actual.STCD6);
        system.assertEquals('a', actual.STCD2);
        system.assertEquals('a', actual.STCD3);
        system.assertEquals('a', actual.STCD4);
        system.assertEquals('a', actual.STCD5);
    }
    @istest
    private static void testIS_CRM() {
        RT_SAP_Customer_CreateIS_CRM actual = new RT_SAP_Customer_CreateIS_CRM();

        actual.NAME = 'a';
        actual.NAME2 = 'a';
        actual.STREET = 'a';
        actual.STREET2 = 'a';
        actual.STREET3 = 'a';
        actual.HOUSE_NUM = 'a';
        actual.PSTLZ = 'a';
        actual.ORT01 = 'a';
        actual.REGION = 'a';
        actual.LAND1 = 'a';
        actual.LANGU_ISO = 'a';
        actual.TELF1 = 'a';
        actual.TELFX = 'a';
        actual.SMTP_ADDR = 'a';
        actual.STCEG = 'a';
        actual.JMZAH = 'a';
        actual.JMJAH = 'a';
        actual.KNURL = 'a';
        actual.VKBUR = 'a';
        actual.KVGR2 = 'a';
        actual.ZZHWW_CUSCLAS_MSEG = 'a';
        actual.ZZHWW_CUSCLAS_CSEG_1 = 'a';
        actual.ZZHWW_CUSCLAS_CSEG_2 = 'a';
        actual.ZZHWW_CUSCLAS_CSEG_3 = 'a';
        actual.ZZHWW_CUSCLAS_PERC_1 = 'a';
        actual.ZZHWW_CUSCLAS_PERC_2 = 'a';
        actual.ZZHWW_CUSCLAS_PERC_3 = 'a';
        actual.ZZHWW_CUSCLAS_CLASS_1 = 'a';
        actual.ZZHWW_CUSCLAS_CLASS_2 = 'a';
        actual.ZZHWW_CUSCLAS_CLASS_3 = 'a';
        actual.STREET4 = 'a';
        actual.STREET5 = 'a';
        actual.PHONE_NUMBER_COUNTRY = 'a';
        actual.FAX_NUMBER_COUNTRY = 'a';
        actual.TEL_EXTENS = 'a';
        actual.FAX_EXTENS = 'a';
        system.assertEquals('a', actual.NAME);
        system.assertEquals('a', actual.NAME2);
        system.assertEquals('a', actual.STREET);
        system.assertEquals('a', actual.STREET2);
        system.assertEquals('a', actual.STREET3);
        system.assertEquals('a', actual.HOUSE_NUM);
        system.assertEquals('a', actual.PSTLZ);
        system.assertEquals('a', actual.ORT01);
        system.assertEquals('a', actual.REGION);
        system.assertEquals('a', actual.LAND1);
        system.assertEquals('a', actual.LANGU_ISO);
        system.assertEquals('a', actual.TELF1);
        system.assertEquals('a', actual.TELFX);
        system.assertEquals('a', actual.SMTP_ADDR);
        system.assertEquals('a', actual.STCEG);
        system.assertEquals('a', actual.JMZAH);
        system.assertEquals('a', actual.JMJAH);
        system.assertEquals('a', actual.KNURL);
        system.assertEquals('a', actual.VKBUR);
        system.assertEquals('a', actual.KVGR2);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_MSEG);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_CSEG_1);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_CSEG_2);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_CSEG_3);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_PERC_1);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_PERC_2);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_PERC_3);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_CLASS_1);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_CLASS_2);
        system.assertEquals('a', actual.ZZHWW_CUSCLAS_CLASS_3);
        system.assertEquals('a', actual.STREET4);
        system.assertEquals('a', actual.STREET5);
        system.assertEquals('a', actual.PHONE_NUMBER_COUNTRY);
        system.assertEquals('a', actual.FAX_NUMBER_COUNTRY);
        system.assertEquals('a', actual.TEL_EXTENS);
        system.assertEquals('a', actual.FAX_EXTENS);
    }
    @istest
    private static void testET_MSG_OUT() {
        RT_SAP_Customer_CreateET_MSG_OUT actual = new RT_SAP_Customer_CreateET_MSG_OUT();

        actual.LFDNR = 'a';
        actual.TYPE_x = 'a';
        actual.ID = 'a';
        actual.NUMBER_x = 'a';
        actual.MESSAGE = 'a';
        actual.LOG_NO = 'a';
        actual.LOG_MSG_NO = 'a';
        actual.MESSAGE_V1 = 'a';
        actual.MESSAGE_V2 = 'a';
        actual.MESSAGE_V3 = 'a';
        actual.MESSAGE_V4 = 'a';
        actual.PARAMETER = 'a';
        actual.ROW = 0;
        actual.FIELD = 'a';
        actual.SYSTEM_x = 'a';
        system.assertEquals('a', actual.LFDNR);
        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.NUMBER_x);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
        system.assertEquals('a', actual.PARAMETER);
        system.assertEquals(0, actual.ROW);
        system.assertEquals('a', actual.FIELD);
        system.assertEquals('a', actual.SYSTEM_x);
    }

    @istest
    private static void testRun() {
        RT_SAP_Customer_Create request = testSetup();
        RT_SAP_Customer_Create response = request.run();
        system.assertEquals('a', response.Z_HWWPIWS_CREATE_CUSTOMER.I_SOURCE);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static RT_SAP_Customer_Create testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('RT_SAP_Customer_Create');
        RT_SAP_Customer_Create request = new RT_SAP_Customer_Create();
        request.Z_HWWPIWS_CREATE_CUSTOMER.I_SOURCE = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        RT_SAP_Customer_Create input = new RT_SAP_Customer_Create();
        input.Z_HWWPIWS_CREATE_CUSTOMER.I_SOURCE = 'a';
        RT_SAP_Customer_Create actual = (RT_SAP_Customer_Create)JSON.deserialize(input.serialize(), RT_SAP_Customer_Create.class);
        system.assertEquals('a', actual.Z_HWWPIWS_CREATE_CUSTOMER.I_SOURCE);
    }

    @istest
    private static void testDeserialize() {
        RT_SAP_Customer_Create output = new RT_SAP_Customer_Create();
        output.Z_HWWPIWS_CREATE_CUSTOMER.I_SOURCE = 'a';

        string s = output.serialize();
        RT_SAP_Customer_Create actual = RT_SAP_Customer_Create.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.Z_HWWPIWS_CREATE_CUSTOMER.I_SOURCE);
    }

    @istest
    private static void testDeserializeError() {
        try {
            RT_SAP_Customer_Create actual = RT_SAP_Customer_Create.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (RT_SAP_Customer_Create.RT_SAP_Customer_CreateException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            RT_SAP_Customer_Create actual = RT_SAP_Customer_Create.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (RT_SAP_Customer_Create.RT_SAP_Customer_CreateException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        RT_SAP_Customer_Create output = new RT_SAP_Customer_Create();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        RT_SAP_Customer_Create output = new RT_SAP_Customer_Create();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        RT_SAP_Customer_Create output2 = new RT_SAP_Customer_Create();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        RT_SAP_Customer_Create output = new RT_SAP_Customer_Create();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('Z_HWWPIWS_CREATE_CUSTOMER'));
        system.assert(keys.contains('IS_COMPANYINFO'));
        system.assert(keys.contains('IS_CRM'));
        system.assert(keys.contains('ET_MSG_OUT'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('Z_HWWPIWS_CREATE_CUSTOMER', first.name);
    }

    @istest
    private static void testException() {
        RT_SAP_Customer_Create.RT_SAP_Customer_CreateException e = new RT_SAP_Customer_Create.RT_SAP_Customer_CreateException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            RT_SAP_Customer_Create.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (RT_SAP_Customer_Create.RT_SAP_Customer_CreateException e) {
            System.assert(true);
        }
        
        try {
            RT_SAP_Customer_Create output = new RT_SAP_Customer_Create();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (RT_SAP_Customer_Create.RT_SAP_Customer_CreateException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            RT_SAP_Customer_Create output = new RT_SAP_Customer_Create();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (RT_SAP_Customer_Create.RT_SAP_Customer_CreateException e) {
            System.assert(true);
        }

        try {
            RT_SAP_Customer_Create output = new RT_SAP_Customer_Create();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (RT_SAP_Customer_Create.RT_SAP_Customer_CreateException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            RT_SAP_Customer_Create.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (RT_SAP_Customer_Create.RT_SAP_Customer_CreateException e) {
            System.assert(true);
        }
        
        try {
            RT_SAP_Customer_Create.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (RT_SAP_Customer_Create.RT_SAP_Customer_CreateException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            RT_SAP_Customer_Create.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (RT_SAP_Customer_Create.RT_SAP_Customer_CreateException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        RT_SAP_Customer_Create output = new RT_SAP_Customer_Create();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

    
    @isTest
    static void testRunInvocableMethod() {
        overcast__Scenario__c scenario = overcast.TestingUtilities.setupTestEnvironment('RT_SAP_Customer_Create');
        overcast__Run__c run = new overcast__Run__c(overcast__Scenario__c = scenario.Id, overcast__Mode__c = 'Run', overcast__Operation__c = 'Read', overcast__Input__c = 'X', overcast__Manual__c = true);
        insert run;
        RT_SAP_Customer_Create.Parameters params = new RT_SAP_Customer_Create.Parameters();
        params.flowInterviewGuid = 'X';
        params.requestData = new RT_SAP_Customer_Create();
        params.Logger = null;
        params.doNotCommitLogs = false;
        params.testResponse = '{"output": ' + JSON.serialize(new RT_SAP_Customer_Create()) + '}';
        List<RT_SAP_Customer_Create.Parameters> paramList = new List<RT_SAP_Customer_Create.Parameters>{ params };

        Test.startTest();
        List<RT_SAP_Customer_Create.Result> results = RT_SAP_Customer_Create.runInvocableMethod(paramList);
        Test.stopTest();

        System.assertEquals(1, results.size());
    }
}