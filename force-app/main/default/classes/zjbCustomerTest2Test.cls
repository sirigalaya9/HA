/* 
 * Generated by Overcast UTC 2024-03-12 10:52:34Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjbCustomerTest2Test {
    @istest
    private static void testzjbCustomerTest2() {
        zjbCustomerTest2 actual = new zjbCustomerTest2();
        system.assertNotEquals(null, actual.KNA1);
    }

    @istest
    private static void testKNA1() {
        zjbCustomerTest2.KNA1 actual = new zjbCustomerTest2.KNA1();

        actual.KUNNR = 'a';
        actual.LAND1 = 'a';
        actual.NAME1 = 'a';
        actual.NAME2 = 'a';
        actual.ORT01 = 'a';
        actual.PSTLZ = 'a';
        actual.REGIO = 'a';
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.LAND1);
        system.assertEquals('a', actual.NAME1);
        system.assertEquals('a', actual.NAME2);
        system.assertEquals('a', actual.ORT01);
        system.assertEquals('a', actual.PSTLZ);
        system.assertEquals('a', actual.REGIO);
    }
    @istest
    private static void testrunQuery() {
        zjbCustomerTest2 request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjbCustomerTest2 response = request.runQuery(query1);
        system.assertEquals('a', response.KNA1[0].KUNNR);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static zjbCustomerTest2 testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjbCustomerTest2');
        zjbCustomerTest2 request = new zjbCustomerTest2();
        zjbCustomerTest2.KNA1 value1 = new zjbCustomerTest2.KNA1();
        value1.KUNNR = 'a';
        request.KNA1.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjbCustomerTest2 input = new zjbCustomerTest2();
        zjbCustomerTest2.KNA1 value1 = new zjbCustomerTest2.KNA1();
        value1.KUNNR = 'a';
        input.KNA1.add(value1);
        zjbCustomerTest2 actual = (zjbCustomerTest2)JSON.deserialize(input.serialize(), zjbCustomerTest2.class);
        system.assertEquals('a', actual.KNA1[0].KUNNR);
    }

    @istest
    private static void testDeserialize() {
        zjbCustomerTest2 output = new zjbCustomerTest2();
        zjbCustomerTest2.KNA1 value1 = new zjbCustomerTest2.KNA1();
        value1.KUNNR = 'a';
        output.KNA1.add(value1);

        string s = output.serialize();
        zjbCustomerTest2 actual = zjbCustomerTest2.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.KNA1[0].KUNNR);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjbCustomerTest2 actual = zjbCustomerTest2.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (zjbCustomerTest2.zjbCustomerTest2Exception e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            zjbCustomerTest2 actual = zjbCustomerTest2.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (zjbCustomerTest2.zjbCustomerTest2Exception e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        zjbCustomerTest2 output = new zjbCustomerTest2();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjbCustomerTest2 output = new zjbCustomerTest2();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjbCustomerTest2 output2 = new zjbCustomerTest2();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjbCustomerTest2 output = new zjbCustomerTest2();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('KNA1'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('KNA1', first.name);
    }

    @istest
    private static void testException() {
        zjbCustomerTest2.zjbCustomerTest2Exception e = new zjbCustomerTest2.zjbCustomerTest2Exception();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            zjbCustomerTest2.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbCustomerTest2.zjbCustomerTest2Exception e) {
            System.assert(true);
        }
        
        try {
            zjbCustomerTest2 output = new zjbCustomerTest2();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbCustomerTest2.zjbCustomerTest2Exception e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            zjbCustomerTest2 output = new zjbCustomerTest2();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbCustomerTest2.zjbCustomerTest2Exception e) {
            System.assert(true);
        }

        try {
            zjbCustomerTest2 output = new zjbCustomerTest2();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbCustomerTest2.zjbCustomerTest2Exception e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            zjbCustomerTest2.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbCustomerTest2.zjbCustomerTest2Exception e) {
            System.assert(true);
        }
        
        try {
            zjbCustomerTest2.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbCustomerTest2.zjbCustomerTest2Exception e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            zjbCustomerTest2.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbCustomerTest2.zjbCustomerTest2Exception e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        zjbCustomerTest2 output = new zjbCustomerTest2();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}