/* 
 * Generated by Overcast UTC 2024-03-12 10:53:23Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjbMVKETest {
    @istest
    private static void testzjbMVKE() {
        zjbMVKE actual = new zjbMVKE();
        system.assertNotEquals(null, actual.MVKE);
    }

    @istest
    private static void testMVKE() {
        zjbMVKE.MVKE actual = new zjbMVKE.MVKE();

        actual.MANDT = 'a';
        actual.MATNR = 'a';
        actual.VKORG = 'a';
        actual.VTWEG = 'a';
        actual.LVORM = 'a';
        actual.VERSG = 'a';
        actual.BONUS = 'a';
        actual.PROVG = 'a';
        actual.SKTOF = 'a';
        actual.VMSTA = 'a';
        actual.VMSTD = Date.newInstance(2000,1,1);
        actual.AUMNG = 0;
        actual.LFMNG = 0;
        actual.EFMNG = 0;
        actual.SCMNG = 0;
        actual.SCHME = 'a';
        actual.VRKME = 'a';
        actual.MTPOS = 'a';
        actual.DWERK = 'a';
        actual.PRODH = 'a';
        actual.PMATN = 'a';
        actual.KONDM = 'a';
        actual.KTGRM = 'a';
        actual.MVGR1 = 'a';
        actual.MVGR2 = 'a';
        actual.MVGR3 = 'a';
        actual.MVGR4 = 'a';
        actual.MVGR5 = 'a';
        actual.SSTUF = 'a';
        actual.PFLKS = 'a';
        actual.LSTFL = 'a';
        actual.LSTVZ = 'a';
        actual.LSTAK = 'a';
        actual.LDVFL = Date.newInstance(2000,1,1);
        actual.LDBFL = Date.newInstance(2000,1,1);
        actual.LDVZL = Date.newInstance(2000,1,1);
        actual.LDBZL = Date.newInstance(2000,1,1);
        actual.VDVFL = Date.newInstance(2000,1,1);
        actual.VDBFL = Date.newInstance(2000,1,1);
        actual.VDVZL = Date.newInstance(2000,1,1);
        actual.VDBZL = Date.newInstance(2000,1,1);
        actual.PRAT1 = 'a';
        actual.PRAT2 = 'a';
        actual.PRAT3 = 'a';
        actual.PRAT4 = 'a';
        actual.PRAT5 = 'a';
        actual.PRAT6 = 'a';
        actual.PRAT7 = 'a';
        actual.PRAT8 = 'a';
        actual.PRAT9 = 'a';
        actual.PRATA = 'a';
        actual.RDPRF = 'a';
        actual.MEGRU = 'a';
        actual.LFMAX = 0;
        actual.RJART = 'a';
        actual.PBIND = 'a';
        actual.VAVME = 'a';
        actual.MATKC = 'a';
        actual.PVMSO = 'a';
        actual.x_BEV1_EMLGRP = 'a';
        actual.x_BEV1_EMDRCKSPL = 'a';
        actual.x_BEV1_RPBEZME = 'a';
        actual.x_BEV1_RPSNS = 'a';
        actual.x_BEV1_RPSFA = 'a';
        actual.x_BEV1_RPSKI = 'a';
        actual.x_BEV1_RPSCO = 'a';
        actual.x_BEV1_RPSSO = 'a';
        actual.FISDUMMY = 'a';
        actual.x_FIS_RBGRP = 'a';
        actual.x_FIS_V_DTN_VDTN = 'a';
        actual.x_FIS_V_DTN_VTKZ = 'a';
        actual.PLGTP = 'a';
        actual.ZZHWWHWPU = 'a';
        actual.ZZHWWNOHDE = 'a';
        actual.ZZHWWINPU = 'a';
        actual.ZZHWWARTPUB = 'a';
        actual.ZZHWWCRDAT = Date.newInstance(2000,1,1);
        actual.ZZHWWSMGEP = 'a';
        actual.ZZHWWCS = 'a';
        actual.ZZHWWSLAUN = Date.newInstance(2000,1,1);
        actual.ZZHWWKUNDSPEZ = 'a';
        actual.ZZHWWKDSPVKSB = 'a';
        actual.ZZHWWKDSPKDNR = 'a';
        actual.ZZHWWPRODQLVL = 'a';
        actual.ZZHWWTOOLREFNO = 'a';
        actual.ZZHWWOTSREFNO = 'a';
        actual.ZZHWWOTSDATE = Date.newInstance(2000,1,1);
        actual.ZZHAC_CONPRO = 'a';
        actual.ZZHAC_RETFAC = 'a';
        actual.ZZHWWBLKTEXT = 'a';
        actual.ZZHWWEYECATCH = 'a';
        actual.ZZHWWSHIPPING_CLASS = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.MATNR);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.LVORM);
        system.assertEquals('a', actual.VERSG);
        system.assertEquals('a', actual.BONUS);
        system.assertEquals('a', actual.PROVG);
        system.assertEquals('a', actual.SKTOF);
        system.assertEquals('a', actual.VMSTA);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VMSTD);
        system.assertEquals(0, actual.AUMNG);
        system.assertEquals(0, actual.LFMNG);
        system.assertEquals(0, actual.EFMNG);
        system.assertEquals(0, actual.SCMNG);
        system.assertEquals('a', actual.SCHME);
        system.assertEquals('a', actual.VRKME);
        system.assertEquals('a', actual.MTPOS);
        system.assertEquals('a', actual.DWERK);
        system.assertEquals('a', actual.PRODH);
        system.assertEquals('a', actual.PMATN);
        system.assertEquals('a', actual.KONDM);
        system.assertEquals('a', actual.KTGRM);
        system.assertEquals('a', actual.MVGR1);
        system.assertEquals('a', actual.MVGR2);
        system.assertEquals('a', actual.MVGR3);
        system.assertEquals('a', actual.MVGR4);
        system.assertEquals('a', actual.MVGR5);
        system.assertEquals('a', actual.SSTUF);
        system.assertEquals('a', actual.PFLKS);
        system.assertEquals('a', actual.LSTFL);
        system.assertEquals('a', actual.LSTVZ);
        system.assertEquals('a', actual.LSTAK);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LDVFL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LDBFL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LDVZL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.LDBZL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VDVFL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VDBFL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VDVZL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VDBZL);
        system.assertEquals('a', actual.PRAT1);
        system.assertEquals('a', actual.PRAT2);
        system.assertEquals('a', actual.PRAT3);
        system.assertEquals('a', actual.PRAT4);
        system.assertEquals('a', actual.PRAT5);
        system.assertEquals('a', actual.PRAT6);
        system.assertEquals('a', actual.PRAT7);
        system.assertEquals('a', actual.PRAT8);
        system.assertEquals('a', actual.PRAT9);
        system.assertEquals('a', actual.PRATA);
        system.assertEquals('a', actual.RDPRF);
        system.assertEquals('a', actual.MEGRU);
        system.assertEquals(0, actual.LFMAX);
        system.assertEquals('a', actual.RJART);
        system.assertEquals('a', actual.PBIND);
        system.assertEquals('a', actual.VAVME);
        system.assertEquals('a', actual.MATKC);
        system.assertEquals('a', actual.PVMSO);
        system.assertEquals('a', actual.x_BEV1_EMLGRP);
        system.assertEquals('a', actual.x_BEV1_EMDRCKSPL);
        system.assertEquals('a', actual.x_BEV1_RPBEZME);
        system.assertEquals('a', actual.x_BEV1_RPSNS);
        system.assertEquals('a', actual.x_BEV1_RPSFA);
        system.assertEquals('a', actual.x_BEV1_RPSKI);
        system.assertEquals('a', actual.x_BEV1_RPSCO);
        system.assertEquals('a', actual.x_BEV1_RPSSO);
        system.assertEquals('a', actual.FISDUMMY);
        system.assertEquals('a', actual.x_FIS_RBGRP);
        system.assertEquals('a', actual.x_FIS_V_DTN_VDTN);
        system.assertEquals('a', actual.x_FIS_V_DTN_VTKZ);
        system.assertEquals('a', actual.PLGTP);
        system.assertEquals('a', actual.ZZHWWHWPU);
        system.assertEquals('a', actual.ZZHWWNOHDE);
        system.assertEquals('a', actual.ZZHWWINPU);
        system.assertEquals('a', actual.ZZHWWARTPUB);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZHWWCRDAT);
        system.assertEquals('a', actual.ZZHWWSMGEP);
        system.assertEquals('a', actual.ZZHWWCS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZHWWSLAUN);
        system.assertEquals('a', actual.ZZHWWKUNDSPEZ);
        system.assertEquals('a', actual.ZZHWWKDSPVKSB);
        system.assertEquals('a', actual.ZZHWWKDSPKDNR);
        system.assertEquals('a', actual.ZZHWWPRODQLVL);
        system.assertEquals('a', actual.ZZHWWTOOLREFNO);
        system.assertEquals('a', actual.ZZHWWOTSREFNO);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZHWWOTSDATE);
        system.assertEquals('a', actual.ZZHAC_CONPRO);
        system.assertEquals('a', actual.ZZHAC_RETFAC);
        system.assertEquals('a', actual.ZZHWWBLKTEXT);
        system.assertEquals('a', actual.ZZHWWEYECATCH);
        system.assertEquals('a', actual.ZZHWWSHIPPING_CLASS);
    }
    @istest
    private static void testrunQuery() {
        zjbMVKE request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjbMVKE response = request.runQuery(query1);
        system.assertEquals('a', response.MVKE[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static zjbMVKE testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjbMVKE');
        zjbMVKE request = new zjbMVKE();
        zjbMVKE.MVKE value1 = new zjbMVKE.MVKE();
        value1.MANDT = 'a';
        request.MVKE.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjbMVKE input = new zjbMVKE();
        zjbMVKE.MVKE value1 = new zjbMVKE.MVKE();
        value1.MANDT = 'a';
        input.MVKE.add(value1);
        zjbMVKE actual = (zjbMVKE)JSON.deserialize(input.serialize(), zjbMVKE.class);
        system.assertEquals('a', actual.MVKE[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        zjbMVKE output = new zjbMVKE();
        zjbMVKE.MVKE value1 = new zjbMVKE.MVKE();
        value1.MANDT = 'a';
        output.MVKE.add(value1);

        string s = output.serialize();
        zjbMVKE actual = zjbMVKE.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.MVKE[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjbMVKE actual = zjbMVKE.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (zjbMVKE.zjbMVKEException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            zjbMVKE actual = zjbMVKE.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (zjbMVKE.zjbMVKEException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        zjbMVKE output = new zjbMVKE();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjbMVKE output = new zjbMVKE();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjbMVKE output2 = new zjbMVKE();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjbMVKE output = new zjbMVKE();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('MVKE'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('MVKE', first.name);
    }

    @istest
    private static void testException() {
        zjbMVKE.zjbMVKEException e = new zjbMVKE.zjbMVKEException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            zjbMVKE.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbMVKE.zjbMVKEException e) {
            System.assert(true);
        }
        
        try {
            zjbMVKE output = new zjbMVKE();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbMVKE.zjbMVKEException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            zjbMVKE output = new zjbMVKE();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbMVKE.zjbMVKEException e) {
            System.assert(true);
        }

        try {
            zjbMVKE output = new zjbMVKE();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbMVKE.zjbMVKEException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            zjbMVKE.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbMVKE.zjbMVKEException e) {
            System.assert(true);
        }
        
        try {
            zjbMVKE.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbMVKE.zjbMVKEException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            zjbMVKE.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbMVKE.zjbMVKEException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        zjbMVKE output = new zjbMVKE();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}