/*
 * Copyright Â© 2019 Vigience Co., Ltd. All Rights Reserved
 */
 
// This code was generated by Overcast for running the outbound mappings. 2019-11-19 02:50:05Z
//
// Update this test class to correspond to your updates to Mapping_ovcSapCustmrRepDlt_Account.
@istest
private class Mapping_ovcSapCustmrRepDlt_AccountTest {
    
    // Assert in code that your mapping configuration is correct
    @istest
    private static void testObjectMapping() {
        overcast__Run__c r = getExecution();
        
        overcast__IntegrationFieldMap__c mapping = new overcast__IntegrationFieldMap__c(overcast__Active__c=true, overcast__Direction__c='Inbound');
        mapping.overcast__ApexClass__c = 'Mapping_ovcSapCustmrRepDlt_Account';
        mapping.overcast__ScenarioName__c = 'ovcSapCustomerRepDelta';
        mapping.overcast__Target__c = 'Account';
        mapping.overcast__TargetObjectName__c = 'Account';
        mapping.overcast__Source__c = 'ovcSapCustomerRepDelta_CDHDR__c';
        mapping.overcast__SourceObjectName__c = 'ovcSapCustomerRepDelta_CDHDR__c';
        // Query your actual mapping records and add the field data here
        // mapping.overcast__Joins__c = '';
        // mapping.overcast__Map__c = '';
        
        overcast__Scenario__c scen = overcast.TestingUtilities.SetupTestEnvironment('ovcSapCustomerRep');
        overcast__ScenarioTables__c st = new overcast__ScenarioTables__c(overcast__Scenario__c = scen.id);
        insert st;

        // set the input record fields and assert that output record matches your mapping.
        ovcSapCustomerRepDelta_CDHDR__c input = new ovcSapCustomerRepDelta_CDHDR__c();
        input.Name = 'OUT ' + r.overcast__Input__c;
        input.OBJECTID__c = '0000002000';
        insert input;

        Mapping_ovcSapCustmrRepDlt_Account plugin = new Mapping_ovcSapCustmrRepDlt_Account();
        
        Test.startTest();
        
        plugin.execute(r, new ovcSapCustomerRepDelta_CDHDR__c[]{ input });
        
        Test.stoptest();
        
        List<overcast__InputSet__c> resultInputs = [SELECT Id FROM overcast__InputSet__c WHERE overcast__Scenario__c = :scen.Id];
        system.assertEquals(false, resultInputs.isEmpty());

        Account[] output = [SELECT Id FROM Account LIMIT 1];
        // Add your assertions about your mapping configuration here.
        system.assert(true);
    }

    // Assert in code that your mapping configuration is correct
    @istest
    private static void testObjectMappingFailure() {
        overcast__Run__c r = getExecution();
        
        overcast__IntegrationFieldMap__c mapping = new overcast__IntegrationFieldMap__c(overcast__Active__c=true, overcast__Direction__c='Inbound');
        mapping.overcast__ApexClass__c = 'Mapping_ovcSapCustmrRepDlt_Account';
        mapping.overcast__ScenarioName__c = 'ovcSapCustomerRepDelta';
        mapping.overcast__Target__c = 'Account';
        mapping.overcast__TargetObjectName__c = 'Account';
        mapping.overcast__Source__c = 'ovcSapCustomerRepDelta_CDHDR__c';
        mapping.overcast__SourceObjectName__c = 'ovcSapCustomerRepDelta_CDHDR__c';
        // Query your actual mapping records and add the field data here
        // mapping.overcast__Joins__c = '';
        // mapping.overcast__Map__c = '';
        
        Mapping_ovcSapCustmrRepDlt_Account plugin = new Mapping_ovcSapCustmrRepDlt_Account();
        
        // set the input record fields and assert that output record matches your mapping.
        ovcSapCustomerRepDelta_CDHDR__c input = new ovcSapCustomerRepDelta_CDHDR__c();
        input.Name = 'OUT ' + r.overcast__Input__c;
        input.OBJECTID__c = '0000002000';
        insert input;

        Test.startTest();
        
        plugin.execute(r, new ovcSapCustomerRepDelta_CDHDR__c[]{ input });
        
        Test.stoptest();
        
        overcast__Run__c resultRun = [SELECT Id, overcast__StatusCode__c FROM overcast__Run__c WHERE Id = :r.Id];
        system.assert(resultRun.overcast__StatusCode__c >= 300);

        Account[] output = [SELECT Id FROM Account LIMIT 1];
        // Add your assertions about your mapping configuration here.
        system.assert(true);
    }
    
    @istest
    private static void testBeforeUpsert() {
        Mapping_ovcSapCustmrRepDlt_Account plugin = new Mapping_ovcSapCustmrRepDlt_Account();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        ovcSapCustomerRepDelta_CDHDR__c source = new ovcSapCustomerRepDelta_CDHDR__c();
        Account target = new Account();
        boolean response = plugin.beforeUpsert(source, target);
        
        // Assert any transformations on the target record you perform in beforeUpsert()
        //system.assertEquals(true, response);
        system.assertEquals(false, response);
    }
    
    @istest
    private static void testAfterInsert() {
        Mapping_ovcSapCustmrRepDlt_Account plugin = new Mapping_ovcSapCustmrRepDlt_Account();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        Account target = new Account(Name='a');
        
        overcast.ObjectMapping.InboundMappingIsRunning = true;
        sobject[] inserted = new sobject[]{ target };
        Database.SaveResult[] saveResults = Database.insert(inserted, false);
        plugin.afterInsert(inserted, saveResults);
        
        // afterInsert allows for post-processing and may not require any assertions.
        system.assert(true);
    }
    
    @istest
    private static void testAfterUpdate() {
        Mapping_ovcSapCustmrRepDlt_Account plugin = new Mapping_ovcSapCustmrRepDlt_Account();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        Account target = new Account(Name='a');
        
        overcast.ObjectMapping.InboundMappingIsRunning = true;
        sobject[] updated = new sobject[]{ target };
        Database.SaveResult[] saveResults = Database.insert(updated, false);
        plugin.afterUpdate(updated, saveResults);
        
        // afterUpdate allows for post-processing and may not require any assertions.
        system.assert(true);
    }
    
    @istest
    private static void testLogging() {
        overcast__Run__c r = getExecution();
        Mapping_ovcSapCustmrRepDlt_Account plugin = new Mapping_ovcSapCustmrRepDlt_Account();
        plugin.m_logger = new overcast.Logger(r.Id);
        
        plugin.logInfo('MESSAGE');
        plugin.logWarning('WARNING');
        plugin.setStatusToWarning();
        plugin.logError('ERROR');
        plugin.logDEBUG('DEBUG');
        plugin.setStatusToError();
        plugin.saveLogs();
        
        overcast__Log__c[] logs = [SELECT Id, overcast__LogLevel__c, overcast__Message__c FROM overcast__Log__c];
        system.assert(logs.size() >= 3);
        for (overcast__Log__c l : logs) {
            if (l.overcast__LogLevel__c == 'DEBUG') {
                system.assert(false, 'DEBUG message not filtered out');
            }
        }
        system.assertEquals(400, plugin.m_logger.getStatusCode());
        overcast__Run__c r2 = [SELECT overcast__StatusCode__c FROM overcast__Run__c WHERE Id = :r.Id];
        system.assertEquals(400, r2.overcast__StatusCode__c);
    }

	@istest
    private static void testFailure() {
        Mapping_ovcSapCustmrRepDlt_Account plugin = new Mapping_ovcSapCustmrRepDlt_Account();
        plugin.m_logger = new overcast.Logger(getExecution().Id);
        Account target = new Account();
		target.Name = 'a';
        overcast.ObjectMapping.InboundMappingIsRunning = true;
        sobject[] inserted = new sobject[]{ target };
        Database.SaveResult failed1 = (Database.SaveResult)JSON.deserialize('{"success":false,"errors":[{"message":"Inserted bad data","statusCode":"FIELD_CUSTOM_VALIDATION_EXCEPTION","fields":["Name"]}]}', Database.SaveResult.class);
        plugin.afterUpdate(inserted, new Database.SaveResult[]{ failed1 });
        list<overcast__Log__c> logs = plugin.m_logger.getLogs();
		system.assert(logs.size() >= 2);
        
        system.assertEquals('[Mapping_ovcSapCustmrRepDlt_Account] Failed to save record [ID=null, Message=FIELD_CUSTOM_VALIDATION_EXCEPTION:Inserted bad data, Name=a]', logs[0].overcast__Message__c);
    }

    private static overcast__Run__c getExecution() {
        overcast__Scenario__c scen = overcast.TestingUtilities.SetupTestEnvironment('ovcSapCustomerRepDelta');
        scen.overcast__LogLevel__c = 'INFO';
        update scen;
        overcast__Run__c r = new overcast__Run__c(overcast__Scenario__c=scen.Id, overcast__Input__c='A', overcast__Mode__c='Run', overcast__Operation__c='Read');
        insert r;
        return r;
    }
}