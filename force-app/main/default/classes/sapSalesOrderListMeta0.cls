global class sapSalesOrderListMeta0 {
/* 
 * Generated by Overcast UTC 2024-03-27 04:32:32Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */

    static overcast.Realtime.StructureType SS = overcast.Realtime.StructureType.STRUCTURE;
    static overcast.Realtime.StructureType ST = overcast.Realtime.StructureType.TABLE;

    static overcast.Realtime.Direction DI = overcast.Realtime.Direction.INPUT;
    static overcast.Realtime.Direction DOx = overcast.Realtime.Direction.OUTPUT;
    static overcast.Realtime.Direction DB = overcast.Realtime.Direction.BOTH;
    
    static overcast.Realtime.ApexType TS = overcast.Realtime.ApexType.STRINGX;
    static overcast.Realtime.ApexType TI = overcast.Realtime.ApexType.INTEGERX;
    static overcast.Realtime.ApexType TL = overcast.Realtime.ApexType.LONGX;
    static overcast.Realtime.ApexType TB = overcast.Realtime.ApexType.BOOLEANX;
    static overcast.Realtime.ApexType TD = overcast.Realtime.ApexType.DATEX;
    static overcast.Realtime.ApexType TDT = overcast.Realtime.ApexType.DATETIMEX;
    static overcast.Realtime.ApexType TDC = overcast.Realtime.ApexType.DECIMALX;
    static overcast.Realtime.ApexType TDBL = overcast.Realtime.ApexType.DOUBLEX;
    static overcast.Realtime.ApexType TT = overcast.Realtime.ApexType.TIMEX;
    static overcast.Realtime.ApexType TBLB = overcast.Realtime.ApexType.BLOBX;

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, overcast.Realtime.Direction e) {
        return new overcast.FieldInfo(a, b, c, d, e);
    }

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, Integer e, overcast.Realtime.Direction f) {
        return new overcast.FieldInfo(a, b, c, d, e, f);
    }

    public static Map<String, overcast.TypeInfo> metadata = new Map<String, overcast.TypeInfo> {
        'BAPI_SALESORDER_GETLIST' => new overcast.TypeInfo('BAPI_SALESORDER_GETLIST', '', SS, DI,
            new Map<String, overcast.FieldInfo> {
                'CUSTOMER_NUMBER' => fi('CUSTOMER_NUMBER', 'Customer number', TS, 10, DI),
                'SALES_ORGANIZATION' => fi('SALES_ORGANIZATION', 'Sales organization', TS, 4, DI),
                'MATERIAL' => fi('MATERIAL', 'Material number', TS, 18, DI),
                'DOCUMENT_DATE' => fi('DOCUMENT_DATE', 'Entry date', TD, 8, DI),
                'DOCUMENT_DATE_TO' => fi('DOCUMENT_DATE_TO', 'Entry date up to and including', TD, 8, DI),
                'PURCHASE_ORDER' => fi('PURCHASE_ORDER', 'Customer purchase order number', TS, 20, DI),
                'TRANSACTION_GROUP' => fi('TRANSACTION_GROUP', 'Single-Character Indicator', TS, 1, DI),
                'PURCHASE_ORDER_NUMBER' => fi('PURCHASE_ORDER_NUMBER', 'Customer purchase order number', TS, 35, DI),
                'MATERIAL_LONG' => fi('MATERIAL_LONG', 'Material Number (40 Characters, Necessary for Technical Reasons)', TS, 40, DI)
            }
        ),
        'MATERIAL_EVG' => new overcast.TypeInfo('MATERIAL_EVG', 'Long Material Number', SS, DI,
            new Map<String, overcast.FieldInfo> {
                'MATERIAL_EXT' => fi('MATERIAL_EXT', 'Material Number', TS, 40, DI),
                'MATERIAL_VERS' => fi('MATERIAL_VERS', 'Version Number', TS, 10, DI),
                'MATERIAL_GUID' => fi('MATERIAL_GUID', 'GUID (material)', TS, 32, DI)
            }
        ),
        'RETURN_x' => new overcast.TypeInfo('RETURN_x', 'Error Text', SS, DOx,
            new Map<String, overcast.FieldInfo> {
                'TYPE_x' => fi('TYPE_x', 'Message type', TS, 1, DOx),
                'CODE' => fi('CODE', 'Message code', TS, 5, DOx),
                'MESSAGE' => fi('MESSAGE', 'Message text', TS, 220, DOx),
                'LOG_NO' => fi('LOG_NO', 'Log Number', TS, 20, DOx),
                'LOG_MSG_NO' => fi('LOG_MSG_NO', 'Message Number', TS, 6, DOx),
                'MESSAGE_V1' => fi('MESSAGE_V1', 'Message Variable', TS, 50, DOx),
                'MESSAGE_V2' => fi('MESSAGE_V2', 'Message Variable', TS, 50, DOx),
                'MESSAGE_V3' => fi('MESSAGE_V3', 'Message Variable', TS, 50, DOx),
                'MESSAGE_V4' => fi('MESSAGE_V4', 'Message Variable', TS, 50, DOx)
            }
        ),
        'SALES_ORDERS' => new overcast.TypeInfo('SALES_ORDERS', 'Table of orders for the customer', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'MATERIAL' => fi('MATERIAL', 'Material', TS, 18, DB),
                'SHORT_TEXT' => fi('SHORT_TEXT', 'Description', TS, 40, DB),
                'DOC_TYPE' => fi('DOC_TYPE', 'Sales Doc. Type', TS, 4, DB),
                'DOC_DATE' => fi('DOC_DATE', 'Document Date', TD, 8, DB),
                'REQ_QTY' => fi('REQ_QTY', 'Order Quantity', TDC, 15,3, DB),
                'REQ_DATE' => fi('REQ_DATE', 'Req.deliv.date', TD, 8, DB),
                'PURCH_NO' => fi('PURCH_NO', 'PO Number', TS, 20, DB),
                'BATCH' => fi('BATCH', 'Batch', TS, 10, DB),
                'VALID_FROM' => fi('VALID_FROM', 'Valid from', TD, 8, DB),
                'VALID_TO' => fi('VALID_TO', 'Valid to', TD, 8, DB),
                'BILL_BLOCK' => fi('BILL_BLOCK', 'Billing block', TS, 2, DB),
                'DLV_BLOCK' => fi('DLV_BLOCK', 'Delivery block', TS, 2, DB),
                'SOLD_TO' => fi('SOLD_TO', 'Sold-To Party', TS, 10, DB),
                'NAME' => fi('NAME', 'Name', TS, 35, DB),
                'EXCHG_RATE' => fi('EXCHG_RATE', 'Exchange rate', TDC, 9,5, DB),
                'DLV_QTY' => fi('DLV_QTY', 'Delivery qty', TDC, 13,3, DB),
                'BASE_UOM' => fi('BASE_UOM', 'Base Unit', TS, 3, DB),
                'NET_PRICE' => fi('NET_PRICE', 'Net price', TDC, 11,2, DB),
                'COND_P_UNT' => fi('COND_P_UNT', 'Pricing unit', TDC, 5,0, DB),
                'COND_UNIT' => fi('COND_UNIT', 'Unit of measure', TS, 3, DB),
                'NET_VAL_HD' => fi('NET_VAL_HD', 'Net value', TDC, 15,2, DB),
                'NET_VALUE' => fi('NET_VALUE', 'Net Value', TDC, 15,2, DB),
                'DIVISION' => fi('DIVISION', 'Division', TS, 2, DB),
                'DOC_STATUS' => fi('DOC_STATUS', 'Status', TS, 20, DB),
                'SALES_GRP' => fi('SALES_GRP', 'Sales Group', TS, 3, DB),
                'SALES_OFF' => fi('SALES_OFF', 'Sales Office', TS, 4, DB),
                'SALES_ORG' => fi('SALES_ORG', 'Sales Org.', TS, 4, DB),
                'SALES_UNIT' => fi('SALES_UNIT', 'Sales Unit', TS, 3, DB),
                'SHIP_POINT' => fi('SHIP_POINT', 'Shipping Point', TS, 4, DB),
                'DISTR_CHAN' => fi('DISTR_CHAN', 'Distr. Channel', TS, 2, DB),
                'GI_DATE' => fi('GI_DATE', 'Goods Issue', TD, 8, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Doc. Currency', TS, 5, DB),
                'PLANT' => fi('PLANT', 'Plant', TS, 4, DB),
                'STORE_LOC' => fi('STORE_LOC', 'Storage Loc.', TS, 4, DB),
                'ORD_REASON' => fi('ORD_REASON', 'Order reason', TS, 3, DB),
                'REASON_REJ' => fi('REASON_REJ', 'RejectionReason', TS, 2, DB),
                'B_UOM_ISO' => fi('B_UOM_ISO', 'Base unit ISO', TS, 3, DB),
                'CD_UNT_ISO' => fi('CD_UNT_ISO', 'ISO cond. UoM', TS, 3, DB),
                'S_UNIT_ISO' => fi('S_UNIT_ISO', 'Sales unit ISO', TS, 3, DB),
                'CURR_ISO' => fi('CURR_ISO', 'ISO code crcy', TS, 3, DB),
                'PURCH_NO_C' => fi('PURCH_NO_C', 'PO Number', TS, 35, DB),
                'EXCHG_RATE_V' => fi('EXCHG_RATE_V', 'Exchange rate', TDC, 9,5, DB),
                'MAT_EXT' => fi('MAT_EXT', 'Material Number', TS, 40, DB),
                'MAT_GUID' => fi('MAT_GUID', 'GUID (External)', TS, 32, DB),
                'MAT_VERS' => fi('MAT_VERS', 'Version Number', TS, 10, DB),
                'CREATION_DATE' => fi('CREATION_DATE', 'Created On', TD, 8, DB),
                'CREATION_TIME' => fi('CREATION_TIME', 'Time', TS, 8, DB),
                'STATUS_DOC' => fi('STATUS_DOC', 'Status', TS, 1, DB),
                'REQ_SEGMENT' => fi('REQ_SEGMENT', 'Reqmnt Segment', TS, 16, DB),
                'MATERIAL_LONG' => fi('MATERIAL_LONG', 'Material', TS, 40, DB)
            }
        ),
        'EXTENSIONIN' => new overcast.TypeInfo('EXTENSIONIN', 'Reference Structure for BAPI Parameters ExtensionIn/ExtensionOut', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'STRUCTURE' => fi('STRUCTURE', 'Structure name of  BAPI table extension', TS, 30, DB),
                'VALUEPART1' => fi('VALUEPART1', 'Data part of BAPI extension parameter', TS, 240, DB),
                'VALUEPART2' => fi('VALUEPART2', 'Data part of BAPI extension parameter', TS, 240, DB),
                'VALUEPART3' => fi('VALUEPART3', 'Data part of BAPI extension parameter', TS, 240, DB),
                'VALUEPART4' => fi('VALUEPART4', 'Data part of BAPI extension parameter', TS, 240, DB)
            }
        ),
        'EXTENSIONEX' => new overcast.TypeInfo('EXTENSIONEX', 'Reference Structure for BAPI Parameters ExtensionIn/ExtensionOut', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'STRUCTURE' => fi('STRUCTURE', 'Table ext.struct.', TS, 30, DB),
                'VALUEPART1' => fi('VALUEPART1', 'Data', TS, 240, DB),
                'VALUEPART2' => fi('VALUEPART2', 'Data', TS, 240, DB),
                'VALUEPART3' => fi('VALUEPART3', 'Data', TS, 240, DB),
                'VALUEPART4' => fi('VALUEPART4', 'Data', TS, 240, DB)
            }
        )
    };
}