/* 
 * Generated by Overcast UTC 2024-03-12 09:38:01Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class sapInvoiceDetailTest {
    @istest
    private static void testsapInvoiceDetail() {
        sapInvoiceDetail actual = new sapInvoiceDetail();
        system.assertNotEquals(null, actual.BAPI_WEBINVOICE_GETDETAIL);
        system.assertNotEquals(null, actual.WEBINVOICEDOCUMENT);
        system.assertNotEquals(null, actual.RETURN_x);
        system.assertNotEquals(null, actual.WEBINVOICEITEMS);
        system.assertNotEquals(null, actual.WEBINVOICEPARTNERS);
    }

    @istest
    private static void testBAPI_WEBINVOICE_GETDETAIL() {
        sapInvoiceDetail.BAPI_WEBINVOICE_GETDETAIL actual = new sapInvoiceDetail.BAPI_WEBINVOICE_GETDETAIL();

        actual.PARTNER_NUMBER = 'a';
        actual.PARTNER_ROLE = 'a';
        actual.BILLINGDOC = 'a';
        actual.LANGU = 'a';
        system.assertEquals('a', actual.PARTNER_NUMBER);
        system.assertEquals('a', actual.PARTNER_ROLE);
        system.assertEquals('a', actual.BILLINGDOC);
        system.assertEquals('a', actual.LANGU);
    }
    @istest
    private static void testWEBINVOICEDOCUMENT() {
        sapInvoiceDetail.WEBINVOICEDOCUMENT actual = new sapInvoiceDetail.WEBINVOICEDOCUMENT();

        actual.BILLINGDOC = 'a';
        actual.BILL_TYPE = 'a';
        actual.BILL_TYPE_TEXT = 'a';
        actual.BILLCATEG = 'a';
        actual.BILLCATEG_TEXT = 'a';
        actual.SD_DOC_CAT = 'a';
        actual.SD_DOC_CAT_TEXT = 'a';
        actual.CURRENCY_x = 'a';
        actual.CURRENCY_ISO = 'a';
        actual.NET_VALUE = 0;
        actual.SOLD_TO = 'a';
        actual.PAYER = 'a';
        actual.TAX_AMOUNT = 0;
        actual.CANCELLED = 'a';
        actual.BILL_DATE = Date.newInstance(2000,1,1);
        actual.INCOTERMS1 = 'a';
        actual.INCOTERMS1_TEXT = 'a';
        actual.INCOTERMS2 = 'a';
        actual.PMNTTRMS = 'a';
        actual.PMNTTRMS_TEXT = 'a';
        actual.COMP_CODE = 'a';
        actual.COMP_NAME = 'a';
        actual.REFERENCE = 'a';
        actual.BLINE_DATE = Date.newInstance(2000,1,1);
        actual.DSCT_DATE1 = Date.newInstance(2000,1,1);
        actual.DSCT_DATE2 = Date.newInstance(2000,1,1);
        actual.NET_DATE = Date.newInstance(2000,1,1);
        actual.DSCT_PCT1 = 0;
        actual.DSCT_PCT2 = 0;
        actual.INCOTERMSV = 'a';
        actual.INCOTERMS2L = 'a';
        actual.INCOTERMS3L = 'a';
        actual.SD_DOC_CAT_LONG = 'a';
        actual.INCOTERMSV_TEXT = 'a';
        system.assertEquals('a', actual.BILLINGDOC);
        system.assertEquals('a', actual.BILL_TYPE);
        system.assertEquals('a', actual.BILL_TYPE_TEXT);
        system.assertEquals('a', actual.BILLCATEG);
        system.assertEquals('a', actual.BILLCATEG_TEXT);
        system.assertEquals('a', actual.SD_DOC_CAT);
        system.assertEquals('a', actual.SD_DOC_CAT_TEXT);
        system.assertEquals('a', actual.CURRENCY_x);
        system.assertEquals('a', actual.CURRENCY_ISO);
        system.assertEquals(0, actual.NET_VALUE);
        system.assertEquals('a', actual.SOLD_TO);
        system.assertEquals('a', actual.PAYER);
        system.assertEquals(0, actual.TAX_AMOUNT);
        system.assertEquals('a', actual.CANCELLED);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BILL_DATE);
        system.assertEquals('a', actual.INCOTERMS1);
        system.assertEquals('a', actual.INCOTERMS1_TEXT);
        system.assertEquals('a', actual.INCOTERMS2);
        system.assertEquals('a', actual.PMNTTRMS);
        system.assertEquals('a', actual.PMNTTRMS_TEXT);
        system.assertEquals('a', actual.COMP_CODE);
        system.assertEquals('a', actual.COMP_NAME);
        system.assertEquals('a', actual.REFERENCE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BLINE_DATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DSCT_DATE1);
        system.assertEquals(Date.newInstance(2000,1,1), actual.DSCT_DATE2);
        system.assertEquals(Date.newInstance(2000,1,1), actual.NET_DATE);
        system.assertEquals(0, actual.DSCT_PCT1);
        system.assertEquals(0, actual.DSCT_PCT2);
        system.assertEquals('a', actual.INCOTERMSV);
        system.assertEquals('a', actual.INCOTERMS2L);
        system.assertEquals('a', actual.INCOTERMS3L);
        system.assertEquals('a', actual.SD_DOC_CAT_LONG);
        system.assertEquals('a', actual.INCOTERMSV_TEXT);
    }
    @istest
    private static void testRETURN_x() {
        sapInvoiceDetail.RETURN_x actual = new sapInvoiceDetail.RETURN_x();

        actual.TYPE_x = 'a';
        actual.ID = 'a';
        actual.NUMBER_x = 'a';
        actual.MESSAGE = 'a';
        actual.LOG_NO = 'a';
        actual.LOG_MSG_NO = 'a';
        actual.MESSAGE_V1 = 'a';
        actual.MESSAGE_V2 = 'a';
        actual.MESSAGE_V3 = 'a';
        actual.MESSAGE_V4 = 'a';
        actual.PARAMETER = 'a';
        actual.ROW = 0;
        actual.FIELD = 'a';
        actual.SYSTEM_x = 'a';
        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.NUMBER_x);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
        system.assertEquals('a', actual.PARAMETER);
        system.assertEquals(0, actual.ROW);
        system.assertEquals('a', actual.FIELD);
        system.assertEquals('a', actual.SYSTEM_x);
    }
    @istest
    private static void testWEBINVOICEITEMS() {
        sapInvoiceDetail.WEBINVOICEITEMS actual = new sapInvoiceDetail.WEBINVOICEITEMS();

        actual.BILLINGDOC = 'a';
        actual.ITEM_NUMBER = 'a';
        actual.HG_LV_ITEM = 'a';
        actual.INV_QTY = 0;
        actual.SALES_UNIT = 'a';
        actual.SALES_UNIT_ISO = 'a';
        actual.NETVAL_INV = 0;
        actual.REF_DOC_NUMBER = 'a';
        actual.REF_DOC_ITEM = 'a';
        actual.REF_DOC_CAT = 'a';
        actual.REF_DOC_CAT_TEXT = 'a';
        actual.SD_DOC_NUMBER = 'a';
        actual.SD_DOC_ITEM = 'a';
        actual.SD_DOC_REF = 'a';
        actual.SD_DOC_CAT = 'a';
        actual.SD_DOC_CAT_TEXT = 'a';
        actual.MATERIAL = 'a';
        actual.SHORT_TEXT = 'a';
        actual.ITEM_TYPE = 'a';
        actual.ITEM_TYPE_TEXT = 'a';
        actual.ITEM_CATEG = 'a';
        actual.ITEM_CATEG_TEXT = 'a';
        actual.DIVISION = 'a';
        actual.DIVISION_TEXT = 'a';
        actual.PLANT = 'a';
        actual.PLANT_NAME = 'a';
        actual.CASH_DISC = 'a';
        actual.CSHDISCBAS = 0;
        actual.RETURNS = 'a';
        actual.EAN_UPC = 'a';
        actual.TAXJURCODE = 'a';
        actual.TAX_AMOUNT = 0;
        actual.ITEM_TEXT = 'a';
        actual.BRVAL_INV = 0;
        actual.STVAL_INV = 0;
        actual.COND_SUBTOTAL1 = 0;
        actual.COND_SUBTOTAL2 = 0;
        actual.COND_SUBTOTAL3 = 0;
        actual.COND_SUBTOTAL4 = 0;
        actual.COND_SUBTOTAL5 = 0;
        actual.COND_SUBTOTAL6 = 0;
        actual.REF_DOC_CAT_LONG = 'a';
        actual.SD_DOC_CAT_LONG = 'a';
        actual.MATERIAL_LONG = 'a';
        system.assertEquals('a', actual.BILLINGDOC);
        system.assertEquals('a', actual.ITEM_NUMBER);
        system.assertEquals('a', actual.HG_LV_ITEM);
        system.assertEquals(0, actual.INV_QTY);
        system.assertEquals('a', actual.SALES_UNIT);
        system.assertEquals('a', actual.SALES_UNIT_ISO);
        system.assertEquals(0, actual.NETVAL_INV);
        system.assertEquals('a', actual.REF_DOC_NUMBER);
        system.assertEquals('a', actual.REF_DOC_ITEM);
        system.assertEquals('a', actual.REF_DOC_CAT);
        system.assertEquals('a', actual.REF_DOC_CAT_TEXT);
        system.assertEquals('a', actual.SD_DOC_NUMBER);
        system.assertEquals('a', actual.SD_DOC_ITEM);
        system.assertEquals('a', actual.SD_DOC_REF);
        system.assertEquals('a', actual.SD_DOC_CAT);
        system.assertEquals('a', actual.SD_DOC_CAT_TEXT);
        system.assertEquals('a', actual.MATERIAL);
        system.assertEquals('a', actual.SHORT_TEXT);
        system.assertEquals('a', actual.ITEM_TYPE);
        system.assertEquals('a', actual.ITEM_TYPE_TEXT);
        system.assertEquals('a', actual.ITEM_CATEG);
        system.assertEquals('a', actual.ITEM_CATEG_TEXT);
        system.assertEquals('a', actual.DIVISION);
        system.assertEquals('a', actual.DIVISION_TEXT);
        system.assertEquals('a', actual.PLANT);
        system.assertEquals('a', actual.PLANT_NAME);
        system.assertEquals('a', actual.CASH_DISC);
        system.assertEquals(0, actual.CSHDISCBAS);
        system.assertEquals('a', actual.RETURNS);
        system.assertEquals('a', actual.EAN_UPC);
        system.assertEquals('a', actual.TAXJURCODE);
        system.assertEquals(0, actual.TAX_AMOUNT);
        system.assertEquals('a', actual.ITEM_TEXT);
        system.assertEquals(0, actual.BRVAL_INV);
        system.assertEquals(0, actual.STVAL_INV);
        system.assertEquals(0, actual.COND_SUBTOTAL1);
        system.assertEquals(0, actual.COND_SUBTOTAL2);
        system.assertEquals(0, actual.COND_SUBTOTAL3);
        system.assertEquals(0, actual.COND_SUBTOTAL4);
        system.assertEquals(0, actual.COND_SUBTOTAL5);
        system.assertEquals(0, actual.COND_SUBTOTAL6);
        system.assertEquals('a', actual.REF_DOC_CAT_LONG);
        system.assertEquals('a', actual.SD_DOC_CAT_LONG);
        system.assertEquals('a', actual.MATERIAL_LONG);
    }
    @istest
    private static void testWEBINVOICEPARTNERS() {
        sapInvoiceDetail.WEBINVOICEPARTNERS actual = new sapInvoiceDetail.WEBINVOICEPARTNERS();

        actual.PARTN_ROLE = 'a';
        actual.PARTN_ROLE_TEXT = 'a';
        actual.CUSTOMER = 'a';
        actual.FORMOFADDR = 'a';
        actual.NAME = 'a';
        actual.NAME_2 = 'a';
        actual.NAME_3 = 'a';
        actual.NAME_4 = 'a';
        actual.STREET = 'a';
        actual.COUNTRY = 'a';
        actual.COUNTRY_ISO = 'a';
        actual.POSTL_CODE = 'a';
        actual.POBX_PCD = 'a';
        actual.POBX_CTY = 'a';
        actual.CITY = 'a';
        actual.DISTRICT = 'a';
        actual.REGION = 'a';
        actual.REGION_TEXT = 'a';
        actual.CITY_CODE = 'a';
        actual.CITY_CODE_TEXT = 'a';
        actual.COUNTRY_CDE = 'a';
        actual.COUNTRY_CDE_TEXT = 'a';
        actual.PO_BOX = 'a';
        actual.TELEPHONE = 'a';
        actual.TELEPHONE2 = 'a';
        actual.TELEBOX = 'a';
        actual.FAX_NUMBER = 'a';
        actual.TELETEX = 'a';
        actual.TELEX = 'a';
        actual.TRANSPZONE = 'a';
        actual.TRANSPZONE_TEXT = 'a';
        actual.HOUSE_NO = 'a';
        actual.GENDER = 'a';
        actual.GENDER_TEXT = 'a';
        actual.NAME_LIST = 'a';
        system.assertEquals('a', actual.PARTN_ROLE);
        system.assertEquals('a', actual.PARTN_ROLE_TEXT);
        system.assertEquals('a', actual.CUSTOMER);
        system.assertEquals('a', actual.FORMOFADDR);
        system.assertEquals('a', actual.NAME);
        system.assertEquals('a', actual.NAME_2);
        system.assertEquals('a', actual.NAME_3);
        system.assertEquals('a', actual.NAME_4);
        system.assertEquals('a', actual.STREET);
        system.assertEquals('a', actual.COUNTRY);
        system.assertEquals('a', actual.COUNTRY_ISO);
        system.assertEquals('a', actual.POSTL_CODE);
        system.assertEquals('a', actual.POBX_PCD);
        system.assertEquals('a', actual.POBX_CTY);
        system.assertEquals('a', actual.CITY);
        system.assertEquals('a', actual.DISTRICT);
        system.assertEquals('a', actual.REGION);
        system.assertEquals('a', actual.REGION_TEXT);
        system.assertEquals('a', actual.CITY_CODE);
        system.assertEquals('a', actual.CITY_CODE_TEXT);
        system.assertEquals('a', actual.COUNTRY_CDE);
        system.assertEquals('a', actual.COUNTRY_CDE_TEXT);
        system.assertEquals('a', actual.PO_BOX);
        system.assertEquals('a', actual.TELEPHONE);
        system.assertEquals('a', actual.TELEPHONE2);
        system.assertEquals('a', actual.TELEBOX);
        system.assertEquals('a', actual.FAX_NUMBER);
        system.assertEquals('a', actual.TELETEX);
        system.assertEquals('a', actual.TELEX);
        system.assertEquals('a', actual.TRANSPZONE);
        system.assertEquals('a', actual.TRANSPZONE_TEXT);
        system.assertEquals('a', actual.HOUSE_NO);
        system.assertEquals('a', actual.GENDER);
        system.assertEquals('a', actual.GENDER_TEXT);
        system.assertEquals('a', actual.NAME_LIST);
    }

    @istest
    private static void testRun() {
        sapInvoiceDetail request = testSetup();
        sapInvoiceDetail response = request.run();
        system.assertEquals('a', response.BAPI_WEBINVOICE_GETDETAIL.PARTNER_NUMBER);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static sapInvoiceDetail testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('sapInvoiceDetail');
        sapInvoiceDetail request = new sapInvoiceDetail();
        request.BAPI_WEBINVOICE_GETDETAIL.PARTNER_NUMBER = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        sapInvoiceDetail input = new sapInvoiceDetail();
        input.BAPI_WEBINVOICE_GETDETAIL.PARTNER_NUMBER = 'a';
        sapInvoiceDetail actual = (sapInvoiceDetail)JSON.deserialize(input.serialize(), sapInvoiceDetail.class);
        system.assertEquals('a', actual.BAPI_WEBINVOICE_GETDETAIL.PARTNER_NUMBER);
    }

    @istest
    private static void testDeserialize() {
        sapInvoiceDetail output = new sapInvoiceDetail();
        output.BAPI_WEBINVOICE_GETDETAIL.PARTNER_NUMBER = 'a';

        string s = output.serialize();
        sapInvoiceDetail actual = sapInvoiceDetail.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.BAPI_WEBINVOICE_GETDETAIL.PARTNER_NUMBER);
    }

    @istest
    private static void testDeserializeError() {
        try {
            sapInvoiceDetail actual = sapInvoiceDetail.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (sapInvoiceDetail.sapInvoiceDetailException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            sapInvoiceDetail actual = sapInvoiceDetail.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (sapInvoiceDetail.sapInvoiceDetailException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        sapInvoiceDetail output = new sapInvoiceDetail();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        sapInvoiceDetail output = new sapInvoiceDetail();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        sapInvoiceDetail output2 = new sapInvoiceDetail();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        sapInvoiceDetail output = new sapInvoiceDetail();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('BAPI_WEBINVOICE_GETDETAIL'));
        system.assert(keys.contains('WEBINVOICEDOCUMENT'));
        system.assert(keys.contains('RETURN_x'));
        system.assert(keys.contains('WEBINVOICEITEMS'));
        system.assert(keys.contains('WEBINVOICEPARTNERS'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('BAPI_WEBINVOICE_GETDETAIL', first.name);
    }

    @istest
    private static void testException() {
        sapInvoiceDetail.sapInvoiceDetailException e = new sapInvoiceDetail.sapInvoiceDetailException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            sapInvoiceDetail.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapInvoiceDetail.sapInvoiceDetailException e) {
            System.assert(true);
        }
        
        try {
            sapInvoiceDetail output = new sapInvoiceDetail();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapInvoiceDetail.sapInvoiceDetailException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            sapInvoiceDetail output = new sapInvoiceDetail();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapInvoiceDetail.sapInvoiceDetailException e) {
            System.assert(true);
        }

        try {
            sapInvoiceDetail output = new sapInvoiceDetail();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapInvoiceDetail.sapInvoiceDetailException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            sapInvoiceDetail.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapInvoiceDetail.sapInvoiceDetailException e) {
            System.assert(true);
        }
        
        try {
            sapInvoiceDetail.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapInvoiceDetail.sapInvoiceDetailException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            sapInvoiceDetail.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapInvoiceDetail.sapInvoiceDetailException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        sapInvoiceDetail output = new sapInvoiceDetail();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}