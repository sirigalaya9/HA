/* 
 * Generated by Overcast UTC 2024-03-18 07:45:19Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ovcSAPBDSGetDocumentTest {
    @istest
    private static void testovcSAPBDSGetDocument() {
        ovcSAPBDSGetDocument actual = new ovcSAPBDSGetDocument();
        system.assertNotEquals(null, actual.BDS_DOCUMENT_GET_TABLE);
        system.assertNotEquals(null, actual.SIGNATURE);
        system.assertNotEquals(null, actual.COMPONENTS);
        system.assertNotEquals(null, actual.CONTENT);
        system.assertNotEquals(null, actual.ASCII_CONTENT);
    }

    @istest
    private static void testBDS_DOCUMENT_GET_TABLE() {
        ovcSAPBDSGetDocument.BDS_DOCUMENT_GET_TABLE actual = new ovcSAPBDSGetDocument.BDS_DOCUMENT_GET_TABLE();

        actual.CLIENT = 'a';
        actual.DOC_ID = 'a';
        actual.BINARY_FLAG = 'a';
        system.assertEquals('a', actual.CLIENT);
        system.assertEquals('a', actual.DOC_ID);
        system.assertEquals('a', actual.BINARY_FLAG);
    }
    @istest
    private static void testSIGNATURE() {
        ovcSAPBDSGetDocument.SIGNATURE actual = new ovcSAPBDSGetDocument.SIGNATURE();

        actual.DOC_COUNT = 'a';
        actual.DOC_ID = 'a';
        actual.DOC_VER_NO = 'a';
        actual.DOC_VAR_ID = 'a';
        actual.DOC_VAR_TG = 'a';
        actual.COMP_COUNT = 'a';
        actual.PROP_NAME = 'a';
        actual.PROP_VALUE = 'a';
        system.assertEquals('a', actual.DOC_COUNT);
        system.assertEquals('a', actual.DOC_ID);
        system.assertEquals('a', actual.DOC_VER_NO);
        system.assertEquals('a', actual.DOC_VAR_ID);
        system.assertEquals('a', actual.DOC_VAR_TG);
        system.assertEquals('a', actual.COMP_COUNT);
        system.assertEquals('a', actual.PROP_NAME);
        system.assertEquals('a', actual.PROP_VALUE);
    }
    @istest
    private static void testCOMPONENTS() {
        ovcSAPBDSGetDocument.COMPONENTS actual = new ovcSAPBDSGetDocument.COMPONENTS();

        actual.DOC_COUNT = 'a';
        actual.COMP_COUNT = 'a';
        actual.COMP_ID = 'a';
        actual.MIMETYPE = 'a';
        actual.COMP_SIZE = 'a';
        system.assertEquals('a', actual.DOC_COUNT);
        system.assertEquals('a', actual.COMP_COUNT);
        system.assertEquals('a', actual.COMP_ID);
        system.assertEquals('a', actual.MIMETYPE);
        system.assertEquals('a', actual.COMP_SIZE);
    }
    @istest
    private static void testCONTENT() {
        ovcSAPBDSGetDocument.CONTENT actual = new ovcSAPBDSGetDocument.CONTENT();

        actual.LINE = null;
        system.assertEquals(null, actual.LINE);
    }
    @istest
    private static void testASCII_CONTENT() {
        ovcSAPBDSGetDocument.ASCII_CONTENT actual = new ovcSAPBDSGetDocument.ASCII_CONTENT();

        actual.LINE = 'a';
        system.assertEquals('a', actual.LINE);
    }

    @istest
    private static void testRun() {
        ovcSAPBDSGetDocument request = testSetup();
        ovcSAPBDSGetDocument response = request.run();
        system.assertEquals('a', response.BDS_DOCUMENT_GET_TABLE.CLIENT);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static ovcSAPBDSGetDocument testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ovcSAPBDSGetDocument');
        ovcSAPBDSGetDocument request = new ovcSAPBDSGetDocument();
        request.BDS_DOCUMENT_GET_TABLE.CLIENT = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ovcSAPBDSGetDocument input = new ovcSAPBDSGetDocument();
        input.BDS_DOCUMENT_GET_TABLE.CLIENT = 'a';
        ovcSAPBDSGetDocument actual = (ovcSAPBDSGetDocument)JSON.deserialize(input.serialize(), ovcSAPBDSGetDocument.class);
        system.assertEquals('a', actual.BDS_DOCUMENT_GET_TABLE.CLIENT);
    }

    @istest
    private static void testDeserialize() {
        ovcSAPBDSGetDocument output = new ovcSAPBDSGetDocument();
        output.BDS_DOCUMENT_GET_TABLE.CLIENT = 'a';

        string s = output.serialize();
        ovcSAPBDSGetDocument actual = ovcSAPBDSGetDocument.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.BDS_DOCUMENT_GET_TABLE.CLIENT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ovcSAPBDSGetDocument actual = ovcSAPBDSGetDocument.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ovcSAPBDSGetDocument actual = ovcSAPBDSGetDocument.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        ovcSAPBDSGetDocument output = new ovcSAPBDSGetDocument();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ovcSAPBDSGetDocument output = new ovcSAPBDSGetDocument();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ovcSAPBDSGetDocument output2 = new ovcSAPBDSGetDocument();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ovcSAPBDSGetDocument output = new ovcSAPBDSGetDocument();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('BDS_DOCUMENT_GET_TABLE'));
        system.assert(keys.contains('SIGNATURE'));
        system.assert(keys.contains('COMPONENTS'));
        system.assert(keys.contains('CONTENT'));
        system.assert(keys.contains('ASCII_CONTENT'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('BDS_DOCUMENT_GET_TABLE', first.name);
    }

    @istest
    private static void testException() {
        ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException e = new ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            ovcSAPBDSGetDocument.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException e) {
            System.assert(true);
        }
        
        try {
            ovcSAPBDSGetDocument output = new ovcSAPBDSGetDocument();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            ovcSAPBDSGetDocument output = new ovcSAPBDSGetDocument();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException e) {
            System.assert(true);
        }

        try {
            ovcSAPBDSGetDocument output = new ovcSAPBDSGetDocument();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            ovcSAPBDSGetDocument.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException e) {
            System.assert(true);
        }
        
        try {
            ovcSAPBDSGetDocument.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ovcSAPBDSGetDocument.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPBDSGetDocument.ovcSAPBDSGetDocumentException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        ovcSAPBDSGetDocument output = new ovcSAPBDSGetDocument();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}