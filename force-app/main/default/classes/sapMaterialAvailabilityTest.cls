/* 
 * Generated by Overcast UTC 2024-03-12 09:51:19Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class sapMaterialAvailabilityTest {
    @istest
    private static void testsapMaterialAvailability() {
        sapMaterialAvailability actual = new sapMaterialAvailability();
        system.assertNotEquals(null, actual.BAPI_MATERIAL_AVAILABILITY);
        system.assertNotEquals(null, actual.MATERIAL_EVG);
        system.assertNotEquals(null, actual.RETURN_x);
        system.assertNotEquals(null, actual.WMDVSX);
        system.assertNotEquals(null, actual.WMDVEX);
    }

    @istest
    private static void testBAPI_MATERIAL_AVAILABILITY() {
        sapMaterialAvailability.BAPI_MATERIAL_AVAILABILITY actual = new sapMaterialAvailability.BAPI_MATERIAL_AVAILABILITY();

        actual.PLANT = 'a';
        actual.MATERIAL = 'a';
        actual.UNIT = 'a';
        actual.CHECK_RULE = 'a';
        actual.STGE_LOC = 'a';
        actual.BATCH = 'a';
        actual.CUSTOMER = 'a';
        actual.DOC_NUMBER = 'a';
        actual.ITM_NUMBER = 'a';
        actual.WBS_ELEM = 'a';
        actual.STOCK_IND = 'a';
        actual.DEC_FOR_ROUNDING = 0;
        actual.DEC_FOR_ROUNDING_X = 'a';
        actual.READ_ATP_LOCK = 'a';
        actual.READ_ATP_LOCK_X = 'a';
        actual.SGT_RCAT = 'a';
        actual.MATERIAL_LONG = 'a';
        actual.ENDLEADTME = Date.newInstance(2000,1,1);
        actual.AV_QTY_PLT = 0;
        actual.DIALOGFLAG = 'a';
        system.assertEquals('a', actual.PLANT);
        system.assertEquals('a', actual.MATERIAL);
        system.assertEquals('a', actual.UNIT);
        system.assertEquals('a', actual.CHECK_RULE);
        system.assertEquals('a', actual.STGE_LOC);
        system.assertEquals('a', actual.BATCH);
        system.assertEquals('a', actual.CUSTOMER);
        system.assertEquals('a', actual.DOC_NUMBER);
        system.assertEquals('a', actual.ITM_NUMBER);
        system.assertEquals('a', actual.WBS_ELEM);
        system.assertEquals('a', actual.STOCK_IND);
        system.assertEquals(0, actual.DEC_FOR_ROUNDING);
        system.assertEquals('a', actual.DEC_FOR_ROUNDING_X);
        system.assertEquals('a', actual.READ_ATP_LOCK);
        system.assertEquals('a', actual.READ_ATP_LOCK_X);
        system.assertEquals('a', actual.SGT_RCAT);
        system.assertEquals('a', actual.MATERIAL_LONG);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ENDLEADTME);
        system.assertEquals(0, actual.AV_QTY_PLT);
        system.assertEquals('a', actual.DIALOGFLAG);
    }
    @istest
    private static void testMATERIAL_EVG() {
        sapMaterialAvailability.MATERIAL_EVG actual = new sapMaterialAvailability.MATERIAL_EVG();

        actual.MATERIAL_EXT = 'a';
        actual.MATERIAL_VERS = 'a';
        actual.MATERIAL_GUID = 'a';
        system.assertEquals('a', actual.MATERIAL_EXT);
        system.assertEquals('a', actual.MATERIAL_VERS);
        system.assertEquals('a', actual.MATERIAL_GUID);
    }
    @istest
    private static void testRETURN_x() {
        sapMaterialAvailability.RETURN_x actual = new sapMaterialAvailability.RETURN_x();

        actual.TYPE_x = 'a';
        actual.CODE = 'a';
        actual.MESSAGE = 'a';
        actual.LOG_NO = 'a';
        actual.LOG_MSG_NO = 'a';
        actual.MESSAGE_V1 = 'a';
        actual.MESSAGE_V2 = 'a';
        actual.MESSAGE_V3 = 'a';
        actual.MESSAGE_V4 = 'a';
        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.CODE);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
    }
    @istest
    private static void testWMDVSX() {
        sapMaterialAvailability.WMDVSX actual = new sapMaterialAvailability.WMDVSX();

        actual.REQ_DATE = Date.newInstance(2000,1,1);
        actual.REQ_QTY = 0;
        actual.DELKZ = 'a';
        actual.YLINE = 0;
        system.assertEquals(Date.newInstance(2000,1,1), actual.REQ_DATE);
        system.assertEquals(0, actual.REQ_QTY);
        system.assertEquals('a', actual.DELKZ);
        system.assertEquals(0, actual.YLINE);
    }
    @istest
    private static void testWMDVEX() {
        sapMaterialAvailability.WMDVEX actual = new sapMaterialAvailability.WMDVEX();

        actual.BDCNT = 'a';
        actual.REQ_DATE = Date.newInstance(2000,1,1);
        actual.REQ_QTY = 0;
        actual.COM_DATE = Date.newInstance(2000,1,1);
        actual.COM_QTY = 0;
        system.assertEquals('a', actual.BDCNT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.REQ_DATE);
        system.assertEquals(0, actual.REQ_QTY);
        system.assertEquals(Date.newInstance(2000,1,1), actual.COM_DATE);
        system.assertEquals(0, actual.COM_QTY);
    }

    @istest
    private static void testRun() {
        sapMaterialAvailability request = testSetup();
        sapMaterialAvailability response = request.run();
        system.assertEquals('a', response.BAPI_MATERIAL_AVAILABILITY.PLANT);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static sapMaterialAvailability testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('sapMaterialAvailability');
        sapMaterialAvailability request = new sapMaterialAvailability();
        request.BAPI_MATERIAL_AVAILABILITY.PLANT = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        sapMaterialAvailability input = new sapMaterialAvailability();
        input.BAPI_MATERIAL_AVAILABILITY.PLANT = 'a';
        sapMaterialAvailability actual = (sapMaterialAvailability)JSON.deserialize(input.serialize(), sapMaterialAvailability.class);
        system.assertEquals('a', actual.BAPI_MATERIAL_AVAILABILITY.PLANT);
    }

    @istest
    private static void testDeserialize() {
        sapMaterialAvailability output = new sapMaterialAvailability();
        output.BAPI_MATERIAL_AVAILABILITY.PLANT = 'a';

        string s = output.serialize();
        sapMaterialAvailability actual = sapMaterialAvailability.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.BAPI_MATERIAL_AVAILABILITY.PLANT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            sapMaterialAvailability actual = sapMaterialAvailability.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (sapMaterialAvailability.sapMaterialAvailabilityException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            sapMaterialAvailability actual = sapMaterialAvailability.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (sapMaterialAvailability.sapMaterialAvailabilityException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        sapMaterialAvailability output = new sapMaterialAvailability();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        sapMaterialAvailability output = new sapMaterialAvailability();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        sapMaterialAvailability output2 = new sapMaterialAvailability();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        sapMaterialAvailability output = new sapMaterialAvailability();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('BAPI_MATERIAL_AVAILABILITY'));
        system.assert(keys.contains('MATERIAL_EVG'));
        system.assert(keys.contains('RETURN_x'));
        system.assert(keys.contains('WMDVSX'));
        system.assert(keys.contains('WMDVEX'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('BAPI_MATERIAL_AVAILABILITY', first.name);
    }

    @istest
    private static void testException() {
        sapMaterialAvailability.sapMaterialAvailabilityException e = new sapMaterialAvailability.sapMaterialAvailabilityException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            sapMaterialAvailability.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapMaterialAvailability.sapMaterialAvailabilityException e) {
            System.assert(true);
        }
        
        try {
            sapMaterialAvailability output = new sapMaterialAvailability();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapMaterialAvailability.sapMaterialAvailabilityException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            sapMaterialAvailability output = new sapMaterialAvailability();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapMaterialAvailability.sapMaterialAvailabilityException e) {
            System.assert(true);
        }

        try {
            sapMaterialAvailability output = new sapMaterialAvailability();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapMaterialAvailability.sapMaterialAvailabilityException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            sapMaterialAvailability.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapMaterialAvailability.sapMaterialAvailabilityException e) {
            System.assert(true);
        }
        
        try {
            sapMaterialAvailability.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapMaterialAvailability.sapMaterialAvailabilityException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            sapMaterialAvailability.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapMaterialAvailability.sapMaterialAvailabilityException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        sapMaterialAvailability output = new sapMaterialAvailability();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}