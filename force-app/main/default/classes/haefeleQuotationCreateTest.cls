/* 
 * Generated by Overcast UTC 2024-03-12 08:29:52Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class haefeleQuotationCreateTest {
    @istest
    private static void testhaefeleQuotationCreate() {
        haefeleQuotationCreate actual = new haefeleQuotationCreate();
        system.assertNotEquals(null, actual.Z_HWWPIWS_CREATE_QUOTATION);
        system.assertNotEquals(null, actual.I_HEADER);
        system.assertNotEquals(null, actual.E_HEADER);
        system.assertNotEquals(null, actual.E_HEADER_NEW);
        system.assertNotEquals(null, actual.IT_POS);
        system.assertNotEquals(null, actual.IT_KOMV);
        system.assertNotEquals(null, actual.IT_TEXTE);
        system.assertNotEquals(null, actual.IT_CFGVALUE);
        system.assertNotEquals(null, actual.ET_POS);
        system.assertNotEquals(null, actual.ET_EINT_OUT);
        system.assertNotEquals(null, actual.ET_KOMV_OUT);
        system.assertNotEquals(null, actual.ET_TEXTE);
        system.assertNotEquals(null, actual.ET_MSG_OUT);
        system.assertNotEquals(null, actual.ET_CONTAINER);
        system.assertNotEquals(null, actual.ET_CFGVALUE);
    }

    @istest
    private static void testZ_HWWPIWS_CREATE_QUOTATION() {
        haefeleQuotationCreate.Z_HWWPIWS_CREATE_QUOTATION actual = new haefeleQuotationCreate.Z_HWWPIWS_CREATE_QUOTATION();

        actual.I_SESSION = 'a';
        actual.I_LGCONTNO = 'a';
        actual.I_SOURCE = 'a';
        actual.I_SIMULATION = 'a';
        actual.I_WVDAT = Date.newInstance(2000,1,1);
        actual.I_GPANR = 'a';
        actual.E_SESSION = 'a';
        system.assertEquals('a', actual.I_SESSION);
        system.assertEquals('a', actual.I_LGCONTNO);
        system.assertEquals('a', actual.I_SOURCE);
        system.assertEquals('a', actual.I_SIMULATION);
        system.assertEquals(Date.newInstance(2000,1,1), actual.I_WVDAT);
        system.assertEquals('a', actual.I_GPANR);
        system.assertEquals('a', actual.E_SESSION);
    }
    @istest
    private static void testI_HEADER() {
        haefeleQuotationCreate.I_HEADER actual = new haefeleQuotationCreate.I_HEADER();

        actual.VKORG = 'a';
        actual.VTWEG = 'a';
        actual.SPART = 'a';
        actual.VKBUR = 'a';
        actual.CUSNO = 'a';
        actual.ORDNO = 'a';
        actual.ORDSIGNS = 'a';
        actual.DVWEEKH = 'a';
        actual.LFDAT_H = 'a';
        actual.DVTYP = 'a';
        actual.LIFSP = 'a';
        actual.DVCUSNR = 'a';
        actual.DVNAME1 = 'a';
        actual.DVNAME2 = 'a';
        actual.DVSTREET1 = 'a';
        actual.DVHAUSNR = 'a';
        actual.DVHAUSNR2 = 'a';
        actual.DVREGION = 'a';
        actual.DVPOSTCODE = 'a';
        actual.DVLOC = 'a';
        actual.REGBYADMAYN = 'a';
        actual.AUART = 'a';
        actual.CMSNPACKYN = 'a';
        actual.ERDAT = Date.newInstance(2000,1,1);
        actual.GBSTK = 'a';
        actual.PARNR = 'a';
        actual.DLV_BLOCK = 'a';
        actual.DVADDRTYPE = 'a';
        actual.DVSTREET01 = 'a';
        actual.DVSTREET02 = 'a';
        actual.DVSTREET03 = 'a';
        actual.DVSTREET04 = 'a';
        actual.DVCOUNTRY = 'a';
        actual.USERNAME = 'a';
        actual.USERNAMEFIRST = 'a';
        actual.USERNAMELAST = 'a';
        actual.USEREMAIL = 'a';
        actual.USERPHONE = 'a';
        actual.FREIGHTCHARGES = 0;
        actual.SHIPMETHOD = 'a';
        actual.ZWELS = 'a';
        actual.CREDITCARDID = 'a';
        actual.CCARDASSIGNMENTID = 'a';
        actual.CREDITCARDSECURITY = 'a';
        actual.COUPONCODE = 'a';
        actual.ACTIONCODE = 'a';
        actual.ZZHWW_DSPLIT = 'a';
        actual.ZZINCO1 = 'a';
        actual.ZZINCO2 = 'a';
        actual.ZZHTR_DBSBANK = 'a';
        actual.ZZHTR_DBSFL = 'a';
        actual.ZZPARTNER = 'a';
        actual.VSBED = 'a';
        actual.x_FISSAN_PRJNR = 'a';
        actual.x_FISSAN_PBABK = 'a';
        actual.x_FISSAN_WVDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_SUBMISD = Date.newInstance(2000,1,1);
        actual.x_FISSAN_WUNSCHD = Date.newInstance(2000,1,1);
        actual.x_FISSAN_VERGDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_AUSDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_BAUDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_MONTDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_IDAT_PL = Date.newInstance(2000,1,1);
        actual.x_FISSAN_IDAT_IST = Date.newInstance(2000,1,1);
        actual.x_FISSAN_PROJPOS = 'a';
        actual.x_FISSAN_PROJUPOS = 'a';
        actual.x_FIS_ABGRU = 'a';
        actual.x_FISSAN_PRBEZ = 'a';
        actual.x_FISSAN_PBEZ2 = 'a';
        actual.x_FISSAN_PRBEZG = 'a';
        actual.x_FISSAN_PBEZ2G = 'a';
        actual.ZZHWW_GWERK = 'a';
        actual.ZZHDE_PROJNR = 'a';
        actual.ZZHWW_ZTERM = 'a';
        actual.ZZHDE_ANOBZ = 'a';
        actual.REF_DOC = 'a';
        actual.AUGRU = 'a';
        actual.ZZHTR_ZRTR = 'a';
        actual.USERPHONEEXTENS = 'a';
        actual.DVTELNUMBER = 'a';
        actual.DVTELEXTENS = 'a';
        actual.IDMAREFNR = 'a';
        actual.SCHEME_CODE = 'a';
        actual.ZZHWW_CRM_SALE = 'a';
        actual.ZZHWW_PPC = 'a';
        actual.ZZHWW_CRM_NOSUM = 'a';
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.VKBUR);
        system.assertEquals('a', actual.CUSNO);
        system.assertEquals('a', actual.ORDNO);
        system.assertEquals('a', actual.ORDSIGNS);
        system.assertEquals('a', actual.DVWEEKH);
        system.assertEquals('a', actual.LFDAT_H);
        system.assertEquals('a', actual.DVTYP);
        system.assertEquals('a', actual.LIFSP);
        system.assertEquals('a', actual.DVCUSNR);
        system.assertEquals('a', actual.DVNAME1);
        system.assertEquals('a', actual.DVNAME2);
        system.assertEquals('a', actual.DVSTREET1);
        system.assertEquals('a', actual.DVHAUSNR);
        system.assertEquals('a', actual.DVHAUSNR2);
        system.assertEquals('a', actual.DVREGION);
        system.assertEquals('a', actual.DVPOSTCODE);
        system.assertEquals('a', actual.DVLOC);
        system.assertEquals('a', actual.REGBYADMAYN);
        system.assertEquals('a', actual.AUART);
        system.assertEquals('a', actual.CMSNPACKYN);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.GBSTK);
        system.assertEquals('a', actual.PARNR);
        system.assertEquals('a', actual.DLV_BLOCK);
        system.assertEquals('a', actual.DVADDRTYPE);
        system.assertEquals('a', actual.DVSTREET01);
        system.assertEquals('a', actual.DVSTREET02);
        system.assertEquals('a', actual.DVSTREET03);
        system.assertEquals('a', actual.DVSTREET04);
        system.assertEquals('a', actual.DVCOUNTRY);
        system.assertEquals('a', actual.USERNAME);
        system.assertEquals('a', actual.USERNAMEFIRST);
        system.assertEquals('a', actual.USERNAMELAST);
        system.assertEquals('a', actual.USEREMAIL);
        system.assertEquals('a', actual.USERPHONE);
        system.assertEquals(0, actual.FREIGHTCHARGES);
        system.assertEquals('a', actual.SHIPMETHOD);
        system.assertEquals('a', actual.ZWELS);
        system.assertEquals('a', actual.CREDITCARDID);
        system.assertEquals('a', actual.CCARDASSIGNMENTID);
        system.assertEquals('a', actual.CREDITCARDSECURITY);
        system.assertEquals('a', actual.COUPONCODE);
        system.assertEquals('a', actual.ACTIONCODE);
        system.assertEquals('a', actual.ZZHWW_DSPLIT);
        system.assertEquals('a', actual.ZZINCO1);
        system.assertEquals('a', actual.ZZINCO2);
        system.assertEquals('a', actual.ZZHTR_DBSBANK);
        system.assertEquals('a', actual.ZZHTR_DBSFL);
        system.assertEquals('a', actual.ZZPARTNER);
        system.assertEquals('a', actual.VSBED);
        system.assertEquals('a', actual.x_FISSAN_PRJNR);
        system.assertEquals('a', actual.x_FISSAN_PBABK);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_WVDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_SUBMISD);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_WUNSCHD);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_VERGDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_AUSDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_BAUDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_MONTDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_IDAT_PL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_IDAT_IST);
        system.assertEquals('a', actual.x_FISSAN_PROJPOS);
        system.assertEquals('a', actual.x_FISSAN_PROJUPOS);
        system.assertEquals('a', actual.x_FIS_ABGRU);
        system.assertEquals('a', actual.x_FISSAN_PRBEZ);
        system.assertEquals('a', actual.x_FISSAN_PBEZ2);
        system.assertEquals('a', actual.x_FISSAN_PRBEZG);
        system.assertEquals('a', actual.x_FISSAN_PBEZ2G);
        system.assertEquals('a', actual.ZZHWW_GWERK);
        system.assertEquals('a', actual.ZZHDE_PROJNR);
        system.assertEquals('a', actual.ZZHWW_ZTERM);
        system.assertEquals('a', actual.ZZHDE_ANOBZ);
        system.assertEquals('a', actual.REF_DOC);
        system.assertEquals('a', actual.AUGRU);
        system.assertEquals('a', actual.ZZHTR_ZRTR);
        system.assertEquals('a', actual.USERPHONEEXTENS);
        system.assertEquals('a', actual.DVTELNUMBER);
        system.assertEquals('a', actual.DVTELEXTENS);
        system.assertEquals('a', actual.IDMAREFNR);
        system.assertEquals('a', actual.SCHEME_CODE);
        system.assertEquals('a', actual.ZZHWW_CRM_SALE);
        system.assertEquals('a', actual.ZZHWW_PPC);
        system.assertEquals('a', actual.ZZHWW_CRM_NOSUM);
    }
    @istest
    private static void testE_HEADER() {
        haefeleQuotationCreate.E_HEADER actual = new haefeleQuotationCreate.E_HEADER();

        actual.CUSNO = 'a';
        actual.ORDNO = 'a';
        actual.ORDSIGNS = 'a';
        actual.DVWEEKH = 'a';
        actual.DVTYP = 'a';
        actual.LIFSPX = 'a';
        actual.ORDDT2 = Date.newInstance(2000,1,1);
        actual.INVGOODSVALUEHCU = 0;
        actual.CUISO = 'a';
        actual.DVCUSNR = 'a';
        actual.DVNAME1 = 'a';
        actual.DVNAME2 = 'a';
        actual.DVSTREET1 = 'a';
        actual.DVHAUSNR = 'a';
        actual.DVHAUSNR2 = 'a';
        actual.DVREGION = 'a';
        actual.DVPOSTCODE = 'a';
        actual.DVLOC = 'a';
        actual.AUART = 'a';
        actual.CMSNPACKYN = 'a';
        actual.LIFSP = 'a';
        actual.VTEXT = 'a';
        actual.CMGST = 'a';
        actual.ROHE = 'a';
        actual.VSBED = 'a';
        actual.VSBEDT = 'a';
        actual.ZTERM = 'a';
        actual.INCO1 = 'a';
        actual.INCO2 = 'a';
        actual.BRGEW = 0;
        actual.GEWEI = 'a';
        actual.VOLUM = 0;
        actual.VOLEH = 'a';
        actual.PARNR = 'a';
        actual.HSTATE = 'a';
        actual.FREIGHTCHARGES = 0;
        actual.LOCALTAXES = 0;
        actual.COUPONCODE = 'a';
        actual.COUPONVALUE = 0;
        actual.SHIPMETHOD = 'a';
        actual.TOTALAMOUNT = 0;
        actual.DVSTREET01 = 'a';
        actual.DVSTREET02 = 'a';
        actual.DVSTREET03 = 'a';
        actual.DVSTREET04 = 'a';
        actual.DVCOUNTRY = 'a';
        actual.ZZHWW_DSPLIT = 'a';
        actual.ZZTEL_NUMBER = 'a';
        actual.ZZHTR_DBSBANK = 'a';
        actual.ZZHTR_DBSFL = 'a';
        actual.ZZHTR_AUGRU = 'a';
        actual.ZZHTR_ZRTR = 'a';
        actual.x_FISSAN_PRJNR = 'a';
        actual.x_FISSAN_PBABK = 'a';
        actual.x_FISSAN_WVDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_SUBMISD = Date.newInstance(2000,1,1);
        actual.x_FISSAN_WUNSCHD = Date.newInstance(2000,1,1);
        actual.x_FISSAN_VERGDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_AUSDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_BAUDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_MONTDAT = Date.newInstance(2000,1,1);
        actual.x_FISSAN_IDAT_PL = Date.newInstance(2000,1,1);
        actual.x_FISSAN_IDAT_IST = Date.newInstance(2000,1,1);
        actual.x_FISSAN_PROJPOS = 'a';
        actual.x_FISSAN_PROJUPOS = 'a';
        actual.x_FIS_ABGRU = 'a';
        actual.x_FISSAN_PRBEZ = 'a';
        actual.x_FISSAN_PBEZ2 = 'a';
        actual.x_FISSAN_PRBEZG = 'a';
        actual.x_FISSAN_PBEZ2G = 'a';
        actual.ZZHWW_GWERK = 'a';
        actual.ZZHDE_PROJNR = 'a';
        actual.ZZHDE_ANOBZ = 'a';
        actual.ZZHWW_DPDPREDICT = 'a';
        actual.USERPHONE = 'a';
        actual.USERPHONEEXTENS = 'a';
        actual.DVTELNUMBER = 'a';
        actual.DVTELEXTENS = 'a';
        actual.IDMAREFNR = 'a';
        actual.CONTRIBUTION_MARGIN_ABS = 0;
        actual.CONTRIBUTION_MARGIN_PROZ = 0;
        actual.ZZHWW_CRM_SALE = 'a';
        actual.ZZHWW_CRM_NOSUM = 'a';
        actual.ANGDT = Date.newInstance(2000,1,1);
        actual.BNDDT = Date.newInstance(2000,1,1);
        system.assertEquals('a', actual.CUSNO);
        system.assertEquals('a', actual.ORDNO);
        system.assertEquals('a', actual.ORDSIGNS);
        system.assertEquals('a', actual.DVWEEKH);
        system.assertEquals('a', actual.DVTYP);
        system.assertEquals('a', actual.LIFSPX);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ORDDT2);
        system.assertEquals(0, actual.INVGOODSVALUEHCU);
        system.assertEquals('a', actual.CUISO);
        system.assertEquals('a', actual.DVCUSNR);
        system.assertEquals('a', actual.DVNAME1);
        system.assertEquals('a', actual.DVNAME2);
        system.assertEquals('a', actual.DVSTREET1);
        system.assertEquals('a', actual.DVHAUSNR);
        system.assertEquals('a', actual.DVHAUSNR2);
        system.assertEquals('a', actual.DVREGION);
        system.assertEquals('a', actual.DVPOSTCODE);
        system.assertEquals('a', actual.DVLOC);
        system.assertEquals('a', actual.AUART);
        system.assertEquals('a', actual.CMSNPACKYN);
        system.assertEquals('a', actual.LIFSP);
        system.assertEquals('a', actual.VTEXT);
        system.assertEquals('a', actual.CMGST);
        system.assertEquals('a', actual.ROHE);
        system.assertEquals('a', actual.VSBED);
        system.assertEquals('a', actual.VSBEDT);
        system.assertEquals('a', actual.ZTERM);
        system.assertEquals('a', actual.INCO1);
        system.assertEquals('a', actual.INCO2);
        system.assertEquals(0, actual.BRGEW);
        system.assertEquals('a', actual.GEWEI);
        system.assertEquals(0, actual.VOLUM);
        system.assertEquals('a', actual.VOLEH);
        system.assertEquals('a', actual.PARNR);
        system.assertEquals('a', actual.HSTATE);
        system.assertEquals(0, actual.FREIGHTCHARGES);
        system.assertEquals(0, actual.LOCALTAXES);
        system.assertEquals('a', actual.COUPONCODE);
        system.assertEquals(0, actual.COUPONVALUE);
        system.assertEquals('a', actual.SHIPMETHOD);
        system.assertEquals(0, actual.TOTALAMOUNT);
        system.assertEquals('a', actual.DVSTREET01);
        system.assertEquals('a', actual.DVSTREET02);
        system.assertEquals('a', actual.DVSTREET03);
        system.assertEquals('a', actual.DVSTREET04);
        system.assertEquals('a', actual.DVCOUNTRY);
        system.assertEquals('a', actual.ZZHWW_DSPLIT);
        system.assertEquals('a', actual.ZZTEL_NUMBER);
        system.assertEquals('a', actual.ZZHTR_DBSBANK);
        system.assertEquals('a', actual.ZZHTR_DBSFL);
        system.assertEquals('a', actual.ZZHTR_AUGRU);
        system.assertEquals('a', actual.ZZHTR_ZRTR);
        system.assertEquals('a', actual.x_FISSAN_PRJNR);
        system.assertEquals('a', actual.x_FISSAN_PBABK);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_WVDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_SUBMISD);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_WUNSCHD);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_VERGDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_AUSDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_BAUDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_MONTDAT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_IDAT_PL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.x_FISSAN_IDAT_IST);
        system.assertEquals('a', actual.x_FISSAN_PROJPOS);
        system.assertEquals('a', actual.x_FISSAN_PROJUPOS);
        system.assertEquals('a', actual.x_FIS_ABGRU);
        system.assertEquals('a', actual.x_FISSAN_PRBEZ);
        system.assertEquals('a', actual.x_FISSAN_PBEZ2);
        system.assertEquals('a', actual.x_FISSAN_PRBEZG);
        system.assertEquals('a', actual.x_FISSAN_PBEZ2G);
        system.assertEquals('a', actual.ZZHWW_GWERK);
        system.assertEquals('a', actual.ZZHDE_PROJNR);
        system.assertEquals('a', actual.ZZHDE_ANOBZ);
        system.assertEquals('a', actual.ZZHWW_DPDPREDICT);
        system.assertEquals('a', actual.USERPHONE);
        system.assertEquals('a', actual.USERPHONEEXTENS);
        system.assertEquals('a', actual.DVTELNUMBER);
        system.assertEquals('a', actual.DVTELEXTENS);
        system.assertEquals('a', actual.IDMAREFNR);
        system.assertEquals(0, actual.CONTRIBUTION_MARGIN_ABS);
        system.assertEquals(0, actual.CONTRIBUTION_MARGIN_PROZ);
        system.assertEquals('a', actual.ZZHWW_CRM_SALE);
        system.assertEquals('a', actual.ZZHWW_CRM_NOSUM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ANGDT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BNDDT);
    }
    @istest
    private static void testE_HEADER_NEW() {
        haefeleQuotationCreate.E_HEADER_NEW actual = new haefeleQuotationCreate.E_HEADER_NEW();

        actual.CUSNO = 'a';
        actual.ORDNO = 'a';
        actual.ORDSIGNS = 'a';
        actual.DVWEEKH = 'a';
        actual.DVTYP = 'a';
        actual.LIFSPX = 'a';
        actual.ORDDT2 = Date.newInstance(2000,1,1);
        actual.INVGOODSVALUEHCU = 0;
        actual.CUISO = 'a';
        actual.DVCUSNR = 'a';
        actual.DVNAME1 = 'a';
        actual.DVNAME2 = 'a';
        actual.DVSTREET1 = 'a';
        actual.DVHAUSNR = 'a';
        actual.DVHAUSNR2 = 'a';
        actual.DVREGION = 'a';
        actual.DVPOSTCODE = 'a';
        actual.DVLOC = 'a';
        actual.AUART = 'a';
        actual.CMSNPACKYN = 'a';
        actual.LIFSP = 'a';
        actual.VTEXT = 'a';
        actual.CMGST = 'a';
        actual.ROHE = 'a';
        actual.VSBED = 'a';
        actual.VSBEDT = 'a';
        actual.ZTERM = 'a';
        actual.INCO1 = 'a';
        actual.INCO2 = 'a';
        actual.BRGEW = 0;
        actual.GEWEI = 'a';
        actual.VOLUM = 0;
        actual.VOLEH = 'a';
        actual.PARNR = 'a';
        actual.HSTATE = 'a';
        actual.FREIGHTCHARGES = 0;
        actual.LOCALTAXES = 0;
        actual.COUPONCODE = 'a';
        actual.COUPONVALUE = 0;
        actual.SHIPMETHOD = 'a';
        actual.TOTALAMOUNT = 0;
        actual.DVSTREET01 = 'a';
        actual.DVSTREET02 = 'a';
        actual.DVSTREET03 = 'a';
        actual.DVSTREET04 = 'a';
        actual.COUNTRY = 'a';
        actual.DVCOUNTRY = 'a';
        actual.USERNAME = 'a';
        actual.USERNAMEFIRST = 'a';
        actual.USERNAMELAST = 'a';
        actual.USEREMAIL = 'a';
        actual.USERPHONE = 'a';
        actual.ZWELS = 'a';
        actual.ZZHWW_DSPLIT = 'a';
        actual.ZZTEL_NUMBER = 'a';
        actual.ZZHTR_DBSBANK = 'a';
        actual.ZZHTR_DBSFL = 'a';
        actual.x_FISSAN_PBEZ2 = 'a';
        actual.ZZHWW_DPDPREDICT = 'a';
        actual.USERPHONEEXTENS = 'a';
        actual.DVTELNUMBER = 'a';
        actual.DVTELEXTENS = 'a';
        actual.IDMAREFNR = 'a';
        actual.CONTRIBUTION_MARGIN_ABS = 0;
        actual.CONTRIBUTION_MARGIN_PROZ = 0;
        actual.ANGDT = Date.newInstance(2000,1,1);
        actual.BNDDT = Date.newInstance(2000,1,1);
        system.assertEquals('a', actual.CUSNO);
        system.assertEquals('a', actual.ORDNO);
        system.assertEquals('a', actual.ORDSIGNS);
        system.assertEquals('a', actual.DVWEEKH);
        system.assertEquals('a', actual.DVTYP);
        system.assertEquals('a', actual.LIFSPX);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ORDDT2);
        system.assertEquals(0, actual.INVGOODSVALUEHCU);
        system.assertEquals('a', actual.CUISO);
        system.assertEquals('a', actual.DVCUSNR);
        system.assertEquals('a', actual.DVNAME1);
        system.assertEquals('a', actual.DVNAME2);
        system.assertEquals('a', actual.DVSTREET1);
        system.assertEquals('a', actual.DVHAUSNR);
        system.assertEquals('a', actual.DVHAUSNR2);
        system.assertEquals('a', actual.DVREGION);
        system.assertEquals('a', actual.DVPOSTCODE);
        system.assertEquals('a', actual.DVLOC);
        system.assertEquals('a', actual.AUART);
        system.assertEquals('a', actual.CMSNPACKYN);
        system.assertEquals('a', actual.LIFSP);
        system.assertEquals('a', actual.VTEXT);
        system.assertEquals('a', actual.CMGST);
        system.assertEquals('a', actual.ROHE);
        system.assertEquals('a', actual.VSBED);
        system.assertEquals('a', actual.VSBEDT);
        system.assertEquals('a', actual.ZTERM);
        system.assertEquals('a', actual.INCO1);
        system.assertEquals('a', actual.INCO2);
        system.assertEquals(0, actual.BRGEW);
        system.assertEquals('a', actual.GEWEI);
        system.assertEquals(0, actual.VOLUM);
        system.assertEquals('a', actual.VOLEH);
        system.assertEquals('a', actual.PARNR);
        system.assertEquals('a', actual.HSTATE);
        system.assertEquals(0, actual.FREIGHTCHARGES);
        system.assertEquals(0, actual.LOCALTAXES);
        system.assertEquals('a', actual.COUPONCODE);
        system.assertEquals(0, actual.COUPONVALUE);
        system.assertEquals('a', actual.SHIPMETHOD);
        system.assertEquals(0, actual.TOTALAMOUNT);
        system.assertEquals('a', actual.DVSTREET01);
        system.assertEquals('a', actual.DVSTREET02);
        system.assertEquals('a', actual.DVSTREET03);
        system.assertEquals('a', actual.DVSTREET04);
        system.assertEquals('a', actual.COUNTRY);
        system.assertEquals('a', actual.DVCOUNTRY);
        system.assertEquals('a', actual.USERNAME);
        system.assertEquals('a', actual.USERNAMEFIRST);
        system.assertEquals('a', actual.USERNAMELAST);
        system.assertEquals('a', actual.USEREMAIL);
        system.assertEquals('a', actual.USERPHONE);
        system.assertEquals('a', actual.ZWELS);
        system.assertEquals('a', actual.ZZHWW_DSPLIT);
        system.assertEquals('a', actual.ZZTEL_NUMBER);
        system.assertEquals('a', actual.ZZHTR_DBSBANK);
        system.assertEquals('a', actual.ZZHTR_DBSFL);
        system.assertEquals('a', actual.x_FISSAN_PBEZ2);
        system.assertEquals('a', actual.ZZHWW_DPDPREDICT);
        system.assertEquals('a', actual.USERPHONEEXTENS);
        system.assertEquals('a', actual.DVTELNUMBER);
        system.assertEquals('a', actual.DVTELEXTENS);
        system.assertEquals('a', actual.IDMAREFNR);
        system.assertEquals(0, actual.CONTRIBUTION_MARGIN_ABS);
        system.assertEquals(0, actual.CONTRIBUTION_MARGIN_PROZ);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ANGDT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BNDDT);
    }
    @istest
    private static void testIT_POS() {
        haefeleQuotationCreate.IT_POS actual = new haefeleQuotationCreate.IT_POS();

        actual.RUNNPOSNO = 'a';
        actual.ORDPOSNO = 'a';
        actual.CANCELFLG = 'a';
        actual.ARTNO = 'a';
        actual.MMUISO = 'a';
        actual.ORDPOSQT = 0;
        actual.DVCUSYRWK = 'a';
        actual.DVCUSDT = 'a';
        actual.CMSNTEXT = 'a';
        actual.IMMDELIV = 'a';
        actual.CANCELREA = 'a';
        actual.DELETEFLG = 'a';
        actual.ZZHAC_C1ID = 'a';
        actual.BSARK = 'a';
        actual.REF_DOC = 'a';
        actual.REF_DOC_IT = 'a';
        actual.ARKTX = 'a';
        system.assertEquals('a', actual.RUNNPOSNO);
        system.assertEquals('a', actual.ORDPOSNO);
        system.assertEquals('a', actual.CANCELFLG);
        system.assertEquals('a', actual.ARTNO);
        system.assertEquals('a', actual.MMUISO);
        system.assertEquals(0, actual.ORDPOSQT);
        system.assertEquals('a', actual.DVCUSYRWK);
        system.assertEquals('a', actual.DVCUSDT);
        system.assertEquals('a', actual.CMSNTEXT);
        system.assertEquals('a', actual.IMMDELIV);
        system.assertEquals('a', actual.CANCELREA);
        system.assertEquals('a', actual.DELETEFLG);
        system.assertEquals('a', actual.ZZHAC_C1ID);
        system.assertEquals('a', actual.BSARK);
        system.assertEquals('a', actual.REF_DOC);
        system.assertEquals('a', actual.REF_DOC_IT);
        system.assertEquals('a', actual.ARKTX);
    }
    @istest
    private static void testIT_KOMV() {
        haefeleQuotationCreate.IT_KOMV actual = new haefeleQuotationCreate.IT_KOMV();

        actual.RUNNPOSNO = 'a';
        actual.ORDPOSNO = 'a';
        actual.MATNR = 'a';
        actual.MEINS = 'a';
        actual.UMREZ = 0;
        actual.MANDT = 'a';
        actual.KNUMV = 'a';
        actual.KPOSN = 'a';
        actual.STUNR = 'a';
        actual.ZAEHK = 'a';
        actual.KAPPL = 'a';
        actual.KSCHL = 'a';
        actual.KDATU = Date.newInstance(2000,1,1);
        actual.KRECH = 'a';
        actual.KAWRT = 0;
        actual.KBETR = 0;
        actual.WAERS = 'a';
        actual.KKURS = 0;
        actual.KPEIN = 0;
        actual.KMEIN = 'a';
        actual.KUMZA = 0;
        actual.KUMNE = 0;
        actual.KNTYP = 'a';
        actual.KSTAT = 'a';
        actual.KNPRS = 'a';
        actual.KRUEK = 'a';
        actual.KRELI = 'a';
        actual.KHERK = 'a';
        actual.KGRPE = 'a';
        actual.KOUPD = 'a';
        actual.KOLNR = 'a';
        actual.KNUMH = 'a';
        actual.KOPOS = 'a';
        actual.KVSL1 = 'a';
        actual.SAKN1 = 'a';
        actual.MWSK1 = 'a';
        actual.KVSL2 = 'a';
        actual.SAKN2 = 'a';
        actual.MWSK2 = 'a';
        actual.LIFNR = 'a';
        actual.KUNNR = 'a';
        actual.KDIFF = 0;
        actual.KWERT = 0;
        actual.KSTEU = 'a';
        actual.KINAK = 'a';
        actual.KOAID = 'a';
        actual.ZAEKO = 'a';
        actual.KMXAW = 'a';
        actual.KMXWR = 'a';
        actual.KFAKTOR = 0;
        actual.KDUPL = 'a';
        actual.KFAKTOR1 = 0;
        actual.KZBZG = 'a';
        actual.KSTBS = 0;
        actual.KONMS = 'a';
        actual.KONWS = 'a';
        actual.KAWRT_K = 0;
        actual.KWAEH = 'a';
        actual.KWERT_K = 0;
        actual.KFKIV = 'a';
        actual.KVARC = 'a';
        actual.KMPRS = 'a';
        actual.PRSQU = 'a';
        actual.VARCOND = 'a';
        actual.STUFE = 0;
        actual.WEGXX = 0;
        actual.KTREL = 'a';
        actual.MDFLG = 'a';
        actual.TXJLV = 'a';
        actual.PRSCH = 'a';
        actual.KOFRM = 'a';
        actual.STFKZ = 'a';
        actual.KSTBM = 0;
        actual.KSTBM_NEXT = 0;
        actual.IX_KOMT1 = 0;
        actual.IX_GKOMV = 0;
        actual.ZAEHK_IND = 'a';
        actual.DRUKZ = 'a';
        actual.STUNB = 'a';
        actual.STUN2 = 'a';
        actual.KZWIW = 'a';
        actual.KOFRA = 'a';
        actual.KOFRS = 'a';
        actual.KMANU = 'a';
        actual.TXPRF = 'a';
        actual.KNEGA = 'a';
        actual.GANZZ = 'a';
        actual.KOBLI = 'a';
        actual.KAEND_BTR = 'a';
        actual.KAEND_WRT = 'a';
        actual.KAEND_UFK = 'a';
        actual.KAEND_RCH = 'a';
        actual.KAEND_LOE = 'a';
        actual.KAEND_MEH = 'a';
        actual.KZTERM = 'a';
        actual.FXMSG = 'a';
        actual.UPDKZ = 'a';
        actual.SELKZ = 'a';
        actual.BOSTA = 'a';
        actual.KSPAE = 'a';
        actual.LOEVM_KO = 'a';
        actual.KNUMA_BO = 'a';
        actual.BERGL = 'a';
        actual.VHART = 'a';
        actual.RDIFA = 'a';
        actual.KMENG = 'a';
        actual.KBUFF = 'a';
        actual.BOSTA_CR = 'a';
        actual.x_FIS_KZ_SD_EK = 'a';
        actual.x_FIS_ZZVPE = 'a';
        system.assertEquals('a', actual.RUNNPOSNO);
        system.assertEquals('a', actual.ORDPOSNO);
        system.assertEquals('a', actual.MATNR);
        system.assertEquals('a', actual.MEINS);
        system.assertEquals(0, actual.UMREZ);
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.KNUMV);
        system.assertEquals('a', actual.KPOSN);
        system.assertEquals('a', actual.STUNR);
        system.assertEquals('a', actual.ZAEHK);
        system.assertEquals('a', actual.KAPPL);
        system.assertEquals('a', actual.KSCHL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.KDATU);
        system.assertEquals('a', actual.KRECH);
        system.assertEquals(0, actual.KAWRT);
        system.assertEquals(0, actual.KBETR);
        system.assertEquals('a', actual.WAERS);
        system.assertEquals(0, actual.KKURS);
        system.assertEquals(0, actual.KPEIN);
        system.assertEquals('a', actual.KMEIN);
        system.assertEquals(0, actual.KUMZA);
        system.assertEquals(0, actual.KUMNE);
        system.assertEquals('a', actual.KNTYP);
        system.assertEquals('a', actual.KSTAT);
        system.assertEquals('a', actual.KNPRS);
        system.assertEquals('a', actual.KRUEK);
        system.assertEquals('a', actual.KRELI);
        system.assertEquals('a', actual.KHERK);
        system.assertEquals('a', actual.KGRPE);
        system.assertEquals('a', actual.KOUPD);
        system.assertEquals('a', actual.KOLNR);
        system.assertEquals('a', actual.KNUMH);
        system.assertEquals('a', actual.KOPOS);
        system.assertEquals('a', actual.KVSL1);
        system.assertEquals('a', actual.SAKN1);
        system.assertEquals('a', actual.MWSK1);
        system.assertEquals('a', actual.KVSL2);
        system.assertEquals('a', actual.SAKN2);
        system.assertEquals('a', actual.MWSK2);
        system.assertEquals('a', actual.LIFNR);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals(0, actual.KDIFF);
        system.assertEquals(0, actual.KWERT);
        system.assertEquals('a', actual.KSTEU);
        system.assertEquals('a', actual.KINAK);
        system.assertEquals('a', actual.KOAID);
        system.assertEquals('a', actual.ZAEKO);
        system.assertEquals('a', actual.KMXAW);
        system.assertEquals('a', actual.KMXWR);
        system.assertEquals(0, actual.KFAKTOR);
        system.assertEquals('a', actual.KDUPL);
        system.assertEquals(0, actual.KFAKTOR1);
        system.assertEquals('a', actual.KZBZG);
        system.assertEquals(0, actual.KSTBS);
        system.assertEquals('a', actual.KONMS);
        system.assertEquals('a', actual.KONWS);
        system.assertEquals(0, actual.KAWRT_K);
        system.assertEquals('a', actual.KWAEH);
        system.assertEquals(0, actual.KWERT_K);
        system.assertEquals('a', actual.KFKIV);
        system.assertEquals('a', actual.KVARC);
        system.assertEquals('a', actual.KMPRS);
        system.assertEquals('a', actual.PRSQU);
        system.assertEquals('a', actual.VARCOND);
        system.assertEquals(0, actual.STUFE);
        system.assertEquals(0, actual.WEGXX);
        system.assertEquals('a', actual.KTREL);
        system.assertEquals('a', actual.MDFLG);
        system.assertEquals('a', actual.TXJLV);
        system.assertEquals('a', actual.PRSCH);
        system.assertEquals('a', actual.KOFRM);
        system.assertEquals('a', actual.STFKZ);
        system.assertEquals(0, actual.KSTBM);
        system.assertEquals(0, actual.KSTBM_NEXT);
        system.assertEquals(0, actual.IX_KOMT1);
        system.assertEquals(0, actual.IX_GKOMV);
        system.assertEquals('a', actual.ZAEHK_IND);
        system.assertEquals('a', actual.DRUKZ);
        system.assertEquals('a', actual.STUNB);
        system.assertEquals('a', actual.STUN2);
        system.assertEquals('a', actual.KZWIW);
        system.assertEquals('a', actual.KOFRA);
        system.assertEquals('a', actual.KOFRS);
        system.assertEquals('a', actual.KMANU);
        system.assertEquals('a', actual.TXPRF);
        system.assertEquals('a', actual.KNEGA);
        system.assertEquals('a', actual.GANZZ);
        system.assertEquals('a', actual.KOBLI);
        system.assertEquals('a', actual.KAEND_BTR);
        system.assertEquals('a', actual.KAEND_WRT);
        system.assertEquals('a', actual.KAEND_UFK);
        system.assertEquals('a', actual.KAEND_RCH);
        system.assertEquals('a', actual.KAEND_LOE);
        system.assertEquals('a', actual.KAEND_MEH);
        system.assertEquals('a', actual.KZTERM);
        system.assertEquals('a', actual.FXMSG);
        system.assertEquals('a', actual.UPDKZ);
        system.assertEquals('a', actual.SELKZ);
        system.assertEquals('a', actual.BOSTA);
        system.assertEquals('a', actual.KSPAE);
        system.assertEquals('a', actual.LOEVM_KO);
        system.assertEquals('a', actual.KNUMA_BO);
        system.assertEquals('a', actual.BERGL);
        system.assertEquals('a', actual.VHART);
        system.assertEquals('a', actual.RDIFA);
        system.assertEquals('a', actual.KMENG);
        system.assertEquals('a', actual.KBUFF);
        system.assertEquals('a', actual.BOSTA_CR);
        system.assertEquals('a', actual.x_FIS_KZ_SD_EK);
        system.assertEquals('a', actual.x_FIS_ZZVPE);
    }
    @istest
    private static void testIT_TEXTE() {
        haefeleQuotationCreate.IT_TEXTE actual = new haefeleQuotationCreate.IT_TEXTE();

        actual.RUNNPOSNO = 'a';
        actual.ORDPOSNO = 'a';
        actual.TDID = 'a';
        actual.TDFORMAT = 'a';
        actual.TDLINE = 'a';
        system.assertEquals('a', actual.RUNNPOSNO);
        system.assertEquals('a', actual.ORDPOSNO);
        system.assertEquals('a', actual.TDID);
        system.assertEquals('a', actual.TDFORMAT);
        system.assertEquals('a', actual.TDLINE);
    }
    @istest
    private static void testIT_CFGVALUE() {
        haefeleQuotationCreate.IT_CFGVALUE actual = new haefeleQuotationCreate.IT_CFGVALUE();

        actual.RUNNPOSNO = 'a';
        actual.CONFIG_ID = 'a';
        actual.INST_ID = 'a';
        actual.CHARC = 'a';
        actual.CHARC_TXT = 'a';
        actual.VALUE = 'a';
        actual.VALUE_TXT = 'a';
        actual.AUTHOR = 'a';
        actual.VALUE_TO = 'a';
        actual.VALCODE = 'a';
        system.assertEquals('a', actual.RUNNPOSNO);
        system.assertEquals('a', actual.CONFIG_ID);
        system.assertEquals('a', actual.INST_ID);
        system.assertEquals('a', actual.CHARC);
        system.assertEquals('a', actual.CHARC_TXT);
        system.assertEquals('a', actual.VALUE);
        system.assertEquals('a', actual.VALUE_TXT);
        system.assertEquals('a', actual.AUTHOR);
        system.assertEquals('a', actual.VALUE_TO);
        system.assertEquals('a', actual.VALCODE);
    }
    @istest
    private static void testET_POS() {
        haefeleQuotationCreate.ET_POS actual = new haefeleQuotationCreate.ET_POS();

        actual.ORDPOSNO = 'a';
        actual.RUNNPOSNO = 'a';
        actual.CANCELFLG = 'a';
        actual.ARTNO = 'a';
        actual.ARTDESC = 'a';
        actual.MMUISO = 'a';
        actual.MMU = 'a';
        actual.ORDPOSQT = 0;
        actual.DVCUSYRWK = 'a';
        actual.DVCUSDT = 'a';
        actual.CMSNTEXT = 'a';
        actual.CUSARTNO = 'a';
        actual.PSTYV = 'a';
        actual.KZ_STL = 'a';
        actual.CHNGPOSS = 'a';
        actual.UEPOS = 'a';
        actual.ZZHDESTATE = 'a';
        actual.IMMDELIV = 'a';
        actual.BACKLOG = 'a';
        actual.DELNOPRT = 'a';
        actual.INVOICED = 'a';
        actual.POSTYPE = 'a';
        actual.ZZHTR_ABGRU = 'a';
        actual.ZZHAC_C1ID = 'a';
        actual.BSARK = 'a';
        actual.WERKS = 'a';
        actual.DEL_STATE = 'a';
        actual.ZZHDE_EINDT = Date.newInstance(2000,1,1);
        system.assertEquals('a', actual.ORDPOSNO);
        system.assertEquals('a', actual.RUNNPOSNO);
        system.assertEquals('a', actual.CANCELFLG);
        system.assertEquals('a', actual.ARTNO);
        system.assertEquals('a', actual.ARTDESC);
        system.assertEquals('a', actual.MMUISO);
        system.assertEquals('a', actual.MMU);
        system.assertEquals(0, actual.ORDPOSQT);
        system.assertEquals('a', actual.DVCUSYRWK);
        system.assertEquals('a', actual.DVCUSDT);
        system.assertEquals('a', actual.CMSNTEXT);
        system.assertEquals('a', actual.CUSARTNO);
        system.assertEquals('a', actual.PSTYV);
        system.assertEquals('a', actual.KZ_STL);
        system.assertEquals('a', actual.CHNGPOSS);
        system.assertEquals('a', actual.UEPOS);
        system.assertEquals('a', actual.ZZHDESTATE);
        system.assertEquals('a', actual.IMMDELIV);
        system.assertEquals('a', actual.BACKLOG);
        system.assertEquals('a', actual.DELNOPRT);
        system.assertEquals('a', actual.INVOICED);
        system.assertEquals('a', actual.POSTYPE);
        system.assertEquals('a', actual.ZZHTR_ABGRU);
        system.assertEquals('a', actual.ZZHAC_C1ID);
        system.assertEquals('a', actual.BSARK);
        system.assertEquals('a', actual.WERKS);
        system.assertEquals('a', actual.DEL_STATE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZHDE_EINDT);
    }
    @istest
    private static void testET_EINT_OUT() {
        haefeleQuotationCreate.ET_EINT_OUT actual = new haefeleQuotationCreate.ET_EINT_OUT();

        actual.ORDPOSNO = 'a';
        actual.RUNNPOSNO = 'a';
        actual.BDCNT = 'a';
        actual.REQ_DATE = Date.newInstance(2000,1,1);
        actual.REQ_QTY = 0;
        actual.COM_DATE = Date.newInstance(2000,1,1);
        actual.COM_QTY = 0;
        actual.LIFSP = 'a';
        actual.LFMNG = 0;
        actual.WERKS = 'a';
        actual.SHIPONDATE = Date.newInstance(2000,1,1);
        system.assertEquals('a', actual.ORDPOSNO);
        system.assertEquals('a', actual.RUNNPOSNO);
        system.assertEquals('a', actual.BDCNT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.REQ_DATE);
        system.assertEquals(0, actual.REQ_QTY);
        system.assertEquals(Date.newInstance(2000,1,1), actual.COM_DATE);
        system.assertEquals(0, actual.COM_QTY);
        system.assertEquals('a', actual.LIFSP);
        system.assertEquals(0, actual.LFMNG);
        system.assertEquals('a', actual.WERKS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.SHIPONDATE);
    }
    @istest
    private static void testET_KOMV_OUT() {
        haefeleQuotationCreate.ET_KOMV_OUT actual = new haefeleQuotationCreate.ET_KOMV_OUT();

        actual.RUNNPOSNO = 'a';
        actual.ORDPOSNO = 'a';
        actual.MATNR = 'a';
        actual.MEINS = 'a';
        actual.UMREZ = 0;
        actual.MANDT = 'a';
        actual.KNUMV = 'a';
        actual.KPOSN = 'a';
        actual.STUNR = 'a';
        actual.ZAEHK = 'a';
        actual.KAPPL = 'a';
        actual.KSCHL = 'a';
        actual.KDATU = Date.newInstance(2000,1,1);
        actual.KRECH = 'a';
        actual.KAWRT = 0;
        actual.KBETR = 0;
        actual.WAERS = 'a';
        actual.KKURS = 0;
        actual.KPEIN = 0;
        actual.KMEIN = 'a';
        actual.KUMZA = 0;
        actual.KUMNE = 0;
        actual.KNTYP = 'a';
        actual.KSTAT = 'a';
        actual.KNPRS = 'a';
        actual.KRUEK = 'a';
        actual.KRELI = 'a';
        actual.KHERK = 'a';
        actual.KGRPE = 'a';
        actual.KOUPD = 'a';
        actual.KOLNR = 'a';
        actual.KNUMH = 'a';
        actual.KOPOS = 'a';
        actual.KVSL1 = 'a';
        actual.SAKN1 = 'a';
        actual.MWSK1 = 'a';
        actual.KVSL2 = 'a';
        actual.SAKN2 = 'a';
        actual.MWSK2 = 'a';
        actual.LIFNR = 'a';
        actual.KUNNR = 'a';
        actual.KDIFF = 0;
        actual.KWERT = 0;
        actual.KSTEU = 'a';
        actual.KINAK = 'a';
        actual.KOAID = 'a';
        actual.ZAEKO = 'a';
        actual.KMXAW = 'a';
        actual.KMXWR = 'a';
        actual.KFAKTOR = 0;
        actual.KDUPL = 'a';
        actual.KFAKTOR1 = 0;
        actual.KZBZG = 'a';
        actual.KSTBS = 0;
        actual.KONMS = 'a';
        actual.KONWS = 'a';
        actual.KAWRT_K = 0;
        actual.KWAEH = 'a';
        actual.KWERT_K = 0;
        actual.KFKIV = 'a';
        actual.KVARC = 'a';
        actual.KMPRS = 'a';
        actual.PRSQU = 'a';
        actual.VARCOND = 'a';
        actual.STUFE = 0;
        actual.WEGXX = 0;
        actual.KTREL = 'a';
        actual.MDFLG = 'a';
        actual.TXJLV = 'a';
        actual.PRSCH = 'a';
        actual.KOFRM = 'a';
        actual.STFKZ = 'a';
        actual.KSTBM = 0;
        actual.KSTBM_NEXT = 0;
        actual.IX_KOMT1 = 0;
        actual.IX_GKOMV = 0;
        actual.ZAEHK_IND = 'a';
        actual.DRUKZ = 'a';
        actual.STUNB = 'a';
        actual.STUN2 = 'a';
        actual.KZWIW = 'a';
        actual.KOFRA = 'a';
        actual.KOFRS = 'a';
        actual.KMANU = 'a';
        actual.TXPRF = 'a';
        actual.KNEGA = 'a';
        actual.GANZZ = 'a';
        actual.KOBLI = 'a';
        actual.KAEND_BTR = 'a';
        actual.KAEND_WRT = 'a';
        actual.KAEND_UFK = 'a';
        actual.KAEND_RCH = 'a';
        actual.KAEND_LOE = 'a';
        actual.KAEND_MEH = 'a';
        actual.KZTERM = 'a';
        actual.FXMSG = 'a';
        actual.UPDKZ = 'a';
        actual.SELKZ = 'a';
        actual.BOSTA = 'a';
        actual.KSPAE = 'a';
        actual.LOEVM_KO = 'a';
        actual.KNUMA_BO = 'a';
        actual.BERGL = 'a';
        actual.VHART = 'a';
        actual.RDIFA = 'a';
        actual.KMENG = 'a';
        actual.KBUFF = 'a';
        actual.BOSTA_CR = 'a';
        actual.x_FIS_KZ_SD_EK = 'a';
        actual.x_FIS_ZZVPE = 'a';
        system.assertEquals('a', actual.RUNNPOSNO);
        system.assertEquals('a', actual.ORDPOSNO);
        system.assertEquals('a', actual.MATNR);
        system.assertEquals('a', actual.MEINS);
        system.assertEquals(0, actual.UMREZ);
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.KNUMV);
        system.assertEquals('a', actual.KPOSN);
        system.assertEquals('a', actual.STUNR);
        system.assertEquals('a', actual.ZAEHK);
        system.assertEquals('a', actual.KAPPL);
        system.assertEquals('a', actual.KSCHL);
        system.assertEquals(Date.newInstance(2000,1,1), actual.KDATU);
        system.assertEquals('a', actual.KRECH);
        system.assertEquals(0, actual.KAWRT);
        system.assertEquals(0, actual.KBETR);
        system.assertEquals('a', actual.WAERS);
        system.assertEquals(0, actual.KKURS);
        system.assertEquals(0, actual.KPEIN);
        system.assertEquals('a', actual.KMEIN);
        system.assertEquals(0, actual.KUMZA);
        system.assertEquals(0, actual.KUMNE);
        system.assertEquals('a', actual.KNTYP);
        system.assertEquals('a', actual.KSTAT);
        system.assertEquals('a', actual.KNPRS);
        system.assertEquals('a', actual.KRUEK);
        system.assertEquals('a', actual.KRELI);
        system.assertEquals('a', actual.KHERK);
        system.assertEquals('a', actual.KGRPE);
        system.assertEquals('a', actual.KOUPD);
        system.assertEquals('a', actual.KOLNR);
        system.assertEquals('a', actual.KNUMH);
        system.assertEquals('a', actual.KOPOS);
        system.assertEquals('a', actual.KVSL1);
        system.assertEquals('a', actual.SAKN1);
        system.assertEquals('a', actual.MWSK1);
        system.assertEquals('a', actual.KVSL2);
        system.assertEquals('a', actual.SAKN2);
        system.assertEquals('a', actual.MWSK2);
        system.assertEquals('a', actual.LIFNR);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals(0, actual.KDIFF);
        system.assertEquals(0, actual.KWERT);
        system.assertEquals('a', actual.KSTEU);
        system.assertEquals('a', actual.KINAK);
        system.assertEquals('a', actual.KOAID);
        system.assertEquals('a', actual.ZAEKO);
        system.assertEquals('a', actual.KMXAW);
        system.assertEquals('a', actual.KMXWR);
        system.assertEquals(0, actual.KFAKTOR);
        system.assertEquals('a', actual.KDUPL);
        system.assertEquals(0, actual.KFAKTOR1);
        system.assertEquals('a', actual.KZBZG);
        system.assertEquals(0, actual.KSTBS);
        system.assertEquals('a', actual.KONMS);
        system.assertEquals('a', actual.KONWS);
        system.assertEquals(0, actual.KAWRT_K);
        system.assertEquals('a', actual.KWAEH);
        system.assertEquals(0, actual.KWERT_K);
        system.assertEquals('a', actual.KFKIV);
        system.assertEquals('a', actual.KVARC);
        system.assertEquals('a', actual.KMPRS);
        system.assertEquals('a', actual.PRSQU);
        system.assertEquals('a', actual.VARCOND);
        system.assertEquals(0, actual.STUFE);
        system.assertEquals(0, actual.WEGXX);
        system.assertEquals('a', actual.KTREL);
        system.assertEquals('a', actual.MDFLG);
        system.assertEquals('a', actual.TXJLV);
        system.assertEquals('a', actual.PRSCH);
        system.assertEquals('a', actual.KOFRM);
        system.assertEquals('a', actual.STFKZ);
        system.assertEquals(0, actual.KSTBM);
        system.assertEquals(0, actual.KSTBM_NEXT);
        system.assertEquals(0, actual.IX_KOMT1);
        system.assertEquals(0, actual.IX_GKOMV);
        system.assertEquals('a', actual.ZAEHK_IND);
        system.assertEquals('a', actual.DRUKZ);
        system.assertEquals('a', actual.STUNB);
        system.assertEquals('a', actual.STUN2);
        system.assertEquals('a', actual.KZWIW);
        system.assertEquals('a', actual.KOFRA);
        system.assertEquals('a', actual.KOFRS);
        system.assertEquals('a', actual.KMANU);
        system.assertEquals('a', actual.TXPRF);
        system.assertEquals('a', actual.KNEGA);
        system.assertEquals('a', actual.GANZZ);
        system.assertEquals('a', actual.KOBLI);
        system.assertEquals('a', actual.KAEND_BTR);
        system.assertEquals('a', actual.KAEND_WRT);
        system.assertEquals('a', actual.KAEND_UFK);
        system.assertEquals('a', actual.KAEND_RCH);
        system.assertEquals('a', actual.KAEND_LOE);
        system.assertEquals('a', actual.KAEND_MEH);
        system.assertEquals('a', actual.KZTERM);
        system.assertEquals('a', actual.FXMSG);
        system.assertEquals('a', actual.UPDKZ);
        system.assertEquals('a', actual.SELKZ);
        system.assertEquals('a', actual.BOSTA);
        system.assertEquals('a', actual.KSPAE);
        system.assertEquals('a', actual.LOEVM_KO);
        system.assertEquals('a', actual.KNUMA_BO);
        system.assertEquals('a', actual.BERGL);
        system.assertEquals('a', actual.VHART);
        system.assertEquals('a', actual.RDIFA);
        system.assertEquals('a', actual.KMENG);
        system.assertEquals('a', actual.KBUFF);
        system.assertEquals('a', actual.BOSTA_CR);
        system.assertEquals('a', actual.x_FIS_KZ_SD_EK);
        system.assertEquals('a', actual.x_FIS_ZZVPE);
    }
    @istest
    private static void testET_TEXTE() {
        haefeleQuotationCreate.ET_TEXTE actual = new haefeleQuotationCreate.ET_TEXTE();

        actual.RUNNPOSNO = 'a';
        actual.ORDPOSNO = 'a';
        actual.TDID = 'a';
        actual.TDFORMAT = 'a';
        actual.TDLINE = 'a';
        system.assertEquals('a', actual.RUNNPOSNO);
        system.assertEquals('a', actual.ORDPOSNO);
        system.assertEquals('a', actual.TDID);
        system.assertEquals('a', actual.TDFORMAT);
        system.assertEquals('a', actual.TDLINE);
    }
    @istest
    private static void testET_MSG_OUT() {
        haefeleQuotationCreate.ET_MSG_OUT actual = new haefeleQuotationCreate.ET_MSG_OUT();

        actual.RUNNPOSNO = 'a';
        actual.ORDPOSNO = 'a';
        actual.LFDNR = 'a';
        actual.TYPE_x = 'a';
        actual.ID = 'a';
        actual.NUMBER_x = 'a';
        actual.MESSAGE = 'a';
        actual.LOG_NO = 'a';
        actual.LOG_MSG_NO = 'a';
        actual.MESSAGE_V1 = 'a';
        actual.MESSAGE_V2 = 'a';
        actual.MESSAGE_V3 = 'a';
        actual.MESSAGE_V4 = 'a';
        actual.PARAMETER = 'a';
        actual.ROW = 0;
        actual.FIELD = 'a';
        actual.SYSTEM_x = 'a';
        system.assertEquals('a', actual.RUNNPOSNO);
        system.assertEquals('a', actual.ORDPOSNO);
        system.assertEquals('a', actual.LFDNR);
        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.NUMBER_x);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
        system.assertEquals('a', actual.PARAMETER);
        system.assertEquals(0, actual.ROW);
        system.assertEquals('a', actual.FIELD);
        system.assertEquals('a', actual.SYSTEM_x);
    }
    @istest
    private static void testET_CONTAINER() {
        haefeleQuotationCreate.ET_CONTAINER actual = new haefeleQuotationCreate.ET_CONTAINER();

        actual.VAKEY = 'a';
        actual.QUALIF = 'a';
        actual.FVALUE = 'a';
        system.assertEquals('a', actual.VAKEY);
        system.assertEquals('a', actual.QUALIF);
        system.assertEquals('a', actual.FVALUE);
    }
    @istest
    private static void testET_CFGVALUE() {
        haefeleQuotationCreate.ET_CFGVALUE actual = new haefeleQuotationCreate.ET_CFGVALUE();

        actual.RUNNPOSNO = 'a';
        actual.CONFIG_ID = 'a';
        actual.INST_ID = 'a';
        actual.CHARC = 'a';
        actual.CHARC_TXT = 'a';
        actual.VALUE = 'a';
        actual.VALUE_TXT = 'a';
        actual.AUTHOR = 'a';
        actual.VALUE_TO = 'a';
        actual.VALCODE = 'a';
        system.assertEquals('a', actual.RUNNPOSNO);
        system.assertEquals('a', actual.CONFIG_ID);
        system.assertEquals('a', actual.INST_ID);
        system.assertEquals('a', actual.CHARC);
        system.assertEquals('a', actual.CHARC_TXT);
        system.assertEquals('a', actual.VALUE);
        system.assertEquals('a', actual.VALUE_TXT);
        system.assertEquals('a', actual.AUTHOR);
        system.assertEquals('a', actual.VALUE_TO);
        system.assertEquals('a', actual.VALCODE);
    }

    @istest
    private static void testRun() {
        haefeleQuotationCreate request = testSetup();
        haefeleQuotationCreate response = request.run();
        system.assertEquals('a', response.Z_HWWPIWS_CREATE_QUOTATION.I_SESSION);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static haefeleQuotationCreate testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('haefeleQuotationCreate');
        haefeleQuotationCreate request = new haefeleQuotationCreate();
        request.Z_HWWPIWS_CREATE_QUOTATION.I_SESSION = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        haefeleQuotationCreate input = new haefeleQuotationCreate();
        input.Z_HWWPIWS_CREATE_QUOTATION.I_SESSION = 'a';
        haefeleQuotationCreate actual = (haefeleQuotationCreate)JSON.deserialize(input.serialize(), haefeleQuotationCreate.class);
        system.assertEquals('a', actual.Z_HWWPIWS_CREATE_QUOTATION.I_SESSION);
    }

    @istest
    private static void testDeserialize() {
        haefeleQuotationCreate output = new haefeleQuotationCreate();
        output.Z_HWWPIWS_CREATE_QUOTATION.I_SESSION = 'a';

        string s = output.serialize();
        haefeleQuotationCreate actual = haefeleQuotationCreate.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.Z_HWWPIWS_CREATE_QUOTATION.I_SESSION);
    }

    @istest
    private static void testDeserializeError() {
        try {
            haefeleQuotationCreate actual = haefeleQuotationCreate.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (haefeleQuotationCreate.haefeleQuotationCreateException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            haefeleQuotationCreate actual = haefeleQuotationCreate.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (haefeleQuotationCreate.haefeleQuotationCreateException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        haefeleQuotationCreate output = new haefeleQuotationCreate();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        haefeleQuotationCreate output = new haefeleQuotationCreate();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        haefeleQuotationCreate output2 = new haefeleQuotationCreate();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        haefeleQuotationCreate output = new haefeleQuotationCreate();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('Z_HWWPIWS_CREATE_QUOTATION'));
        system.assert(keys.contains('I_HEADER'));
        system.assert(keys.contains('E_HEADER'));
        system.assert(keys.contains('E_HEADER_NEW'));
        system.assert(keys.contains('IT_POS'));
        system.assert(keys.contains('IT_KOMV'));
        system.assert(keys.contains('IT_TEXTE'));
        system.assert(keys.contains('IT_CFGVALUE'));
        system.assert(keys.contains('ET_POS'));
        system.assert(keys.contains('ET_EINT_OUT'));
        system.assert(keys.contains('ET_KOMV_OUT'));
        system.assert(keys.contains('ET_TEXTE'));
        system.assert(keys.contains('ET_MSG_OUT'));
        system.assert(keys.contains('ET_CONTAINER'));
        system.assert(keys.contains('ET_CFGVALUE'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('Z_HWWPIWS_CREATE_QUOTATION', first.name);
    }

    @istest
    private static void testException() {
        haefeleQuotationCreate.haefeleQuotationCreateException e = new haefeleQuotationCreate.haefeleQuotationCreateException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            haefeleQuotationCreate.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleQuotationCreate.haefeleQuotationCreateException e) {
            System.assert(true);
        }
        
        try {
            haefeleQuotationCreate output = new haefeleQuotationCreate();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleQuotationCreate.haefeleQuotationCreateException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            haefeleQuotationCreate output = new haefeleQuotationCreate();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleQuotationCreate.haefeleQuotationCreateException e) {
            System.assert(true);
        }

        try {
            haefeleQuotationCreate output = new haefeleQuotationCreate();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleQuotationCreate.haefeleQuotationCreateException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            haefeleQuotationCreate.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleQuotationCreate.haefeleQuotationCreateException e) {
            System.assert(true);
        }
        
        try {
            haefeleQuotationCreate.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleQuotationCreate.haefeleQuotationCreateException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            haefeleQuotationCreate.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (haefeleQuotationCreate.haefeleQuotationCreateException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        haefeleQuotationCreate output = new haefeleQuotationCreate();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}