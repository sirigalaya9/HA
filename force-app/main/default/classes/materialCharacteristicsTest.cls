/* 
 * Generated by Overcast UTC 2024-03-12 08:29:32Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class materialCharacteristicsTest {
    @istest
    private static void testmaterialCharacteristics() {
        materialCharacteristics actual = new materialCharacteristics();
        system.assertNotEquals(null, actual.BAPI_OBJCL_GETCLASSES);
        system.assertNotEquals(null, actual.ALLOCLIST);
        system.assertNotEquals(null, actual.ALLOCVALUESCHAR);
        system.assertNotEquals(null, actual.ALLOCVALUESCURR);
        system.assertNotEquals(null, actual.ALLOCVALUESNUM);
        system.assertNotEquals(null, actual.RETURN_x);
    }

    @istest
    private static void testBAPI_OBJCL_GETCLASSES() {
        materialCharacteristics.BAPI_OBJCL_GETCLASSES actual = new materialCharacteristics.BAPI_OBJCL_GETCLASSES();

        actual.OBJECTKEY_IMP = 'a';
        actual.OBJECTTABLE_IMP = 'a';
        actual.CLASSTYPE_IMP = 'a';
        actual.READ_VALUATIONS = 'a';
        actual.KEYDATE = Date.newInstance(2000,1,1);
        actual.LANGUAGE = 'a';
        actual.OBJECTKEY_IMP_LONG = 'a';
        system.assertEquals('a', actual.OBJECTKEY_IMP);
        system.assertEquals('a', actual.OBJECTTABLE_IMP);
        system.assertEquals('a', actual.CLASSTYPE_IMP);
        system.assertEquals('a', actual.READ_VALUATIONS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.KEYDATE);
        system.assertEquals('a', actual.LANGUAGE);
        system.assertEquals('a', actual.OBJECTKEY_IMP_LONG);
    }
    @istest
    private static void testALLOCLIST() {
        materialCharacteristics.ALLOCLIST actual = new materialCharacteristics.ALLOCLIST();

        actual.OBJECT_x = 'a';
        actual.STATUS = 'a';
        actual.OBJTYP = 'a';
        actual.CLASSNUM = 'a';
        actual.CLASSTYPE = 'a';
        actual.STANDARDCLASS = 'a';
        actual.OBJECT_LONG = 'a';
        system.assertEquals('a', actual.OBJECT_x);
        system.assertEquals('a', actual.STATUS);
        system.assertEquals('a', actual.OBJTYP);
        system.assertEquals('a', actual.CLASSNUM);
        system.assertEquals('a', actual.CLASSTYPE);
        system.assertEquals('a', actual.STANDARDCLASS);
        system.assertEquals('a', actual.OBJECT_LONG);
    }
    @istest
    private static void testALLOCVALUESCHAR() {
        materialCharacteristics.ALLOCVALUESCHAR actual = new materialCharacteristics.ALLOCVALUESCHAR();

        actual.CHARACT = 'a';
        actual.VALUE_CHAR = 'a';
        actual.INHERITED = 'a';
        actual.INSTANCE = 'a';
        actual.VALUE_NEUTRAL = 'a';
        actual.CHARACT_DESCR = 'a';
        actual.VALUE_CHAR_LONG = 'a';
        actual.VALUE_NEUTRAL_LONG = 'a';
        system.assertEquals('a', actual.CHARACT);
        system.assertEquals('a', actual.VALUE_CHAR);
        system.assertEquals('a', actual.INHERITED);
        system.assertEquals('a', actual.INSTANCE);
        system.assertEquals('a', actual.VALUE_NEUTRAL);
        system.assertEquals('a', actual.CHARACT_DESCR);
        system.assertEquals('a', actual.VALUE_CHAR_LONG);
        system.assertEquals('a', actual.VALUE_NEUTRAL_LONG);
    }
    @istest
    private static void testALLOCVALUESCURR() {
        materialCharacteristics.ALLOCVALUESCURR actual = new materialCharacteristics.ALLOCVALUESCURR();

        actual.CHARACT = 'a';
        actual.VALUE_FROM = 0;
        actual.VALUE_TO = 0;
        actual.VALUE_RELATION = 'a';
        actual.CURRENCY_FROM = 'a';
        actual.CURRENCY_TO = 'a';
        actual.CURRENCY_FROM_ISO = 'a';
        actual.CURRENCY_TO_ISO = 'a';
        actual.INHERITED = 'a';
        actual.INSTANCE = 'a';
        actual.CHARACT_DESCR = 'a';
        system.assertEquals('a', actual.CHARACT);
        system.assertEquals(0, actual.VALUE_FROM);
        system.assertEquals(0, actual.VALUE_TO);
        system.assertEquals('a', actual.VALUE_RELATION);
        system.assertEquals('a', actual.CURRENCY_FROM);
        system.assertEquals('a', actual.CURRENCY_TO);
        system.assertEquals('a', actual.CURRENCY_FROM_ISO);
        system.assertEquals('a', actual.CURRENCY_TO_ISO);
        system.assertEquals('a', actual.INHERITED);
        system.assertEquals('a', actual.INSTANCE);
        system.assertEquals('a', actual.CHARACT_DESCR);
    }
    @istest
    private static void testALLOCVALUESNUM() {
        materialCharacteristics.ALLOCVALUESNUM actual = new materialCharacteristics.ALLOCVALUESNUM();

        actual.CHARACT = 'a';
        actual.VALUE_FROM = 0;
        actual.VALUE_TO = 0;
        actual.VALUE_RELATION = 'a';
        actual.UNIT_FROM = 'a';
        actual.UNIT_TO = 'a';
        actual.UNIT_FROM_ISO = 'a';
        actual.UNIT_TO_ISO = 'a';
        actual.INHERITED = 'a';
        actual.INSTANCE = 'a';
        actual.CHARACT_DESCR = 'a';
        system.assertEquals('a', actual.CHARACT);
        system.assertEquals(0, actual.VALUE_FROM);
        system.assertEquals(0, actual.VALUE_TO);
        system.assertEquals('a', actual.VALUE_RELATION);
        system.assertEquals('a', actual.UNIT_FROM);
        system.assertEquals('a', actual.UNIT_TO);
        system.assertEquals('a', actual.UNIT_FROM_ISO);
        system.assertEquals('a', actual.UNIT_TO_ISO);
        system.assertEquals('a', actual.INHERITED);
        system.assertEquals('a', actual.INSTANCE);
        system.assertEquals('a', actual.CHARACT_DESCR);
    }
    @istest
    private static void testRETURN_x() {
        materialCharacteristics.RETURN_x actual = new materialCharacteristics.RETURN_x();

        actual.TYPE_x = 'a';
        actual.ID = 'a';
        actual.NUMBER_x = 'a';
        actual.MESSAGE = 'a';
        actual.LOG_NO = 'a';
        actual.LOG_MSG_NO = 'a';
        actual.MESSAGE_V1 = 'a';
        actual.MESSAGE_V2 = 'a';
        actual.MESSAGE_V3 = 'a';
        actual.MESSAGE_V4 = 'a';
        actual.PARAMETER = 'a';
        actual.ROW = 0;
        actual.FIELD = 'a';
        actual.SYSTEM_x = 'a';
        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.NUMBER_x);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
        system.assertEquals('a', actual.PARAMETER);
        system.assertEquals(0, actual.ROW);
        system.assertEquals('a', actual.FIELD);
        system.assertEquals('a', actual.SYSTEM_x);
    }

    @istest
    private static void testRun() {
        materialCharacteristics request = testSetup();
        materialCharacteristics response = request.run();
        system.assertEquals('a', response.BAPI_OBJCL_GETCLASSES.OBJECTKEY_IMP);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static materialCharacteristics testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('materialCharacteristics');
        materialCharacteristics request = new materialCharacteristics();
        request.BAPI_OBJCL_GETCLASSES.OBJECTKEY_IMP = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        materialCharacteristics input = new materialCharacteristics();
        input.BAPI_OBJCL_GETCLASSES.OBJECTKEY_IMP = 'a';
        materialCharacteristics actual = (materialCharacteristics)JSON.deserialize(input.serialize(), materialCharacteristics.class);
        system.assertEquals('a', actual.BAPI_OBJCL_GETCLASSES.OBJECTKEY_IMP);
    }

    @istest
    private static void testDeserialize() {
        materialCharacteristics output = new materialCharacteristics();
        output.BAPI_OBJCL_GETCLASSES.OBJECTKEY_IMP = 'a';

        string s = output.serialize();
        materialCharacteristics actual = materialCharacteristics.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.BAPI_OBJCL_GETCLASSES.OBJECTKEY_IMP);
    }

    @istest
    private static void testDeserializeError() {
        try {
            materialCharacteristics actual = materialCharacteristics.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (materialCharacteristics.materialCharacteristicsException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            materialCharacteristics actual = materialCharacteristics.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (materialCharacteristics.materialCharacteristicsException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        materialCharacteristics output = new materialCharacteristics();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        materialCharacteristics output = new materialCharacteristics();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        materialCharacteristics output2 = new materialCharacteristics();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        materialCharacteristics output = new materialCharacteristics();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('BAPI_OBJCL_GETCLASSES'));
        system.assert(keys.contains('ALLOCLIST'));
        system.assert(keys.contains('ALLOCVALUESCHAR'));
        system.assert(keys.contains('ALLOCVALUESCURR'));
        system.assert(keys.contains('ALLOCVALUESNUM'));
        system.assert(keys.contains('RETURN_x'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('BAPI_OBJCL_GETCLASSES', first.name);
    }

    @istest
    private static void testException() {
        materialCharacteristics.materialCharacteristicsException e = new materialCharacteristics.materialCharacteristicsException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            materialCharacteristics.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (materialCharacteristics.materialCharacteristicsException e) {
            System.assert(true);
        }
        
        try {
            materialCharacteristics output = new materialCharacteristics();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (materialCharacteristics.materialCharacteristicsException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            materialCharacteristics output = new materialCharacteristics();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (materialCharacteristics.materialCharacteristicsException e) {
            System.assert(true);
        }

        try {
            materialCharacteristics output = new materialCharacteristics();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (materialCharacteristics.materialCharacteristicsException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            materialCharacteristics.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (materialCharacteristics.materialCharacteristicsException e) {
            System.assert(true);
        }
        
        try {
            materialCharacteristics.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (materialCharacteristics.materialCharacteristicsException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            materialCharacteristics.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (materialCharacteristics.materialCharacteristicsException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        materialCharacteristics output = new materialCharacteristics();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}