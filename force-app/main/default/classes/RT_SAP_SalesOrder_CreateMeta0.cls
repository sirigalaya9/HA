global class RT_SAP_SalesOrder_CreateMeta0 {
/* 
 * Generated by Overcast UTC 2024-03-12 09:37:26Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */

    static overcast.Realtime.StructureType SS = overcast.Realtime.StructureType.STRUCTURE;
    static overcast.Realtime.StructureType ST = overcast.Realtime.StructureType.TABLE;

    static overcast.Realtime.Direction DI = overcast.Realtime.Direction.INPUT;
    static overcast.Realtime.Direction DOx = overcast.Realtime.Direction.OUTPUT;
    static overcast.Realtime.Direction DB = overcast.Realtime.Direction.BOTH;
    
    static overcast.Realtime.ApexType TS = overcast.Realtime.ApexType.STRINGX;
    static overcast.Realtime.ApexType TI = overcast.Realtime.ApexType.INTEGERX;
    static overcast.Realtime.ApexType TL = overcast.Realtime.ApexType.LONGX;
    static overcast.Realtime.ApexType TB = overcast.Realtime.ApexType.BOOLEANX;
    static overcast.Realtime.ApexType TD = overcast.Realtime.ApexType.DATEX;
    static overcast.Realtime.ApexType TDT = overcast.Realtime.ApexType.DATETIMEX;
    static overcast.Realtime.ApexType TDC = overcast.Realtime.ApexType.DECIMALX;
    static overcast.Realtime.ApexType TDBL = overcast.Realtime.ApexType.DOUBLEX;
    static overcast.Realtime.ApexType TT = overcast.Realtime.ApexType.TIMEX;
    static overcast.Realtime.ApexType TBLB = overcast.Realtime.ApexType.BLOBX;

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, overcast.Realtime.Direction e) {
        return new overcast.FieldInfo(a, b, c, d, e);
    }

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, Integer e, overcast.Realtime.Direction f) {
        return new overcast.FieldInfo(a, b, c, d, e, f);
    }

    public static Map<String, overcast.TypeInfo> metadata = new Map<String, overcast.TypeInfo> {
        'Z_HWWPIWS_CREATE_SALESORDER' => new overcast.TypeInfo('Z_HWWPIWS_CREATE_SALESORDER', '', SS, DB,
            new Map<String, overcast.FieldInfo> {
                'I_SESSION' => fi('I_SESSION', 'I_SESSION', TS, 60, DI),
                'I_LGCONTNO' => fi('I_LGCONTNO', 'I_LGCONTNO', TS, 2, DI),
                'I_SOURCE' => fi('I_SOURCE', 'I_SOURCE', TS, 6, DI),
                'I_SIMULATION' => fi('I_SIMULATION', 'I_SIMULATION', TS, 1, DI),
                'I_CREATE_INQUIRY' => fi('I_CREATE_INQUIRY', 'I_CREATE_INQUIRY', TS, 1, DI),
                'E_SESSION' => fi('E_SESSION', 'E_SESSION', TS, 60, DOx)
            }
        ),
        'I_HEADER' => new overcast.TypeInfo('I_HEADER', '', SS, DI,
            new Map<String, overcast.FieldInfo> {
                'VKORG' => fi('VKORG', 'Sales Org.', TS, 4, DI),
                'VTWEG' => fi('VTWEG', 'Distr. Channel', TS, 2, DI),
                'SPART' => fi('SPART', 'Division', TS, 2, DI),
                'VKBUR' => fi('VKBUR', 'Sales Office', TS, 4, DI),
                'CUSNO' => fi('CUSNO', 'Customer', TS, 10, DI),
                'ORDNO' => fi('ORDNO', 'SD Document', TS, 10, DI),
                'ORDSIGNS' => fi('ORDSIGNS', 'PO Number', TS, 35, DI),
                'DVWEEKH' => fi('DVWEEKH', 'Req.Deliv.Week', TS, 6, DI),
                'LFDAT_H' => fi('LFDAT_H', 'Del.Date', TS, 8, DI),
                'DVTYP' => fi('DVTYP', 'Compl.Del. Y/N', TS, 1, DI),
                'LIFSP' => fi('LIFSP', 'Contract Order', TS, 1, DI),
                'DVCUSNR' => fi('DVCUSNR', 'Ship-to party', TS, 10, DI),
                'DVNAME1' => fi('DVNAME1', 'Name', TS, 35, DI),
                'DVNAME2' => fi('DVNAME2', 'Name', TS, 35, DI),
                'DVSTREET1' => fi('DVSTREET1', 'Street', TS, 30, DI),
                'DVHAUSNR' => fi('DVHAUSNR', 'House Number', TS, 10, DI),
                'DVHAUSNR2' => fi('DVHAUSNR2', 'Supplement', TS, 10, DI),
                'DVREGION' => fi('DVREGION', 'Region', TS, 3, DI),
                'DVPOSTCODE' => fi('DVPOSTCODE', 'Postal Code', TS, 10, DI),
                'DVLOC' => fi('DVLOC', 'Vendor location', TS, 35, DI),
                'REGBYADMAYN' => fi('REGBYADMAYN', 'Createthgh ADMA', TS, 1, DI),
                'AUART' => fi('AUART', 'Sales Doc. Type', TS, 4, DI),
                'CMSNPACKYN' => fi('CMSNPACKYN', 'Pack p. commi.', TS, 1, DI),
                'ERDAT' => fi('ERDAT', 'Created On', TD, 8, DI),
                'GBSTK' => fi('GBSTK', 'Overall status', TS, 1, DI),
                'PARNR' => fi('PARNR', 'Contact Person', TS, 10, DI),
                'DLV_BLOCK' => fi('DLV_BLOCK', 'Delivery block', TS, 2, DI),
                'DVADDRTYPE' => fi('DVADDRTYPE', 'Adress ind.', TS, 1, DI),
                'DVSTREET01' => fi('DVSTREET01', 'Street 2', TS, 40, DI),
                'DVSTREET02' => fi('DVSTREET02', 'Street 3', TS, 40, DI),
                'DVSTREET03' => fi('DVSTREET03', 'Street 4', TS, 40, DI),
                'DVSTREET04' => fi('DVSTREET04', 'Street 5', TS, 40, DI),
                'DVCOUNTRY' => fi('DVCOUNTRY', 'Country', TS, 3, DI),
                'USERNAME' => fi('USERNAME', 'Shop Co-User', TS, 40, DI),
                'USERNAMEFIRST' => fi('USERNAMEFIRST', 'First Name', TS, 40, DI),
                'USERNAMELAST' => fi('USERNAMELAST', 'Last Name', TS, 40, DI),
                'USEREMAIL' => fi('USEREMAIL', 'E-Mail Address', TS, 241, DI),
                'USERPHONE' => fi('USERPHONE', 'Telephone', TS, 30, DI),
                'FREIGHTCHARGES' => fi('FREIGHTCHARGES', 'Freight Charges', TDC, 19,2, DI),
                'SHIPMETHOD' => fi('SHIPMETHOD', 'Shipment Method', TS, 132, DI),
                'ZWELS' => fi('ZWELS', 'Payment methods', TS, 10, DI),
                'CREDITCARDID' => fi('CREDITCARDID', 'Credit Card ID', TS, 80, DI),
                'CCARDASSIGNMENTID' => fi('CCARDASSIGNMENTID', 'Assignment ID', TS, 80, DI),
                'CREDITCARDSECURITY' => fi('CREDITCARDSECURITY', 'Credit Card Security', TS, 4, DI),
                'COUPONCODE' => fi('COUPONCODE', 'Coupon Code', TS, 40, DI),
                'ACTIONCODE' => fi('ACTIONCODE', 'Action Code', TS, 10, DI),
                'ZZHWW_DSPLIT' => fi('ZZHWW_DSPLIT', 'Coll.Dl.DaySOrg', TS, 3, DI),
                'ZZINCO1' => fi('ZZINCO1', 'Incoterms', TS, 3, DI),
                'ZZINCO2' => fi('ZZINCO2', 'Incoterms 2', TS, 28, DI),
                'ZZHTR_DBSBANK' => fi('ZZHTR_DBSBANK', 'House Bank', TS, 5, DI),
                'ZZHTR_DBSFL' => fi('ZZHTR_DBSFL', 'DDS flag', TS, 1, DI),
                'ZZPARTNER' => fi('ZZPARTNER', 'Partners', TS, 25, DI),
                'VSBED' => fi('VSBED', 'Shp.Cond.', TS, 2, DI),
                'x_FISSAN_PRJNR' => fi('x_FISSAN_PRJNR', 'Project number', TS, 10, DI),
                'x_FISSAN_PBABK' => fi('x_FISSAN_PBABK', 'Descr_of_Proj.Abb', TS, 6, DI),
                'x_FISSAN_WVDAT' => fi('x_FISSAN_WVDAT', 'Resubmission', TD, 8, DI),
                'x_FISSAN_SUBMISD' => fi('x_FISSAN_SUBMISD', 'submission date', TD, 8, DI),
                'x_FISSAN_WUNSCHD' => fi('x_FISSAN_WUNSCHD', 'desired date', TD, 8, DI),
                'x_FISSAN_VERGDAT' => fi('x_FISSAN_VERGDAT', 'Date of Award', TD, 8, DI),
                'x_FISSAN_AUSDAT' => fi('x_FISSAN_AUSDAT', 'Start Bid Inv.', TD, 8, DI),
                'x_FISSAN_BAUDAT' => fi('x_FISSAN_BAUDAT', 'Construct.Begin', TD, 8, DI),
                'x_FISSAN_MONTDAT' => fi('x_FISSAN_MONTDAT', 'Date', TD, 8, DI),
                'x_FISSAN_IDAT_PL' => fi('x_FISSAN_IDAT_PL', 'Date', TD, 8, DI),
                'x_FISSAN_IDAT_IST' => fi('x_FISSAN_IDAT_IST', 'Entry service spec', TD, 8, DI),
                'x_FISSAN_PROJPOS' => fi('x_FISSAN_PROJPOS', 'Item', TS, 4, DI),
                'x_FISSAN_PROJUPOS' => fi('x_FISSAN_PROJUPOS', 'Subitem', TS, 4, DI),
                'x_FIS_ABGRU' => fi('x_FIS_ABGRU', 'FIS/wws R/Rej', TS, 2, DI),
                'x_FISSAN_PRBEZ' => fi('x_FISSAN_PRBEZ', 'Proj.desc.', TS, 55, DI),
                'x_FISSAN_PBEZ2' => fi('x_FISSAN_PBEZ2', 'proj. descr. 2', TS, 55, DI),
                'x_FISSAN_PRBEZG' => fi('x_FISSAN_PRBEZG', 'Proj.desc.', TS, 55, DI),
                'x_FISSAN_PBEZ2G' => fi('x_FISSAN_PBEZ2G', 'proj. descr. 2', TS, 55, DI),
                'ZZHWW_GWERK' => fi('ZZHWW_GWERK', 'Trade', TS, 3, DI),
                'ZZHDE_PROJNR' => fi('ZZHDE_PROJNR', 'Project No. CRM', TS, 30, DI),
                'ZZHWW_ZTERM' => fi('ZZHWW_ZTERM', 'Pyt Terms', TS, 4, DI),
                'ZZHDE_ANOBZ' => fi('ZZHDE_ANOBZ', 'No object descr.', TS, 1, DI),
                'REF_DOC' => fi('REF_DOC', 'Reference Doc.', TS, 10, DI),
                'AUGRU' => fi('AUGRU', 'Order reason', TS, 3, DI),
                'ZZHTR_ZRTR' => fi('ZZHTR_ZRTR', 'Choose ZRTR conditio', TS, 1, DI),
                'USERPHONEEXTENS' => fi('USERPHONEEXTENS', 'Extension', TS, 10, DI),
                'DVTELNUMBER' => fi('DVTELNUMBER', 'Telephone', TS, 30, DI),
                'DVTELEXTENS' => fi('DVTELEXTENS', 'Extension', TS, 10, DI),
                'IDMAREFNR' => fi('IDMAREFNR', 'Customer', TS, 10, DI),
                'SCHEME_CODE' => fi('SCHEME_CODE', 'Scheme Code', TS, 10, DI),
                'ZZHWW_CRM_SALE' => fi('ZZHWW_CRM_SALE', 'Sales CRM', TS, 15, DI),
                'ZZHWW_PPC' => fi('ZZHWW_PPC', 'Sep. Packing', TS, 1, DI),
                'ZZHWW_CRM_NOSUM' => fi('ZZHWW_CRM_NOSUM', 'No sum', TS, 1, DI)
            }
        ),
        'E_HEADER' => new overcast.TypeInfo('E_HEADER', '', SS, DOx,
            new Map<String, overcast.FieldInfo> {
                'CUSNO' => fi('CUSNO', 'Customer', TS, 10, DOx),
                'ORDNO' => fi('ORDNO', 'SD Document', TS, 10, DOx),
                'ORDSIGNS' => fi('ORDSIGNS', 'PO Number', TS, 35, DOx),
                'DVWEEKH' => fi('DVWEEKH', 'Req.Deliv.Week', TS, 6, DOx),
                'DVTYP' => fi('DVTYP', 'Compl.Del. Y/N', TS, 1, DOx),
                'LIFSPX' => fi('LIFSPX', 'Contract Order', TS, 1, DOx),
                'ORDDT2' => fi('ORDDT2', 'Document Date', TD, 8, DOx),
                'INVGOODSVALUEHCU' => fi('INVGOODSVALUEHCU', 'Goods Net Value', TDC, 19,2, DOx),
                'CUISO' => fi('CUISO', 'ISO Code', TS, 3, DOx),
                'DVCUSNR' => fi('DVCUSNR', 'Ship-to party', TS, 10, DOx),
                'DVNAME1' => fi('DVNAME1', 'Name', TS, 35, DOx),
                'DVNAME2' => fi('DVNAME2', 'Name', TS, 35, DOx),
                'DVSTREET1' => fi('DVSTREET1', 'Street', TS, 30, DOx),
                'DVHAUSNR' => fi('DVHAUSNR', 'House Number', TS, 10, DOx),
                'DVHAUSNR2' => fi('DVHAUSNR2', 'Supplement', TS, 10, DOx),
                'DVREGION' => fi('DVREGION', 'Region', TS, 3, DOx),
                'DVPOSTCODE' => fi('DVPOSTCODE', 'Postal Code', TS, 10, DOx),
                'DVLOC' => fi('DVLOC', 'Vendor location', TS, 35, DOx),
                'AUART' => fi('AUART', 'Sales Doc. Type', TS, 4, DOx),
                'CMSNPACKYN' => fi('CMSNPACKYN', 'Pack p. commi.', TS, 1, DOx),
                'LIFSP' => fi('LIFSP', 'Delivery block', TS, 2, DOx),
                'VTEXT' => fi('VTEXT', 'Deliv.BlockDesc', TS, 20, DOx),
                'CMGST' => fi('CMGST', 'OverallCredStat', TS, 1, DOx),
                'ROHE' => fi('ROHE', 'Status inactive', TS, 1, DOx),
                'VSBED' => fi('VSBED', 'Shp.Cond.', TS, 2, DOx),
                'VSBEDT' => fi('VSBEDT', 'Description', TS, 20, DOx),
                'ZTERM' => fi('ZTERM', 'Pyt Terms', TS, 4, DOx),
                'INCO1' => fi('INCO1', 'Incoterms', TS, 3, DOx),
                'INCO2' => fi('INCO2', 'Incoterms 2', TS, 28, DOx),
                'BRGEW' => fi('BRGEW', 'Total Weight', TDC, 15,3, DOx),
                'GEWEI' => fi('GEWEI', 'Unit of Weight', TS, 3, DOx),
                'VOLUM' => fi('VOLUM', 'Volume', TDC, 13,3, DOx),
                'VOLEH' => fi('VOLEH', 'Volume Unit', TS, 3, DOx),
                'PARNR' => fi('PARNR', 'Contact Person', TS, 10, DOx),
                'HSTATE' => fi('HSTATE', 'HSTATE', TS, 1, DOx),
                'FREIGHTCHARGES' => fi('FREIGHTCHARGES', 'Freight Charges', TDC, 19,2, DOx),
                'LOCALTAXES' => fi('LOCALTAXES', 'Local Taxes', TDC, 19,2, DOx),
                'COUPONCODE' => fi('COUPONCODE', 'Coupon Code', TS, 40, DOx),
                'COUPONVALUE' => fi('COUPONVALUE', 'Coupon Value', TDC, 19,2, DOx),
                'SHIPMETHOD' => fi('SHIPMETHOD', 'Shipment Method', TS, 132, DOx),
                'TOTALAMOUNT' => fi('TOTALAMOUNT', 'Total Amount', TDC, 19,2, DOx),
                'DVSTREET01' => fi('DVSTREET01', 'Street 2', TS, 40, DOx),
                'DVSTREET02' => fi('DVSTREET02', 'Street 3', TS, 40, DOx),
                'DVSTREET03' => fi('DVSTREET03', 'Street 4', TS, 40, DOx),
                'DVSTREET04' => fi('DVSTREET04', 'Street 5', TS, 40, DOx),
                'DVCOUNTRY' => fi('DVCOUNTRY', 'Country', TS, 3, DOx),
                'ZZHWW_DSPLIT' => fi('ZZHWW_DSPLIT', 'Coll.Dl.DaySOrg', TS, 3, DOx),
                'ZZTEL_NUMBER' => fi('ZZTEL_NUMBER', 'Telephone', TS, 30, DOx),
                'ZZHTR_DBSBANK' => fi('ZZHTR_DBSBANK', 'House Bank', TS, 5, DOx),
                'ZZHTR_DBSFL' => fi('ZZHTR_DBSFL', 'DDS flag', TS, 1, DOx),
                'ZZHTR_AUGRU' => fi('ZZHTR_AUGRU', 'Order reason', TS, 3, DOx),
                'ZZHTR_ZRTR' => fi('ZZHTR_ZRTR', 'Special Discount', TS, 1, DOx),
                'x_FISSAN_PRJNR' => fi('x_FISSAN_PRJNR', 'Project number', TS, 10, DOx),
                'x_FISSAN_PBABK' => fi('x_FISSAN_PBABK', 'Descr_of_Proj.Abb', TS, 6, DOx),
                'x_FISSAN_WVDAT' => fi('x_FISSAN_WVDAT', 'Resubmission', TD, 8, DOx),
                'x_FISSAN_SUBMISD' => fi('x_FISSAN_SUBMISD', 'submission date', TD, 8, DOx),
                'x_FISSAN_WUNSCHD' => fi('x_FISSAN_WUNSCHD', 'desired date', TD, 8, DOx),
                'x_FISSAN_VERGDAT' => fi('x_FISSAN_VERGDAT', 'Date of Award', TD, 8, DOx),
                'x_FISSAN_AUSDAT' => fi('x_FISSAN_AUSDAT', 'Start Bid Inv.', TD, 8, DOx),
                'x_FISSAN_BAUDAT' => fi('x_FISSAN_BAUDAT', 'Construct.Begin', TD, 8, DOx),
                'x_FISSAN_MONTDAT' => fi('x_FISSAN_MONTDAT', 'Date', TD, 8, DOx),
                'x_FISSAN_IDAT_PL' => fi('x_FISSAN_IDAT_PL', 'Date', TD, 8, DOx),
                'x_FISSAN_IDAT_IST' => fi('x_FISSAN_IDAT_IST', 'Entry service spec', TD, 8, DOx),
                'x_FISSAN_PROJPOS' => fi('x_FISSAN_PROJPOS', 'Item', TS, 4, DOx),
                'x_FISSAN_PROJUPOS' => fi('x_FISSAN_PROJUPOS', 'Subitem', TS, 4, DOx),
                'x_FIS_ABGRU' => fi('x_FIS_ABGRU', 'FIS/wws R/Rej', TS, 2, DOx),
                'x_FISSAN_PRBEZ' => fi('x_FISSAN_PRBEZ', 'Proj.desc.', TS, 55, DOx),
                'x_FISSAN_PBEZ2' => fi('x_FISSAN_PBEZ2', 'proj. descr. 2', TS, 55, DOx),
                'x_FISSAN_PRBEZG' => fi('x_FISSAN_PRBEZG', 'Proj.desc.', TS, 55, DOx),
                'x_FISSAN_PBEZ2G' => fi('x_FISSAN_PBEZ2G', 'proj. descr. 2', TS, 55, DOx),
                'ZZHWW_GWERK' => fi('ZZHWW_GWERK', 'Trade', TS, 3, DOx),
                'ZZHDE_PROJNR' => fi('ZZHDE_PROJNR', 'Project No. CRM', TS, 30, DOx),
                'ZZHDE_ANOBZ' => fi('ZZHDE_ANOBZ', 'No object descr.', TS, 1, DOx),
                'ZZHWW_DPDPREDICT' => fi('ZZHWW_DPDPREDICT', 'Cust.notif.', TS, 1, DOx),
                'USERPHONE' => fi('USERPHONE', 'Telephone', TS, 30, DOx),
                'USERPHONEEXTENS' => fi('USERPHONEEXTENS', 'Extension', TS, 10, DOx),
                'DVTELNUMBER' => fi('DVTELNUMBER', 'Telephone', TS, 30, DOx),
                'DVTELEXTENS' => fi('DVTELEXTENS', 'Extension', TS, 10, DOx),
                'IDMAREFNR' => fi('IDMAREFNR', 'Customer', TS, 10, DOx),
                'CONTRIBUTION_MARGIN_ABS' => fi('CONTRIBUTION_MARGIN_ABS', 'Contrib. marg. abs.', TDC, 15,2, DOx),
                'CONTRIBUTION_MARGIN_PROZ' => fi('CONTRIBUTION_MARGIN_PROZ', 'Contrib. margin in %', TDC, 15,3, DOx),
                'ZZHWW_CRM_SALE' => fi('ZZHWW_CRM_SALE', 'Sales CRM', TS, 15, DOx),
                'ZZHWW_CRM_NOSUM' => fi('ZZHWW_CRM_NOSUM', 'No sum', TS, 1, DOx),
                'ANGDT' => fi('ANGDT', 'Valid from', TD, 8, DOx),
                'BNDDT' => fi('BNDDT', 'Valid to', TD, 8, DOx)
            }
        ),
        'E_HEADER_NEW' => new overcast.TypeInfo('E_HEADER_NEW', '', SS, DOx,
            new Map<String, overcast.FieldInfo> {
                'CUSNO' => fi('CUSNO', 'Customer', TS, 10, DOx),
                'ORDNO' => fi('ORDNO', 'SD Document', TS, 10, DOx),
                'ORDSIGNS' => fi('ORDSIGNS', 'PO Number', TS, 35, DOx),
                'DVWEEKH' => fi('DVWEEKH', 'Req.Deliv.Week', TS, 6, DOx),
                'DVTYP' => fi('DVTYP', 'Compl.Del. Y/N', TS, 1, DOx),
                'LIFSPX' => fi('LIFSPX', 'Contract Order', TS, 1, DOx),
                'ORDDT2' => fi('ORDDT2', 'Document Date', TD, 8, DOx),
                'INVGOODSVALUEHCU' => fi('INVGOODSVALUEHCU', 'Goods Net Value', TDC, 19,2, DOx),
                'CUISO' => fi('CUISO', 'ISO Code', TS, 3, DOx),
                'DVCUSNR' => fi('DVCUSNR', 'Ship-to party', TS, 10, DOx),
                'DVNAME1' => fi('DVNAME1', 'Name', TS, 35, DOx),
                'DVNAME2' => fi('DVNAME2', 'Name', TS, 35, DOx),
                'DVSTREET1' => fi('DVSTREET1', 'Street', TS, 30, DOx),
                'DVHAUSNR' => fi('DVHAUSNR', 'House Number', TS, 10, DOx),
                'DVHAUSNR2' => fi('DVHAUSNR2', 'Supplement', TS, 10, DOx),
                'DVREGION' => fi('DVREGION', 'Region', TS, 3, DOx),
                'DVPOSTCODE' => fi('DVPOSTCODE', 'Postal Code', TS, 10, DOx),
                'DVLOC' => fi('DVLOC', 'Vendor location', TS, 35, DOx),
                'AUART' => fi('AUART', 'Sales Doc. Type', TS, 4, DOx),
                'CMSNPACKYN' => fi('CMSNPACKYN', 'Pack p. commi.', TS, 1, DOx),
                'LIFSP' => fi('LIFSP', 'Delivery block', TS, 2, DOx),
                'VTEXT' => fi('VTEXT', 'Deliv.BlockDesc', TS, 20, DOx),
                'CMGST' => fi('CMGST', 'OverallCredStat', TS, 1, DOx),
                'ROHE' => fi('ROHE', 'Status inactive', TS, 1, DOx),
                'VSBED' => fi('VSBED', 'Shp.Cond.', TS, 2, DOx),
                'VSBEDT' => fi('VSBEDT', 'Description', TS, 20, DOx),
                'ZTERM' => fi('ZTERM', 'Pyt Terms', TS, 4, DOx),
                'INCO1' => fi('INCO1', 'Incoterms', TS, 3, DOx),
                'INCO2' => fi('INCO2', 'Incoterms 2', TS, 28, DOx),
                'BRGEW' => fi('BRGEW', 'Total Weight', TDC, 15,3, DOx),
                'GEWEI' => fi('GEWEI', 'Unit of Weight', TS, 3, DOx),
                'VOLUM' => fi('VOLUM', 'Volume', TDC, 13,3, DOx),
                'VOLEH' => fi('VOLEH', 'Volume Unit', TS, 3, DOx),
                'PARNR' => fi('PARNR', 'Contact Person', TS, 10, DOx),
                'HSTATE' => fi('HSTATE', 'HSTATE', TS, 1, DOx),
                'FREIGHTCHARGES' => fi('FREIGHTCHARGES', 'Freight Charges', TDC, 19,2, DOx),
                'LOCALTAXES' => fi('LOCALTAXES', 'Local Taxes', TDC, 19,2, DOx),
                'COUPONCODE' => fi('COUPONCODE', 'Coupon Code', TS, 40, DOx),
                'COUPONVALUE' => fi('COUPONVALUE', 'Coupon Value', TDC, 19,2, DOx),
                'SHIPMETHOD' => fi('SHIPMETHOD', 'Shipment Method', TS, 132, DOx),
                'TOTALAMOUNT' => fi('TOTALAMOUNT', 'Total Amount', TDC, 19,2, DOx),
                'DVSTREET01' => fi('DVSTREET01', 'Street 2', TS, 40, DOx),
                'DVSTREET02' => fi('DVSTREET02', 'Street 3', TS, 40, DOx),
                'DVSTREET03' => fi('DVSTREET03', 'Street 4', TS, 40, DOx),
                'DVSTREET04' => fi('DVSTREET04', 'Street 5', TS, 40, DOx),
                'COUNTRY' => fi('COUNTRY', 'Country', TS, 3, DOx),
                'DVCOUNTRY' => fi('DVCOUNTRY', 'Country', TS, 3, DOx),
                'USERNAME' => fi('USERNAME', 'Char', TS, 40, DOx),
                'USERNAMEFIRST' => fi('USERNAMEFIRST', 'Char', TS, 40, DOx),
                'USERNAMELAST' => fi('USERNAMELAST', 'Char', TS, 40, DOx),
                'USEREMAIL' => fi('USEREMAIL', 'USEREMAIL', TS, 241, DOx),
                'USERPHONE' => fi('USERPHONE', '30 Characters', TS, 30, DOx),
                'ZWELS' => fi('ZWELS', 'Payment methods', TS, 10, DOx),
                'ZZHWW_DSPLIT' => fi('ZZHWW_DSPLIT', 'Coll.Dl.DaySOrg', TS, 3, DOx),
                'ZZTEL_NUMBER' => fi('ZZTEL_NUMBER', 'Telephone', TS, 30, DOx),
                'ZZHTR_DBSBANK' => fi('ZZHTR_DBSBANK', 'House Bank', TS, 5, DOx),
                'ZZHTR_DBSFL' => fi('ZZHTR_DBSFL', 'DDS flag', TS, 1, DOx),
                'x_FISSAN_PBEZ2' => fi('x_FISSAN_PBEZ2', 'Proj.desc.', TS, 55, DOx),
                'ZZHWW_DPDPREDICT' => fi('ZZHWW_DPDPREDICT', 'Cust.notif.', TS, 1, DOx),
                'USERPHONEEXTENS' => fi('USERPHONEEXTENS', 'Extension', TS, 10, DOx),
                'DVTELNUMBER' => fi('DVTELNUMBER', 'Telephone', TS, 30, DOx),
                'DVTELEXTENS' => fi('DVTELEXTENS', 'Extension', TS, 10, DOx),
                'IDMAREFNR' => fi('IDMAREFNR', 'Customer', TS, 10, DOx),
                'CONTRIBUTION_MARGIN_ABS' => fi('CONTRIBUTION_MARGIN_ABS', 'Contrib. marg. abs.', TDC, 15,2, DOx),
                'CONTRIBUTION_MARGIN_PROZ' => fi('CONTRIBUTION_MARGIN_PROZ', 'Contrib. margin in %', TDC, 15,3, DOx),
                'ANGDT' => fi('ANGDT', 'Valid from', TD, 8, DOx),
                'BNDDT' => fi('BNDDT', 'Valid to', TD, 8, DOx)
            }
        ),
        'ET_CONTAINER' => new overcast.TypeInfo('ET_CONTAINER', '', ST, DOx,
            new Map<String, overcast.FieldInfo> {
                'VAKEY' => fi('VAKEY', 'Field', TS, 20, DOx),
                'QUALIF' => fi('QUALIF', 'Qualifier', TS, 30, DOx),
                'FVALUE' => fi('FVALUE', 'Value', TS, 255, DOx)
            }
        ),
        'ET_PAYMENT' => new overcast.TypeInfo('ET_PAYMENT', '', ST, DOx,
            new Map<String, overcast.FieldInfo> {
                'ID' => fi('ID', 'ID', TS, 20, DOx),
                'TYPE_x' => fi('TYPE_x', 'Description', TS, 20, DOx),
                'DEFAULT_x' => fi('DEFAULT_x', 'Checkbox', TS, 1, DOx),
                'METHOD' => fi('METHOD', 'Description', TS, 20, DOx),
                'DISPLAY_NAME' => fi('DISPLAY_NAME', 'Work Area Length 128', TS, 128, DOx),
                'DESCRIPTION' => fi('DESCRIPTION', 'DESCRIPTION', TS, 0, DOx),
                'LOGO_HREF' => fi('LOGO_HREF', 'LOGO_HREF', TS, 0, DOx),
                'INFO_I_HREF' => fi('INFO_I_HREF', 'INFO_I_HREF', TS, 0, DOx),
                'CONFIRMATION_TEXT' => fi('CONFIRMATION_TEXT', 'CONFIRMATION_TEXT', TS, 0, DOx),
                'FEE' => fi('FEE', 'FEE', TDC, 17,4, DOx),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency', TS, 5, DOx),
                'CHECK_CVC' => fi('CHECK_CVC', 'Checkbox', TS, 1, DOx)
            }
        ),
        'IT_POS' => new overcast.TypeInfo('IT_POS', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'ORDPOSNO' => fi('ORDPOSNO', 'Item', TS, 6, DB),
                'CANCELFLG' => fi('CANCELFLG', 'Delete', TS, 1, DB),
                'ARTNO' => fi('ARTNO', 'Material', TS, 18, DB),
                'MMUISO' => fi('MMUISO', 'ISO code', TS, 3, DB),
                'ORDPOSQT' => fi('ORDPOSQT', 'Order Quantity', TDC, 15,3, DB),
                'DVCUSYRWK' => fi('DVCUSYRWK', 'Req.Deliv.Week', TS, 6, DB),
                'DVCUSDT' => fi('DVCUSDT', 'Del.Date', TS, 8, DB),
                'CMSNTEXT' => fi('CMSNTEXT', 'Picking', TS, 35, DB),
                'IMMDELIV' => fi('IMMDELIV', 'IMMDELIV', TS, 1, DB),
                'CANCELREA' => fi('CANCELREA', 'RejectionReason', TS, 2, DB),
                'DELETEFLG' => fi('DELETEFLG', 'Delete Zero Amounts', TS, 1, DB),
                'ZZHAC_C1ID' => fi('ZZHAC_C1ID', 'ID ConfOne', TS, 16, DB),
                'BSARK' => fi('BSARK', 'Pur. ord. type', TS, 4, DB),
                'REF_DOC' => fi('REF_DOC', 'Reference Doc.', TS, 10, DB),
                'REF_DOC_IT' => fi('REF_DOC_IT', 'Reference Item', TS, 6, DB),
                'ARKTX' => fi('ARKTX', 'Description', TS, 40, DB)
            }
        ),
        'IT_KOMV' => new overcast.TypeInfo('IT_KOMV', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'ORDPOSNO' => fi('ORDPOSNO', 'Item number of the SD document', TS, 6, DB),
                'MATNR' => fi('MATNR', 'Material Number', TS, 18, DB),
                'MEINS' => fi('MEINS', 'Packaging Unit', TS, 3, DB),
                'UMREZ' => fi('UMREZ', 'Conversion factor ZPU', TDC, 13,3, DB),
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'KNUMV' => fi('KNUMV', 'Number of the document condition', TS, 10, DB),
                'KPOSN' => fi('KPOSN', 'Condition item number', TS, 6, DB),
                'STUNR' => fi('STUNR', 'Step number', TS, 3, DB),
                'ZAEHK' => fi('ZAEHK', 'Condition counter', TS, 2, DB),
                'KAPPL' => fi('KAPPL', 'Application', TS, 2, DB),
                'KSCHL' => fi('KSCHL', 'Condition Type', TS, 4, DB),
                'KDATU' => fi('KDATU', 'Condition pricing date', TD, 8, DB),
                'KRECH' => fi('KRECH', 'Calculation type for condition', TS, 1, DB),
                'KAWRT' => fi('KAWRT', 'Condition base value', TDC, 15,2, DB),
                'KBETR' => fi('KBETR', 'Rate (condition amount or percentage)', TDC, 11,2, DB),
                'WAERS' => fi('WAERS', 'Currency Key', TS, 5, DB),
                'KKURS' => fi('KKURS', 'Condition exchange rate for conversion to local currency', TDC, 9,5, DB),
                'KPEIN' => fi('KPEIN', 'Condition pricing unit', TDC, 5,0, DB),
                'KMEIN' => fi('KMEIN', 'Condition unit in the document', TS, 3, DB),
                'KUMZA' => fi('KUMZA', 'Numerator for converting condition units to base units', TDC, 5,0, DB),
                'KUMNE' => fi('KUMNE', 'Denominator for converting condition units to base units', TDC, 5,0, DB),
                'KNTYP' => fi('KNTYP', 'Condition category (examples: tax, freight, price, cost)', TS, 1, DB),
                'KSTAT' => fi('KSTAT', 'Condition is used for statistics', TS, 1, DB),
                'KNPRS' => fi('KNPRS', 'Scale Type', TS, 1, DB),
                'KRUEK' => fi('KRUEK', 'Condition is Relevant for Accrual  (e.g. Freight)', TS, 1, DB),
                'KRELI' => fi('KRELI', 'Condition for invoice list', TS, 1, DB),
                'KHERK' => fi('KHERK', 'Origin of the condition', TS, 1, DB),
                'KGRPE' => fi('KGRPE', 'Group condition', TS, 1, DB),
                'KOUPD' => fi('KOUPD', 'Condition update', TS, 1, DB),
                'KOLNR' => fi('KOLNR', 'Access sequence - Access number', TS, 2, DB),
                'KNUMH' => fi('KNUMH', 'Condition record number', TS, 10, DB),
                'KOPOS' => fi('KOPOS', 'Sequential number of the condition', TS, 2, DB),
                'KVSL1' => fi('KVSL1', 'Account key', TS, 3, DB),
                'SAKN1' => fi('SAKN1', 'G/L Account Number', TS, 10, DB),
                'MWSK1' => fi('MWSK1', 'Tax on Sales/Purchases Code', TS, 2, DB),
                'KVSL2' => fi('KVSL2', 'Account key - accruals / provisions', TS, 3, DB),
                'SAKN2' => fi('SAKN2', 'Number of Provision Account', TS, 10, DB),
                'MWSK2' => fi('MWSK2', 'Withholding tax code', TS, 2, DB),
                'LIFNR' => fi('LIFNR', 'Account Number of Supplier', TS, 10, DB),
                'KUNNR' => fi('KUNNR', 'Customer number (rebate recipient)', TS, 10, DB),
                'KDIFF' => fi('KDIFF', 'Rounding-off difference of the condition', TDC, 5,2, DB),
                'KWERT' => fi('KWERT', 'Condition value', TDC, 13,2, DB),
                'KSTEU' => fi('KSTEU', 'Condition control', TS, 1, DB),
                'KINAK' => fi('KINAK', 'Condition is inactive', TS, 1, DB),
                'KOAID' => fi('KOAID', 'Condition class', TS, 1, DB),
                'ZAEKO' => fi('ZAEKO', 'Condition counter for (header conditions)', TS, 2, DB),
                'KMXAW' => fi('KMXAW', 'Indicator for maximum condition base value', TS, 1, DB),
                'KMXWR' => fi('KMXWR', 'Indicator for maximum condition amount', TS, 1, DB),
                'KFAKTOR' => fi('KFAKTOR', 'Factor for condition base value', TDBL, 16,8, DB),
                'KDUPL' => fi('KDUPL', 'Structure condition', TS, 1, DB),
                'KFAKTOR1' => fi('KFAKTOR1', 'Factor for condition basis (period)', TDBL, 16,8, DB),
                'KZBZG' => fi('KZBZG', 'Scale basis indicator', TS, 1, DB),
                'KSTBS' => fi('KSTBS', 'Scale base value of the condition', TDC, 15,2, DB),
                'KONMS' => fi('KONMS', 'Condition scale unit of measure', TS, 3, DB),
                'KONWS' => fi('KONWS', 'Scale currency', TS, 5, DB),
                'KAWRT_K' => fi('KAWRT_K', 'Condition base value', TDC, 15,2, DB),
                'KWAEH' => fi('KWAEH', 'Condition Currency (for Cumulation Fields)', TS, 5, DB),
                'KWERT_K' => fi('KWERT_K', 'Condition value', TDC, 13,2, DB),
                'KFKIV' => fi('KFKIV', 'Condition for inter-company billing', TS, 1, DB),
                'KVARC' => fi('KVARC', 'Condition for configuration', TS, 1, DB),
                'KMPRS' => fi('KMPRS', 'Condition changed manually', TS, 1, DB),
                'PRSQU' => fi('PRSQU', 'Price source', TS, 1, DB),
                'VARCOND' => fi('VARCOND', 'Variant condition', TS, 26, DB),
                'STUFE' => fi('STUFE', 'Level (in multi-level BOM explosions)', TDC, 3,0, DB),
                'WEGXX' => fi('WEGXX', 'Path (for multi-level BOM explosions)', TDC, 5,0, DB),
                'KTREL' => fi('KTREL', 'Relevance for account assignment', TS, 1, DB),
                'MDFLG' => fi('MDFLG', 'Indicator: Matrix maintenance', TS, 1, DB),
                'TXJLV' => fi('TXJLV', 'Tax jurisdiction code level', TS, 1, DB),
                'PRSCH' => fi('PRSCH', 'Price levels', TS, 4, DB),
                'KOFRM' => fi('KOFRM', 'Condition formula for alternative calculation type', TS, 3, DB),
                'STFKZ' => fi('STFKZ', 'Scale Type', TS, 1, DB),
                'KSTBM' => fi('KSTBM', 'Incremental scale: start of interval', TDC, 15,2, DB),
                'KSTBM_NEXT' => fi('KSTBM_NEXT', 'Increase scale: end of interval', TDC, 15,2, DB),
                'IX_KOMT1' => fi('IX_KOMT1', 'Index number for internal tables', TI, 10, DB),
                'IX_GKOMV' => fi('IX_GKOMV', 'Index number for internal tables', TI, 10, DB),
                'ZAEHK_IND' => fi('ZAEHK_IND', 'Condition item index', TS, 2, DB),
                'DRUKZ' => fi('DRUKZ', 'Print ID for condition lines', TS, 1, DB),
                'STUNB' => fi('STUNB', 'From Ref. Step for Percentage Conditions', TS, 3, DB),
                'STUN2' => fi('STUN2', 'From Ref. Step for Percentage Conditions', TS, 3, DB),
                'KZWIW' => fi('KZWIW', 'Condition subtotal', TS, 1, DB),
                'KOFRA' => fi('KOFRA', 'Alternative formula for condition base value', TS, 3, DB),
                'KOFRS' => fi('KOFRS', 'Formula for scale base value', TS, 3, DB),
                'KMANU' => fi('KMANU', 'Making manual entries', TS, 1, DB),
                'TXPRF' => fi('TXPRF', 'Rounding rule', TS, 1, DB),
                'KNEGA' => fi('KNEGA', 'Plus/minus sign of the condition amount', TS, 1, DB),
                'GANZZ' => fi('GANZZ', 'Indicator: Currency Translation after Multiplication', TS, 1, DB),
                'KOBLI' => fi('KOBLI', 'Condition is mandatory', TS, 1, DB),
                'KAEND_BTR' => fi('KAEND_BTR', 'Condition rate of change for amount/percentage', TS, 1, DB),
                'KAEND_WRT' => fi('KAEND_WRT', 'Scope for changing the value', TS, 1, DB),
                'KAEND_UFK' => fi('KAEND_UFK', 'Scope for changing conversion factors', TS, 1, DB),
                'KAEND_RCH' => fi('KAEND_RCH', 'Calculation type can be changed', TS, 1, DB),
                'KAEND_LOE' => fi('KAEND_LOE', 'Delete the scope for changing rate', TS, 1, DB),
                'KAEND_MEH' => fi('KAEND_MEH', 'Condition scope of change for unit of measure', TS, 1, DB),
                'KZTERM' => fi('KZTERM', 'Terms of payment ID in the condition', TS, 1, DB),
                'FXMSG' => fi('FXMSG', 'Message number', TS, 3, DB),
                'UPDKZ' => fi('UPDKZ', 'Update indicator', TS, 1, DB),
                'SELKZ' => fi('SELKZ', 'Selection flag', TS, 1, DB),
                'BOSTA' => fi('BOSTA', 'Status of the agreement', TS, 1, DB),
                'KSPAE' => fi('KSPAE', 'Rebate was set up retroactively', TS, 1, DB),
                'LOEVM_KO' => fi('LOEVM_KO', 'Deletion Indicator for Condition Item', TS, 1, DB),
                'KNUMA_BO' => fi('KNUMA_BO', 'Agreement (various conditions grouped together)', TS, 10, DB),
                'BERGL' => fi('BERGL', 'Calculation Base', TS, 1, DB),
                'VHART' => fi('VHART', 'Packaging Material Type', TS, 4, DB),
                'RDIFA' => fi('RDIFA', 'Rounding difference comparison', TS, 1, DB),
                'KMENG' => fi('KMENG', 'Quantity conversion', TS, 1, DB),
                'KBUFF' => fi('KBUFF', 'Condition read from buffer', TS, 1, DB),
                'BOSTA_CR' => fi('BOSTA_CR', 'Condition Record Status (Rebate)', TS, 1, DB),
                'x_FIS_KZ_SD_EK' => fi('x_FIS_KZ_SD_EK', 'Indicator which add. purchase data are drawn from SD', TS, 1, DB),
                'x_FIS_ZZVPE' => fi('x_FIS_ZZVPE', 'Packaging discount', TS, 2, DB)
            }
        ),
        'IT_TEXTE' => new overcast.TypeInfo('IT_TEXTE', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'ORDPOSNO' => fi('ORDPOSNO', 'Item number of the SD document', TS, 6, DB),
                'TDID' => fi('TDID', 'Text ID', TS, 4, DB),
                'TDFORMAT' => fi('TDFORMAT', 'Tag column', TS, 2, DB),
                'TDLINE' => fi('TDLINE', 'Text Line', TS, 132, DB)
            }
        ),
        'IT_CFGVALUE' => new overcast.TypeInfo('IT_CFGVALUE', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'CONFIG_ID' => fi('CONFIG_ID', 'External Configuration ID (Temporary)', TS, 6, DB),
                'INST_ID' => fi('INST_ID', 'Instance Number in Configuration', TS, 8, DB),
                'CHARC' => fi('CHARC', 'Characteristic Name', TS, 40, DB),
                'CHARC_TXT' => fi('CHARC_TXT', 'Language-Dependent Characteristic Description', TS, 70, DB),
                'VALUE' => fi('VALUE', 'Characteristic Value', TS, 40, DB),
                'VALUE_TXT' => fi('VALUE_TXT', 'Language-Dependent Description of Characteristic Value', TS, 70, DB),
                'AUTHOR' => fi('AUTHOR', 'Statement was Inferred', TS, 1, DB),
                'VALUE_TO' => fi('VALUE_TO', 'Characteristic Value', TS, 40, DB),
                'VALCODE' => fi('VALCODE', 'Value Type: Interval Limits - Single Values', TS, 1, DB)
            }
        ),
        'IT_FOCPOS' => new overcast.TypeInfo('IT_FOCPOS', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'ORDPOSNO' => fi('ORDPOSNO', 'Item', TS, 6, DB),
                'ARTNO' => fi('ARTNO', 'Material', TS, 18, DB)
            }
        ),
        'ET_POS' => new overcast.TypeInfo('ET_POS', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'ORDPOSNO' => fi('ORDPOSNO', 'Item', TS, 6, DB),
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'CANCELFLG' => fi('CANCELFLG', 'Delete', TS, 1, DB),
                'ARTNO' => fi('ARTNO', 'Material', TS, 18, DB),
                'ARTDESC' => fi('ARTDESC', 'Description', TS, 40, DB),
                'MMUISO' => fi('MMUISO', 'ISO code', TS, 3, DB),
                'MMU' => fi('MMU', 'Commercial', TS, 3, DB),
                'ORDPOSQT' => fi('ORDPOSQT', 'Order Quantity', TDC, 15,3, DB),
                'DVCUSYRWK' => fi('DVCUSYRWK', 'Req.Deliv.Week', TS, 6, DB),
                'DVCUSDT' => fi('DVCUSDT', 'Del.Date', TS, 8, DB),
                'CMSNTEXT' => fi('CMSNTEXT', 'Picking', TS, 35, DB),
                'CUSARTNO' => fi('CUSARTNO', 'Cust.material', TS, 35, DB),
                'PSTYV' => fi('PSTYV', 'Item Category', TS, 4, DB),
                'KZ_STL' => fi('KZ_STL', 'BOM Main Part Info', TS, 1, DB),
                'CHNGPOSS' => fi('CHNGPOSS', 'Changeabilit', TS, 1, DB),
                'UEPOS' => fi('UEPOS', 'Higher-lev.item', TS, 6, DB),
                'ZZHDESTATE' => fi('ZZHDESTATE', 'HDE Order status', TS, 1, DB),
                'IMMDELIV' => fi('IMMDELIV', 'IMMDELIV', TS, 1, DB),
                'BACKLOG' => fi('BACKLOG', 'del. indicator', TS, 1, DB),
                'DELNOPRT' => fi('DELNOPRT', 'DELNOPRT', TS, 1, DB),
                'INVOICED' => fi('INVOICED', 'INVOICED', TS, 1, DB),
                'POSTYPE' => fi('POSTYPE', 'Position type', TS, 1, DB),
                'ZZHTR_ABGRU' => fi('ZZHTR_ABGRU', 'RejectionReason', TS, 2, DB),
                'ZZHAC_C1ID' => fi('ZZHAC_C1ID', 'ID ConfOne', TS, 16, DB),
                'BSARK' => fi('BSARK', 'Pur. ord. type', TS, 4, DB),
                'WERKS' => fi('WERKS', 'Plant', TS, 4, DB),
                'DEL_STATE' => fi('DEL_STATE', 'Overall dlv.st.', TS, 1, DB),
                'ZZHDE_EINDT' => fi('ZZHDE_EINDT', 'Manual Date', TD, 8, DB)
            }
        ),
        'ET_EINT_OUT' => new overcast.TypeInfo('ET_EINT_OUT', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'ORDPOSNO' => fi('ORDPOSNO', 'Item', TS, 6, DB),
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'BDCNT' => fi('BDCNT', 'numc5', TS, 5, DB),
                'REQ_DATE' => fi('REQ_DATE', 'Reqmts date', TD, 8, DB),
                'REQ_QTY' => fi('REQ_QTY', 'Requirement qty', TDC, 13,3, DB),
                'COM_DATE' => fi('COM_DATE', 'Committed date', TD, 8, DB),
                'COM_QTY' => fi('COM_QTY', 'Committed Qty', TDC, 13,3, DB),
                'LIFSP' => fi('LIFSP', 'Delivery block', TS, 2, DB),
                'LFMNG' => fi('LFMNG', 'Delivery Qty', TDC, 13,3, DB),
                'WERKS' => fi('WERKS', 'Plant', TS, 4, DB),
                'SHIPONDATE' => fi('SHIPONDATE', 'Ship On Date', TD, 8, DB)
            }
        ),
        'ET_KOMV_OUT' => new overcast.TypeInfo('ET_KOMV_OUT', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'ORDPOSNO' => fi('ORDPOSNO', 'Item', TS, 6, DB),
                'MATNR' => fi('MATNR', 'Material', TS, 18, DB),
                'MEINS' => fi('MEINS', 'Packaging Unit', TS, 3, DB),
                'UMREZ' => fi('UMREZ', 'ZPU', TDC, 13,3, DB),
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'KNUMV' => fi('KNUMV', 'Doc. condition', TS, 10, DB),
                'KPOSN' => fi('KPOSN', 'Item', TS, 6, DB),
                'STUNR' => fi('STUNR', 'Step number', TS, 3, DB),
                'ZAEHK' => fi('ZAEHK', 'Counter', TS, 2, DB),
                'KAPPL' => fi('KAPPL', 'Application', TS, 2, DB),
                'KSCHL' => fi('KSCHL', 'Condition Type', TS, 4, DB),
                'KDATU' => fi('KDATU', 'CondPricingDate', TD, 8, DB),
                'KRECH' => fi('KRECH', 'Calculat.type', TS, 1, DB),
                'KAWRT' => fi('KAWRT', 'Cond.base value', TDC, 15,2, DB),
                'KBETR' => fi('KBETR', 'Amount', TDC, 11,2, DB),
                'WAERS' => fi('WAERS', 'Currency', TS, 5, DB),
                'KKURS' => fi('KKURS', 'Cond.exch.rate', TDC, 9,5, DB),
                'KPEIN' => fi('KPEIN', 'Pricing unit', TDC, 5,0, DB),
                'KMEIN' => fi('KMEIN', 'Condition unit', TS, 3, DB),
                'KUMZA' => fi('KUMZA', 'Numer.for conv.', TDC, 5,0, DB),
                'KUMNE' => fi('KUMNE', 'Den. for conv.', TDC, 5,0, DB),
                'KNTYP' => fi('KNTYP', 'Condit.category', TS, 1, DB),
                'KSTAT' => fi('KSTAT', 'Statistical', TS, 1, DB),
                'KNPRS' => fi('KNPRS', 'Scale type', TS, 1, DB),
                'KRUEK' => fi('KRUEK', 'Accruals', TS, 1, DB),
                'KRELI' => fi('KRELI', 'Inv.list cond.', TS, 1, DB),
                'KHERK' => fi('KHERK', 'Condit.origin', TS, 1, DB),
                'KGRPE' => fi('KGRPE', 'Group condition', TS, 1, DB),
                'KOUPD' => fi('KOUPD', 'Condit.update', TS, 1, DB),
                'KOLNR' => fi('KOLNR', 'Access', TS, 2, DB),
                'KNUMH' => fi('KNUMH', 'Cond.record no.', TS, 10, DB),
                'KOPOS' => fi('KOPOS', 'SequNo of cond.', TS, 2, DB),
                'KVSL1' => fi('KVSL1', 'Account key', TS, 3, DB),
                'SAKN1' => fi('SAKN1', 'G/L Account', TS, 10, DB),
                'MWSK1' => fi('MWSK1', 'Tax Code', TS, 2, DB),
                'KVSL2' => fi('KVSL2', 'Accruals', TS, 3, DB),
                'SAKN2' => fi('SAKN2', 'Provision acc.', TS, 10, DB),
                'MWSK2' => fi('MWSK2', 'W/tax code', TS, 2, DB),
                'LIFNR' => fi('LIFNR', 'Supplier', TS, 10, DB),
                'KUNNR' => fi('KUNNR', 'Customer', TS, 10, DB),
                'KDIFF' => fi('KDIFF', 'CondRoundDiff.', TDC, 5,2, DB),
                'KWERT' => fi('KWERT', 'Condition value', TDC, 13,2, DB),
                'KSTEU' => fi('KSTEU', 'Cond.control', TS, 1, DB),
                'KINAK' => fi('KINAK', 'Inactive', TS, 1, DB),
                'KOAID' => fi('KOAID', 'Condition class', TS, 1, DB),
                'ZAEKO' => fi('ZAEKO', 'HdCond.counter', TS, 2, DB),
                'KMXAW' => fi('KMXAW', 'Max base value', TS, 1, DB),
                'KMXWR' => fi('KMXWR', 'Maximum amount', TS, 1, DB),
                'KFAKTOR' => fi('KFAKTOR', 'CondFactor', TDBL, 16,8, DB),
                'KDUPL' => fi('KDUPL', 'StrucCond.', TS, 1, DB),
                'KFAKTOR1' => fi('KFAKTOR1', 'CondFactor', TDBL, 16,8, DB),
                'KZBZG' => fi('KZBZG', 'Scale basis', TS, 1, DB),
                'KSTBS' => fi('KSTBS', 'Scale base val.', TDC, 15,2, DB),
                'KONMS' => fi('KONMS', 'Scale UoM', TS, 3, DB),
                'KONWS' => fi('KONWS', 'Scale currency', TS, 5, DB),
                'KAWRT_K' => fi('KAWRT_K', 'Cond.base value', TDC, 15,2, DB),
                'KWAEH' => fi('KWAEH', 'Cndn Currency', TS, 5, DB),
                'KWERT_K' => fi('KWERT_K', 'Condition value', TDC, 13,2, DB),
                'KFKIV' => fi('KFKIV', 'Int-comBillCond', TS, 1, DB),
                'KVARC' => fi('KVARC', 'Variant cond.', TS, 1, DB),
                'KMPRS' => fi('KMPRS', 'Changed manual.', TS, 1, DB),
                'PRSQU' => fi('PRSQU', 'Price source', TS, 1, DB),
                'VARCOND' => fi('VARCOND', 'Variant', TS, 26, DB),
                'STUFE' => fi('STUFE', 'Level', TDC, 3,0, DB),
                'WEGXX' => fi('WEGXX', 'Path', TDC, 5,0, DB),
                'KTREL' => fi('KTREL', 'Rel.Acc.Assig.', TS, 1, DB),
                'MDFLG' => fi('MDFLG', 'Matrix maint.', TS, 1, DB),
                'TXJLV' => fi('TXJLV', 'Jurisdiction level', TS, 1, DB),
                'PRSCH' => fi('PRSCH', 'Price levels', TS, 4, DB),
                'KOFRM' => fi('KOFRM', 'Alt.calc.type', TS, 3, DB),
                'STFKZ' => fi('STFKZ', 'Scale type', TS, 1, DB),
                'KSTBM' => fi('KSTBM', 'Interval start', TDC, 15,2, DB),
                'KSTBM_NEXT' => fi('KSTBM_NEXT', 'End of interval', TDC, 15,2, DB),
                'IX_KOMT1' => fi('IX_KOMT1', 'Index number', TI, 10, DB),
                'IX_GKOMV' => fi('IX_GKOMV', 'Index number', TI, 10, DB),
                'ZAEHK_IND' => fi('ZAEHK_IND', 'Cond.item index', TS, 2, DB),
                'DRUKZ' => fi('DRUKZ', 'Print', TS, 1, DB),
                'STUNB' => fi('STUNB', 'From step', TS, 3, DB),
                'STUN2' => fi('STUN2', 'From step', TS, 3, DB),
                'KZWIW' => fi('KZWIW', 'Subtotal', TS, 1, DB),
                'KOFRA' => fi('KOFRA', 'AltCondBaseVal', TS, 3, DB),
                'KOFRS' => fi('KOFRS', 'Scale formula', TS, 3, DB),
                'KMANU' => fi('KMANU', 'Manual entries', TS, 1, DB),
                'TXPRF' => fi('TXPRF', 'Rounding rule', TS, 1, DB),
                'KNEGA' => fi('KNEGA', 'Plus/minus', TS, 1, DB),
                'GANZZ' => fi('GANZZ', 'Currency conv.', TS, 1, DB),
                'KOBLI' => fi('KOBLI', 'Required', TS, 1, DB),
                'KAEND_BTR' => fi('KAEND_BTR', 'Amount/percent', TS, 1, DB),
                'KAEND_WRT' => fi('KAEND_WRT', 'Value', TS, 1, DB),
                'KAEND_UFK' => fi('KAEND_UFK', 'Qty relation', TS, 1, DB),
                'KAEND_RCH' => fi('KAEND_RCH', 'Calculat.type', TS, 1, DB),
                'KAEND_LOE' => fi('KAEND_LOE', 'Delete', TS, 1, DB),
                'KAEND_MEH' => fi('KAEND_MEH', 'Unit of measure', TS, 1, DB),
                'KZTERM' => fi('KZTERM', 'TermsOfPayment', TS, 1, DB),
                'FXMSG' => fi('FXMSG', 'Message', TS, 3, DB),
                'UPDKZ' => fi('UPDKZ', 'Update indicator', TS, 1, DB),
                'SELKZ' => fi('SELKZ', 'Selection', TS, 1, DB),
                'BOSTA' => fi('BOSTA', 'Agmt status', TS, 1, DB),
                'KSPAE' => fi('KSPAE', 'Retroactive', TS, 1, DB),
                'LOEVM_KO' => fi('LOEVM_KO', 'Deletion Indic.', TS, 1, DB),
                'KNUMA_BO' => fi('KNUMA_BO', 'Agreement', TS, 10, DB),
                'BERGL' => fi('BERGL', 'Calc. base', TS, 1, DB),
                'VHART' => fi('VHART', 'Packag.mat.type', TS, 4, DB),
                'RDIFA' => fi('RDIFA', 'RoundDiffComp', TS, 1, DB),
                'KMENG' => fi('KMENG', 'Qty conversion', TS, 1, DB),
                'KBUFF' => fi('KBUFF', 'Cond. buffer', TS, 1, DB),
                'BOSTA_CR' => fi('BOSTA_CR', 'Cond.Rec Status', TS, 1, DB),
                'x_FIS_KZ_SD_EK' => fi('x_FIS_KZ_SD_EK', 'Ind._add.fields', TS, 1, DB),
                'x_FIS_ZZVPE' => fi('x_FIS_ZZVPE', 'Packaging Discoun', TS, 2, DB)
            }
        ),
        'ET_TEXTE' => new overcast.TypeInfo('ET_TEXTE', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'ORDPOSNO' => fi('ORDPOSNO', 'Item', TS, 6, DB),
                'TDID' => fi('TDID', 'Text ID', TS, 4, DB),
                'TDFORMAT' => fi('TDFORMAT', 'Tag column', TS, 2, DB),
                'TDLINE' => fi('TDLINE', 'Text Line', TS, 132, DB)
            }
        ),
        'ET_MSG_OUT' => new overcast.TypeInfo('ET_MSG_OUT', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'ORDPOSNO' => fi('ORDPOSNO', 'Item', TS, 6, DB),
                'LFDNR' => fi('LFDNR', 'Sequence Number', TS, 3, DB),
                'TYPE_x' => fi('TYPE_x', 'Message type', TS, 1, DB),
                'ID' => fi('ID', 'Message Class', TS, 20, DB),
                'NUMBER_x' => fi('NUMBER_x', 'Message number', TS, 3, DB),
                'MESSAGE' => fi('MESSAGE', 'Message text', TS, 220, DB),
                'LOG_NO' => fi('LOG_NO', 'Log Number', TS, 20, DB),
                'LOG_MSG_NO' => fi('LOG_MSG_NO', 'Message Number', TS, 6, DB),
                'MESSAGE_V1' => fi('MESSAGE_V1', 'Message Variable', TS, 50, DB),
                'MESSAGE_V2' => fi('MESSAGE_V2', 'Message Variable', TS, 50, DB),
                'MESSAGE_V3' => fi('MESSAGE_V3', 'Message Variable', TS, 50, DB),
                'MESSAGE_V4' => fi('MESSAGE_V4', 'Message Variable', TS, 50, DB),
                'PARAMETER' => fi('PARAMETER', 'Parameter Name', TS, 32, DB),
                'ROW' => fi('ROW', 'Parameter line', TI, 10, DB),
                'FIELD' => fi('FIELD', 'Field name', TS, 30, DB),
                'SYSTEM_x' => fi('SYSTEM_x', 'Logical system', TS, 10, DB)
            }
        ),
        'ET_SHIPMETHOD' => new overcast.TypeInfo('ET_SHIPMETHOD', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'SHIPMETHOD' => fi('SHIPMETHOD', 'Shipment Method', TS, 132, DB),
                'SHIPPINGTITLE' => fi('SHIPPINGTITLE', 'Shipping Title', TS, 500, DB),
                'FREIGHTCHARGES' => fi('FREIGHTCHARGES', 'Freight Charges', TDC, 19,2, DB)
            }
        ),
        'ET_CFGVALUE' => new overcast.TypeInfo('ET_CFGVALUE', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'RUNNPOSNO' => fi('RUNNPOSNO', 'Sequence Number', TS, 3, DB),
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'INST_ID' => fi('INST_ID', 'Instance Number', TS, 8, DB),
                'CHARC' => fi('CHARC', 'Char. Name', TS, 40, DB),
                'CHARC_TXT' => fi('CHARC_TXT', 'Char. Description', TS, 70, DB),
                'VALUE' => fi('VALUE', 'Char. Value', TS, 40, DB),
                'VALUE_TXT' => fi('VALUE_TXT', 'Value Descript.', TS, 70, DB),
                'AUTHOR' => fi('AUTHOR', 'Inferred', TS, 1, DB),
                'VALUE_TO' => fi('VALUE_TO', 'Char. Value', TS, 40, DB),
                'VALCODE' => fi('VALCODE', 'Value Type', TS, 1, DB)
            }
        ),
        'ET_FOCITEMS' => new overcast.TypeInfo('ET_FOCITEMS', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'MANDT' => fi('MANDT', 'Client', TS, 3, DB),
                'SCHEME_CODE' => fi('SCHEME_CODE', 'Scheme Code', TS, 10, DB),
                'SORTN' => fi('SORTN', 'Sort number', TS, 4, DB),
                'FOC_ITEM' => fi('FOC_ITEM', 'Material', TS, 18, DB)
            }
        )
    };
}