global class sapSalesOrderDetailMeta0 {
/* 
 * Generated by Overcast UTC 2024-03-27 04:31:24Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */

    static overcast.Realtime.StructureType SS = overcast.Realtime.StructureType.STRUCTURE;
    static overcast.Realtime.StructureType ST = overcast.Realtime.StructureType.TABLE;

    static overcast.Realtime.Direction DI = overcast.Realtime.Direction.INPUT;
    static overcast.Realtime.Direction DOx = overcast.Realtime.Direction.OUTPUT;
    static overcast.Realtime.Direction DB = overcast.Realtime.Direction.BOTH;
    
    static overcast.Realtime.ApexType TS = overcast.Realtime.ApexType.STRINGX;
    static overcast.Realtime.ApexType TI = overcast.Realtime.ApexType.INTEGERX;
    static overcast.Realtime.ApexType TL = overcast.Realtime.ApexType.LONGX;
    static overcast.Realtime.ApexType TB = overcast.Realtime.ApexType.BOOLEANX;
    static overcast.Realtime.ApexType TD = overcast.Realtime.ApexType.DATEX;
    static overcast.Realtime.ApexType TDT = overcast.Realtime.ApexType.DATETIMEX;
    static overcast.Realtime.ApexType TDC = overcast.Realtime.ApexType.DECIMALX;
    static overcast.Realtime.ApexType TDBL = overcast.Realtime.ApexType.DOUBLEX;
    static overcast.Realtime.ApexType TT = overcast.Realtime.ApexType.TIMEX;
    static overcast.Realtime.ApexType TBLB = overcast.Realtime.ApexType.BLOBX;

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, overcast.Realtime.Direction e) {
        return new overcast.FieldInfo(a, b, c, d, e);
    }

    static overcast.FieldInfo fi(String a, String b, overcast.Realtime.ApexType c, Integer d, Integer e, overcast.Realtime.Direction f) {
        return new overcast.FieldInfo(a, b, c, d, e, f);
    }

    public static Map<String, overcast.TypeInfo> metadata = new Map<String, overcast.TypeInfo> {
        'BAPISDORDER_GETDETAILEDLIST' => new overcast.TypeInfo('BAPISDORDER_GETDETAILEDLIST', '', SS, DI,
            new Map<String, overcast.FieldInfo> {
                'I_MEMORY_READ' => fi('I_MEMORY_READ', 'I_MEMORY_READ', TS, 1, DI),
                'I_WITH_HEADER_CONDITIONS' => fi('I_WITH_HEADER_CONDITIONS', 'I_WITH_HEADER_CONDITIONS', TS, 1, DI)
            }
        ),
        'I_BAPI_VIEW' => new overcast.TypeInfo('I_BAPI_VIEW', 'Bapi View for Data Reduction', SS, DI,
            new Map<String, overcast.FieldInfo> {
                'HEADER' => fi('HEADER', 'Checkbox', TS, 1, DI),
                'ITEM' => fi('ITEM', 'Checkbox', TS, 1, DI),
                'SDSCHEDULE' => fi('SDSCHEDULE', 'Checkbox', TS, 1, DI),
                'BUSINESS' => fi('BUSINESS', 'Checkbox', TS, 1, DI),
                'PARTNER' => fi('PARTNER', 'Checkbox', TS, 1, DI),
                'ADDRESS' => fi('ADDRESS', 'Checkbox', TS, 1, DI),
                'STATUS_H' => fi('STATUS_H', 'Checkbox', TS, 1, DI),
                'STATUS_I' => fi('STATUS_I', 'Checkbox', TS, 1, DI),
                'SDCOND' => fi('SDCOND', 'Checkbox', TS, 1, DI),
                'SDCOND_ADD' => fi('SDCOND_ADD', 'Checkbox', TS, 1, DI),
                'CONTRACT' => fi('CONTRACT', 'Checkbox', TS, 1, DI),
                'TEXT' => fi('TEXT', 'Checkbox', TS, 1, DI),
                'FLOW' => fi('FLOW', 'Checkbox', TS, 1, DI),
                'BILLPLAN' => fi('BILLPLAN', 'Checkbox', TS, 1, DI),
                'CONFIGURE' => fi('CONFIGURE', 'Checkbox', TS, 1, DI),
                'CREDCARD' => fi('CREDCARD', 'Checkbox', TS, 1, DI),
                'INCOMP_LOG' => fi('INCOMP_LOG', 'Checkbox', TS, 1, DI)
            }
        ),
        'SALES_DOCUMENTS' => new overcast.TypeInfo('SALES_DOCUMENTS', 'Document Numbers to Be Selected', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'VBELN' => fi('VBELN', 'Sales Document', TS, 10, DB)
            }
        ),
        'ORDER_HEADERS_OUT' => new overcast.TypeInfo('ORDER_HEADERS_OUT', 'Order Headers for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'DOC_NUMBER' => fi('DOC_NUMBER', 'Sales Document', TS, 10, DB),
                'REC_DATE' => fi('REC_DATE', 'Created On', TD, 8, DB),
                'REC_TIME' => fi('REC_TIME', 'Time', TS, 8, DB),
                'CREATED_BY' => fi('CREATED_BY', 'Created By', TS, 12, DB),
                'QT_VALID_F' => fi('QT_VALID_F', 'Valid from', TD, 8, DB),
                'QT_VALID_T' => fi('QT_VALID_T', 'Valid to', TD, 8, DB),
                'DOC_DATE' => fi('DOC_DATE', 'Document Date', TD, 8, DB),
                'SD_DOC_CAT' => fi('SD_DOC_CAT', 'Document cat.', TS, 1, DB),
                'TRAN_GROUP' => fi('TRAN_GROUP', 'Transact.group', TS, 1, DB),
                'DOC_TYPE' => fi('DOC_TYPE', 'Sales Doc. Type', TS, 4, DB),
                'ORD_REASON' => fi('ORD_REASON', 'Order reason', TS, 3, DB),
                'WAR_DATE' => fi('WAR_DATE', 'Warranty Start', TD, 8, DB),
                'SD_COL_NUM' => fi('SD_COL_NUM', 'Collective no.', TS, 10, DB),
                'DLV_BLOCK' => fi('DLV_BLOCK', 'Delivery block', TS, 2, DB),
                'BILL_BLOCK' => fi('BILL_BLOCK', 'Billing block', TS, 2, DB),
                'NET_VAL_HD' => fi('NET_VAL_HD', 'Currency amount', TDC, 29,9, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Doc. Currency', TS, 5, DB),
                'CURREN_ISO' => fi('CURREN_ISO', 'ISO code crcy', TS, 3, DB),
                'SALES_ORG' => fi('SALES_ORG', 'Sales Org.', TS, 4, DB),
                'DISTR_CHAN' => fi('DISTR_CHAN', 'Distr. Channel', TS, 2, DB),
                'DIVISION' => fi('DIVISION', 'Division', TS, 2, DB),
                'SALES_GRP' => fi('SALES_GRP', 'Sales Group', TS, 3, DB),
                'SALES_OFF' => fi('SALES_OFF', 'Sales Office', TS, 4, DB),
                'BUS_AREA' => fi('BUS_AREA', 'Business Area', TS, 4, DB),
                'CT_AREA' => fi('CT_AREA', 'Business area', TS, 4, DB),
                'CT_VALID_F' => fi('CT_VALID_F', 'Valid from', TD, 8, DB),
                'CT_VALID_T' => fi('CT_VALID_T', 'Valid to', TD, 8, DB),
                'CONDITIONS' => fi('CONDITIONS', 'Doc. condition', TS, 10, DB),
                'REQ_DATE_H' => fi('REQ_DATE_H', 'Request.dlv.dt', TD, 8, DB),
                'DATE_TYPE' => fi('DATE_TYPE', 'Prop.date type', TS, 1, DB),
                'COMPL_DLV' => fi('COMPL_DLV', 'Complete dlv.', TS, 1, DB),
                'DOC_CLASS' => fi('DOC_CLASS', 'Original system', TS, 9, DB),
                'DOC_INDIC' => fi('DOC_INDIC', 'Indicator', TS, 1, DB),
                'SD_PRIC_PR' => fi('SD_PRIC_PR', 'Pric. procedure', TS, 6, DB),
                'SHIP_COND' => fi('SHIP_COND', 'Shp.Cond.', TS, 2, DB),
                'ORDBILLTYP' => fi('ORDBILLTYP', 'Ord-rel.bill.ty', TS, 4, DB),
                'ORD_PROBAB' => fi('ORD_PROBAB', 'Probability', TS, 3, DB),
                'SEAR_PRPR' => fi('SEAR_PRPR', 'Description', TS, 40, DB),
                'PURCH_NO' => fi('PURCH_NO', 'PO Number', TS, 20, DB),
                'PO_METHOD' => fi('PO_METHOD', 'Pur. ord. type', TS, 4, DB),
                'PURCH_DATE' => fi('PURCH_DATE', 'PO Date', TD, 8, DB),
                'PO_SUPPLEM' => fi('PO_SUPPLEM', 'Supplement', TS, 4, DB),
                'REF_1' => fi('REF_1', 'Your Reference', TS, 12, DB),
                'ORDERER_NA' => fi('ORDERER_NA', 'Name', TS, 35, DB),
                'TELEPHONE' => fi('TELEPHONE', 'Telephone', TS, 16, DB),
                'DUN_COUNT' => fi('DUN_COUNT', 'No.of contacts', TDC, 3,0, DB),
                'DUN_DATE' => fi('DUN_DATE', 'Last contact dt', TD, 8, DB),
                'SOLD_TO' => fi('SOLD_TO', 'Sold-To Party', TS, 10, DB),
                'COSTCENTER' => fi('COSTCENTER', 'Cost Center', TS, 10, DB),
                'UPDATE_GRP' => fi('UPDATE_GRP', 'Update group', TS, 6, DB),
                'STAT_CURR' => fi('STAT_CURR', 'Stats Currency', TS, 5, DB),
                'ISOSTATCUR' => fi('ISOSTATCUR', 'ISO code crcy', TS, 3, DB),
                'CH_ON' => fi('CH_ON', 'Changed On', TD, 8, DB),
                'CUST_GRP1' => fi('CUST_GRP1', 'Industry sector', TS, 3, DB),
                'CUST_GRP2' => fi('CUST_GRP2', 'Customer group', TS, 3, DB),
                'CUST_GRP3' => fi('CUST_GRP3', 'Customer type', TS, 3, DB),
                'CUST_GRP4' => fi('CUST_GRP4', 'Potential Group', TS, 3, DB),
                'CUST_GRP5' => fi('CUST_GRP5', 'Rebate group', TS, 3, DB),
                'AGREE_COND' => fi('AGREE_COND', 'Agreement', TS, 10, DB),
                'CO_AREA' => fi('CO_AREA', 'CO Area', TS, 4, DB),
                'WBS_ELEM' => fi('WBS_ELEM', 'WBS Element', TS, 8, DB),
                'EXCHG_RATE' => fi('EXCHG_RATE', 'Exch. Rate Type', TS, 4, DB),
                'C_CTR_AREA' => fi('C_CTR_AREA', 'Cred.Contr.Area', TS, 4, DB),
                'CRED_ACCNT' => fi('CRED_ACCNT', 'Credit account', TS, 10, DB),
                'CRED_GROUP' => fi('CRED_GROUP', 'Cust.cred.grp', TS, 4, DB),
                'REPR_GROUP' => fi('REPR_GROUP', 'Cred.rep.grp', TS, 3, DB),
                'RISK_CATEG' => fi('RISK_CATEG', 'Risk category', TS, 3, DB),
                'CURR_CRED' => fi('CURR_CRED', 'Currency', TS, 5, DB),
                'ISOCURRCRE' => fi('ISOCURRCRE', 'ISO code crcy', TS, 3, DB),
                'REL_DAT_DD' => fi('REL_DAT_DD', 'Release date', TD, 8, DB),
                'NEXT_CHDAT' => fi('NEXT_CHDAT', 'Next check', TD, 8, DB),
                'NEXT_DATE' => fi('NEXT_DATE', 'Next date', TD, 8, DB),
                'REL_CREDIT' => fi('REL_CREDIT', 'Currency amount', TDC, 29,9, DB),
                'HI_TYPE_PR' => fi('HI_TYPE_PR', 'HierTypePricing', TS, 1, DB),
                'DLVSCHEDUS' => fi('DLVSCHEDUS', 'Usage', TS, 3, DB),
                'PLAN_DLV' => fi('PLAN_DLV', 'MRP for DS type', TS, 1, DB),
                'REF_DOC' => fi('REF_DOC', 'Reference Doc.', TS, 10, DB),
                'OB_JNR_HD' => fi('OB_JNR_HD', 'Object no. hdr', TS, 22, DB),
                'COMP_CODE' => fi('COMP_CODE', 'CCodeToBeBilled', TS, 4, DB),
                'ALT_TAX_CL' => fi('ALT_TAX_CL', 'Alt.tax class.', TS, 1, DB),
                'TAX_CLASS2' => fi('TAX_CLASS2', 'TaxClass2-Cust.', TS, 1, DB),
                'TAX_CLASS3' => fi('TAX_CLASS3', 'TaxClass3-Cust.', TS, 1, DB),
                'TAX_CLASS4' => fi('TAX_CLASS4', 'TaxClass4-Cust.', TS, 1, DB),
                'TAX_CLASS5' => fi('TAX_CLASS5', 'TaxClass5-Cust.', TS, 1, DB),
                'TAX_CLASS6' => fi('TAX_CLASS6', 'TaxClass6-Cust.', TS, 1, DB),
                'TAX_CLASS7' => fi('TAX_CLASS7', 'TaxClass7-Cust.', TS, 1, DB),
                'TAX_CLASS8' => fi('TAX_CLASS8', 'TaxClass8-Cust.', TS, 1, DB),
                'TAX_CLASS9' => fi('TAX_CLASS9', 'TaxClass9-Cust.', TS, 1, DB),
                'REF_DOC_L' => fi('REF_DOC_L', 'Reference no.', TS, 16, DB),
                'ASS_NUMBER' => fi('ASS_NUMBER', 'Assignment', TS, 18, DB),
                'DOC_CAT_SD' => fi('DOC_CAT_SD', 'Prec.doc.categ.', TS, 1, DB),
                'KALSM_CH' => fi('KALSM_CH', 'Search proced.', TS, 6, DB),
                'ACC_PERIOD' => fi('ACC_PERIOD', 'Accrual period', TS, 2, DB),
                'ORDERID' => fi('ORDERID', 'Order', TS, 12, DB),
                'NOTIF_NO' => fi('NOTIF_NO', 'Notification', TS, 12, DB),
                'MASTER_CON' => fi('MASTER_CON', 'Master contract', TS, 10, DB),
                'REF_PROC' => fi('REF_PROC', 'Ref.procedure', TS, 4, DB),
                'CHECK_PART' => fi('CHECK_PART', 'Check partner', TS, 1, DB),
                'PICK_UP_DA' => fi('PICK_UP_DA', 'Pick up date', TD, 8, DB),
                'PICK_UP_T1' => fi('PICK_UP_T1', 'Pick up time', TS, 8, DB),
                'PICK_UP_T2' => fi('PICK_UP_T2', 'Pick up time', TS, 8, DB),
                'NUM_PAY_CA' => fi('NUM_PAY_CA', 'Paym.ca.pl.no.', TS, 10, DB),
                'LINE_TIME' => fi('LINE_TIME', 'Req. dely time', TS, 8, DB),
                'TAX_DEST_CT' => fi('TAX_DEST_CT', 'Tax dest. cntry', TS, 3, DB),
                'ISOTAXDEST' => fi('ISOTAXDEST', 'ISO Code', TS, 2, DB),
                'TAX_DEPART' => fi('TAX_DEPART', 'Tax depart. cty', TS, 3, DB),
                'ISOTAXDEPA' => fi('ISOTAXDEPA', 'ISO Code', TS, 2, DB),
                'EU_TRIANG' => fi('EU_TRIANG', 'EU triang. deal', TS, 1, DB),
                'MAST_CONTR' => fi('MAST_CONTR', 'Block master contr. until all lower level contracts updated', TS, 1, DB),
                'CML_QTY_DA' => fi('CML_QTY_DA', 'CmlQtyDate', TD, 8, DB),
                'MS_DATE' => fi('MS_DATE', 'Mat.Avail.Date', TD, 8, DB),
                'VERSION' => fi('VERSION', 'Version', TS, 12, DB),
                'REF_DOC_L_LONG' => fi('REF_DOC_L_LONG', 'Reference', TS, 35, DB),
                'CRM_GUID' => fi('CRM_GUID', 'Char 70', TS, 70, DB),
                'SD_DOC_CAT_LONG' => fi('SD_DOC_CAT_LONG', 'Document Cat.', TS, 4, DB),
                'DOC_CAT_SD_LONG' => fi('DOC_CAT_SD_LONG', 'Document Cat.', TS, 4, DB)
            }
        ),
        'ORDER_ITEMS_OUT' => new overcast.TypeInfo('ORDER_ITEMS_OUT', 'Order Item Data for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'DOC_NUMBER' => fi('DOC_NUMBER', 'Sales Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'MATERIAL' => fi('MATERIAL', 'Material', TS, 18, DB),
                'MAT_ENTRD' => fi('MAT_ENTRD', 'MaterialEntered', TS, 18, DB),
                'PR_REF_MAT' => fi('PR_REF_MAT', 'Pr. Ref. Matl', TS, 18, DB),
                'BATCH' => fi('BATCH', 'Batch', TS, 10, DB),
                'MATL_GROUP' => fi('MATL_GROUP', 'Material Group', TS, 9, DB),
                'SHORT_TEXT' => fi('SHORT_TEXT', 'Description', TS, 40, DB),
                'ITEM_CATEG' => fi('ITEM_CATEG', 'Item Category', TS, 4, DB),
                'ITEM_TYPE' => fi('ITEM_TYPE', 'Item type', TS, 1, DB),
                'REL_FOR_DE' => fi('REL_FOR_DE', 'Item rel.f.dlv.', TS, 1, DB),
                'REL_FOR_BI' => fi('REL_FOR_BI', 'Relev.for Bill.', TS, 1, DB),
                'HG_LV_ITEM' => fi('HG_LV_ITEM', 'Higher-lev.item', TS, 6, DB),
                'ALTERN_ITM' => fi('ALTERN_ITM', 'Altern. to item', TS, 6, DB),
                'REA_FOR_RE' => fi('REA_FOR_RE', 'RejectionReason', TS, 2, DB),
                'PROD_HIER' => fi('PROD_HIER', 'Prod. Hierarchy', TS, 18, DB),
                'OUT_AGR_TA' => fi('OUT_AGR_TA', 'Currency amount', TDC, 29,9, DB),
                'TARGET_QTY' => fi('TARGET_QTY', 'Target quantity', TDC, 13,3, DB),
                'TARGET_QU' => fi('TARGET_QU', 'Target qty UoM', TS, 3, DB),
                'T_UNIT_ISO' => fi('T_UNIT_ISO', 'Target ISO UoM', TS, 3, DB),
                'TARG_QTY_N' => fi('TARG_QTY_N', 'Convers.factor', TDC, 5,0, DB),
                'TARG_QTY_D' => fi('TARG_QTY_D', 'Convers.factor', TDC, 5,0, DB),
                'BASE_UOM' => fi('BASE_UOM', 'Base Unit', TS, 3, DB),
                'T_BAS_UNIT' => fi('T_BAS_UNIT', 'Target ISO UoM', TS, 3, DB),
                'SCALE_QUAN' => fi('SCALE_QUAN', 'Scale quantity', TDC, 13,3, DB),
                'ROUND_DLV' => fi('ROUND_DLV', 'Rounding qty', TDC, 13,3, DB),
                'RECON_DATE' => fi('RECON_DATE', 'Recon.Date', TD, 8, DB),
                'MAX_DEVIAT' => fi('MAX_DEVIAT', 'Absolute deviation', TDC, 13,3, DB),
                'PO_ITM_NO' => fi('PO_ITM_NO', 'PO Item', TS, 6, DB),
                'CUST_MAT22' => fi('CUST_MAT22', 'Cust.material', TS, 22, DB),
                'MAX_DEV_PE' => fi('MAX_DEV_PE', '% deviation', TDC, 3,0, DB),
                'MAX_DEV_DA' => fi('MAX_DEV_DA', 'Dev. days', TDC, 3,0, DB),
                'REPAIR_PRO' => fi('REPAIR_PRO', 'Class. of Items', TS, 3, DB),
                'DLVSCHEDUS' => fi('DLVSCHEDUS', 'Usage', TS, 3, DB),
                'DLV_GROUP' => fi('DLV_GROUP', 'Delivery group', TS, 3, DB),
                'FIXED_QUAN' => fi('FIXED_QUAN', 'Qty. is fixed', TS, 1, DB),
                'DELI_UNLIM' => fi('DELI_UNLIM', 'Unlimited tol.', TS, 1, DB),
                'OVER_DLV_T' => fi('OVER_DLV_T', 'Overdeliv. Tol.', TDC, 3,1, DB),
                'UNDER_DLV' => fi('UNDER_DLV', 'Underdel. Tol.', TDC, 3,1, DB),
                'BILL_BLOCK' => fi('BILL_BLOCK', 'Billing block', TS, 2, DB),
                'REPLACE_PT' => fi('REPLACE_PT', 'Replacemt part', TS, 1, DB),
                'METH_BILL' => fi('METH_BILL', 'Bill.meth.CO/PPC', TS, 1, DB),
                'DIVISION' => fi('DIVISION', 'Division', TS, 2, DB),
                'BUS_AREA' => fi('BUS_AREA', 'Business Area', TS, 4, DB),
                'NET_VALUE' => fi('NET_VALUE', 'Currency amount', TDC, 29,9, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Doc. Currency', TS, 5, DB),
                'CURREN_ISO' => fi('CURREN_ISO', 'ISO code crcy', TS, 3, DB),
                'MAX_PL_DLV' => fi('MAX_PL_DLV', 'Max.Part.Deliv.', TDC, 1,0, DB),
                'PART_DLV' => fi('PART_DLV', 'Part.Dlv./Item', TS, 1, DB),
                'BTCH_SPLIT' => fi('BTCH_SPLIT', 'Batch split', TS, 1, DB),
                'REQ_QTY' => fi('REQ_QTY', 'Order Quantity', TDC, 15,3, DB),
                'CUM_REQ_DE' => fi('CUM_REQ_DE', 'Required DlvQty', TDC, 15,3, DB),
                'CUM_CF_QTY' => fi('CUM_CF_QTY', 'CumConfirmedQty', TDC, 15,3, DB),
                'CUM_CON_QU' => fi('CUM_CON_QU', 'CumConfirmedQty', TDC, 15,3, DB),
                'SALES_UNIT' => fi('SALES_UNIT', 'Sales Unit', TS, 3, DB),
                'ISOCODUNIT' => fi('ISOCODUNIT', 'ISO code', TS, 3, DB),
                'SALES_QTY1' => fi('SALES_QTY1', 'Numerator', TDC, 5,0, DB),
                'SALES_QTY2' => fi('SALES_QTY2', 'Denominat.', TDC, 5,0, DB),
                'GROSS_WEIG' => fi('GROSS_WEIG', 'Gross weight', TDC, 15,3, DB),
                'NET_WEIGHT' => fi('NET_WEIGHT', 'Net weight', TDC, 15,3, DB),
                'UNIT_OF_WT' => fi('UNIT_OF_WT', 'Unit of Weight', TS, 3, DB),
                'UNIT_WTISO' => fi('UNIT_WTISO', 'Unit of wt ISO', TS, 3, DB),
                'VOLUME' => fi('VOLUME', 'Volume', TDC, 15,3, DB),
                'VOLUMEUNIT' => fi('VOLUMEUNIT', 'Volume Unit', TS, 3, DB),
                'VOLUNITISO' => fi('VOLUNITISO', 'Volume unit ISO', TS, 3, DB),
                'CAU_VBELN' => fi('CAU_VBELN', 'Originating Doc', TS, 10, DB),
                'CAU_POSNR' => fi('CAU_POSNR', 'Item', TS, 6, DB),
                'REF_DOC' => fi('REF_DOC', 'Reference Doc.', TS, 10, DB),
                'POSNR_VOR' => fi('POSNR_VOR', 'Reference Item', TS, 6, DB),
                'OBJ_COPY' => fi('OBJ_COPY', 'Complete refer.', TS, 1, DB),
                'UPDAT_FLAG' => fi('UPDAT_FLAG', 'Update doc.flow', TS, 1, DB),
                'END_RULE' => fi('END_RULE', 'Completion rule', TS, 1, DB),
                'DLV_PRIO' => fi('DLV_PRIO', 'Delivery Prior.', TS, 2, DB),
                'PLANT' => fi('PLANT', 'Plant', TS, 4, DB),
                'STGE_LOC' => fi('STGE_LOC', 'Storage Loc.', TS, 4, DB),
                'SHIP_POINT' => fi('SHIP_POINT', 'Shipping Point', TS, 4, DB),
                'ROUTE' => fi('ROUTE', 'Route', TS, 6, DB),
                'KEY_ST' => fi('KEY_ST', 'BOM origin', TS, 1, DB),
                'DATE_ST' => fi('DATE_ST', 'BOM key date', TD, 8, DB),
                'NBR_ST' => fi('NBR_ST', 'BOM', TS, 8, DB),
                'STPOS_VBAP' => fi('STPOS_VBAP', 'BOM Item Number', TDC, 5,0, DB),
                'ORDER_PROB' => fi('ORDER_PROB', 'Order probab.', TS, 3, DB),
                'CREAT_DATE' => fi('CREAT_DATE', 'Created On', TD, 8, DB),
                'CREATED_BY' => fi('CREATED_BY', 'Created By', TS, 12, DB),
                'REC_TIME' => fi('REC_TIME', 'Time', TS, 8, DB),
                'TAX_CLASS1' => fi('TAX_CLASS1', 'Tax classific.', TS, 1, DB),
                'TAX_CLASS2' => fi('TAX_CLASS2', 'Tax classific.', TS, 1, DB),
                'TAX_CLASS3' => fi('TAX_CLASS3', 'Tax classific.', TS, 1, DB),
                'TAX_CLASS4' => fi('TAX_CLASS4', 'Tax classific.', TS, 1, DB),
                'TAX_CLASS5' => fi('TAX_CLASS5', 'Tax classific.', TS, 1, DB),
                'TAX_CLASS6' => fi('TAX_CLASS6', 'Tax classific.', TS, 1, DB),
                'TAX_CLASS7' => fi('TAX_CLASS7', 'Tax classific.', TS, 1, DB),
                'TAX_CLASS8' => fi('TAX_CLASS8', 'Tax classific.', TS, 1, DB),
                'TAX_CLASS9' => fi('TAX_CLASS9', 'Tax classific.', TS, 1, DB),
                'FIX_SP_DAY' => fi('FIX_SP_DAY', 'Fixed proc.time', TDC, 5,2, DB),
                'VAR_SP_DAY' => fi('VAR_SP_DAY', 'Var. proc. time', TDC, 5,2, DB),
                'PREC_DOC' => fi('PREC_DOC', 'Preced. with ref.', TS, 1, DB),
                'NET_PRICE' => fi('NET_PRICE', 'Currency amount', TDC, 29,9, DB),
                'COND_P_UNT' => fi('COND_P_UNT', 'Pricing unit', TDC, 5,0, DB),
                'COND_UNIT' => fi('COND_UNIT', 'Unit of measure', TS, 3, DB),
                'CONISOUNIT' => fi('CONISOUNIT', 'Target ISO UoM', TS, 3, DB),
                'RETOURE' => fi('RETOURE', 'Returns', TS, 1, DB),
                'CASH_DISC' => fi('CASH_DISC', 'Cash discount', TS, 1, DB),
                'AVAILCHECK' => fi('AVAILCHECK', 'Avail. check', TS, 2, DB),
                'SUM_REQUIR' => fi('SUM_REQUIR', 'Req\'mt totals.', TS, 1, DB),
                'MAT_PR_GRP' => fi('MAT_PR_GRP', 'Mat.pricing grp', TS, 2, DB),
                'ACCT_ASSGT' => fi('ACCT_ASSGT', 'Acct asgnmt grp', TS, 2, DB),
                'REBATE_GRP' => fi('REBATE_GRP', 'Vol. rebate grp', TS, 2, DB),
                'COMM_GROUP' => fi('COMM_GROUP', 'Commission grp', TS, 2, DB),
                'EUR_ART_NR' => fi('EUR_ART_NR', 'EAN number', TS, 13, DB),
                'PRICE_OK' => fi('PRICE_OK', 'Pricing', TS, 1, DB),
                'VAL_TYPE' => fi('VAL_TYPE', 'Valuation Type', TS, 10, DB),
                'SEP_VALUAT' => fi('SEP_VALUAT', 'Separate val.', TS, 1, DB),
                'BATCH_MGMT' => fi('BATCH_MGMT', 'Batch Mgmt Rqt', TS, 1, DB),
                'IND_BTCH' => fi('IND_BTCH', 'Batches', TS, 1, DB),
                'MIN_DELY' => fi('MIN_DELY', 'Min. dely qty', TDC, 13,3, DB),
                'UPDATE_GRP' => fi('UPDATE_GRP', 'Update group', TS, 6, DB),
                'COST_DOC_C' => fi('COST_DOC_C', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP1' => fi('SUBTOT_PP1', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP2' => fi('SUBTOT_PP2', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP3' => fi('SUBTOT_PP3', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP4' => fi('SUBTOT_PP4', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP5' => fi('SUBTOT_PP5', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP6' => fi('SUBTOT_PP6', 'Currency amount', TDC, 29,9, DB),
                'EXCH_RATE' => fi('EXCH_RATE', 'Exch.rate stats', TDC, 9,5, DB),
                'CH_ON' => fi('CH_ON', 'Changed On', TD, 8, DB),
                'EAN_UPC' => fi('EAN_UPC', 'EAN/UPC', TS, 18, DB),
                'FIX_DATE' => fi('FIX_DATE', 'Fix qty/date', TS, 1, DB),
                'PROFIT_CTR' => fi('PROFIT_CTR', 'Profit Center', TS, 10, DB),
                'PRC_GROUP1' => fi('PRC_GROUP1', 'MaterialGroup 1', TS, 3, DB),
                'PRC_GROUP2' => fi('PRC_GROUP2', 'MaterialGroup 2', TS, 3, DB),
                'PRC_GROUP3' => fi('PRC_GROUP3', 'MaterialGroup 3', TS, 3, DB),
                'PRC_GROUP4' => fi('PRC_GROUP4', 'MaterialGroup 4', TS, 3, DB),
                'PRC_GROUP5' => fi('PRC_GROUP5', 'MaterialGroup 5', TS, 3, DB),
                'COMPON_QTY' => fi('COMPON_QTY', 'Quantity', TDC, 13,3, DB),
                'SUBSTREASO' => fi('SUBSTREASO', 'Reasn', TS, 4, DB),
                'SPEC_STOCK' => fi('SPEC_STOCK', 'Special Stock', TS, 1, DB),
                'ALLOC_INDI' => fi('ALLOC_INDI', 'Allocation ind.', TS, 1, DB),
                'PROFIT_SEG' => fi('PROFIT_SEG', 'Profit. Segment', TS, 10, DB),
                'WBS_ELEM' => fi('WBS_ELEM', 'WBS Element', TS, 8, DB),
                'ORDERID' => fi('ORDERID', 'Order', TS, 12, DB),
                'PLNG_MATL' => fi('PLNG_MATL', 'Plng material', TS, 18, DB),
                'PLNG_PLANT' => fi('PLNG_PLANT', 'Planning plant', TS, 4, DB),
                'BASE_UNIT' => fi('BASE_UNIT', 'Prod. grp unit', TS, 3, DB),
                'ISOBASUNIT' => fi('ISOBASUNIT', 'Target ISO UoM', TS, 3, DB),
                'CONV_FACT' => fi('CONV_FACT', 'Conversion', TDBL, 16,8, DB),
                'ACCTASSCAT' => fi('ACCTASSCAT', 'Acct Assgmt Cat', TS, 1, DB),
                'CONSUMPT' => fi('CONSUMPT', 'Consumption', TS, 1, DB),
                'BOMEXPLNO' => fi('BOMEXPLNO', 'BOM expl.number', TS, 8, DB),
                'OBJ_NR_IT' => fi('OBJ_NR_IT', 'ObjNo  Item', TS, 22, DB),
                'RES_ANAL' => fi('RES_ANAL', 'RA Key', TS, 6, DB),
                'REQMTSTYP' => fi('REQMTSTYP', 'Reqmts type', TS, 4, DB),
                'CREDPRICIT' => fi('CREDPRICIT', 'Currency amount', TDC, 29,9, DB),
                'PARTRELID' => fi('PARTRELID', 'Partial release', TS, 1, DB),
                'ACTCREDID' => fi('ACTCREDID', 'Credit active', TS, 1, DB),
                'CR_EXCHRAT' => fi('CR_EXCHRAT', 'Exchange rate', TDC, 9,5, DB),
                'CONFIG' => fi('CONFIG', 'Configuration', TS, 18, DB),
                'CHCLASS_IN' => fi('CHCLASS_IN', 'Int.object no.', TS, 18, DB),
                'STAT_PRICE' => fi('STAT_PRICE', 'Expected price', TS, 1, DB),
                'COND_UPDAT' => fi('COND_UPDAT', 'Condit.update', TS, 1, DB),
                'SERNO_PROF' => fi('SERNO_PROF', 'SerialNoProfile', TS, 4, DB),
                'NO_OF_SERI' => fi('NO_OF_SERI', 'No.serial no.', TI, 10, DB),
                'NOGRPOSTED' => fi('NOGRPOSTED', 'No GR posted', TS, 1, DB),
                'MAT_GRP_SM' => fi('MAT_GRP_SM', 'Matl Grp Pckmat', TS, 4, DB),
                'MAN_PR_CH' => fi('MAN_PR_CH', 'Manual price', TS, 1, DB),
                'DOC_CAT_SD' => fi('DOC_CAT_SD', 'Prec.doc.categ.', TS, 1, DB),
                'MATDETERID' => fi('MATDETERID', 'MatDetermActive', TS, 1, DB),
                'ITUSAGEID' => fi('ITUSAGEID', 'Usage HL item', TS, 1, DB),
                'COSTESTNR' => fi('COSTESTNR', 'Cost EstimateNo', TS, 12, DB),
                'CSTG_VRNT' => fi('CSTG_VRNT', 'Costing Variant', TS, 4, DB),
                'BOMITEMNR' => fi('BOMITEMNR', 'Item', TS, 4, DB),
                'STAT_VAL' => fi('STAT_VAL', 'Statist.value', TS, 1, DB),
                'STAT_DATE' => fi('STAT_DATE', 'Statistics date', TD, 8, DB),
                'BUS_TRANST' => fi('BUS_TRANST', 'BusTransactType', TS, 2, DB),
                'PREF_INDIC' => fi('PREF_INDIC', 'Preference', TS, 1, DB),
                'NRCONDREC' => fi('NRCONDREC', 'NoCondRec.Batch', TS, 10, DB),
                'INTCLASSNR' => fi('INTCLASSNR', 'Int class no.', TS, 10, DB),
                'BATCH_EXIT' => fi('BATCH_EXIT', 'Qty proposal', TS, 3, DB),
                'BOM_CATEGO' => fi('BOM_CATEGO', 'BOM category', TS, 1, DB),
                'BOM_IT_NR' => fi('BOM_IT_NR', 'Item node', TS, 8, DB),
                'COUNTER' => fi('COUNTER', 'Counter', TS, 8, DB),
                'INCONSCONF' => fi('INCONSCONF', 'Inconsist. conf', TS, 1, DB),
                'OVERH_KEY' => fi('OVERH_KEY', 'Overhead key', TS, 6, DB),
                'CSTG_SHEET' => fi('CSTG_SHEET', 'Costing Sheet', TS, 6, DB),
                'CSTG_VRNT1' => fi('CSTG_VRNT1', 'Costing Variant', TS, 4, DB),
                'PROD_ALLOC' => fi('PROD_ALLOC', 'Prod.Allocation', TS, 18, DB),
                'PRICE_REF' => fi('PRICE_REF', 'MnItm PrRefMatl', TS, 18, DB),
                'MATPRICGRP' => fi('MATPRICGRP', 'MnItem MatPrcGr', TS, 2, DB),
                'MATFRGTGRP' => fi('MATFRGTGRP', 'Mat.freight grp', TS, 8, DB),
                'PLANDLVSCH' => fi('PLANDLVSCH', 'PlanDelSchedIns', TS, 4, DB),
                'SEQUENCENO' => fi('SEQUENCENO', 'Sequence number', TS, 35, DB),
                'CREDPRIC' => fi('CREDPRIC', 'Credit price', TDBL, 16,8, DB),
                'PAY_GUARAN' => fi('PAY_GUARAN', 'PaytGuarantForm', TS, 2, DB),
                'GURANTEED' => fi('GURANTEED', 'Guaranteed', TDBL, 16,8, DB),
                'CFOP_CODE' => fi('CFOP_CODE', 'CFOP', TS, 5, DB),
                'TAXLAWICMS' => fi('TAXLAWICMS', 'ICMS law', TS, 3, DB),
                'TAXLAWIPI' => fi('TAXLAWIPI', 'IPI law', TS, 3, DB),
                'SD_TAXCODE' => fi('SD_TAXCODE', 'Tax code', TS, 2, DB),
                'VALCONTRNR' => fi('VALCONTRNR', 'Value contract no.', TS, 10, DB),
                'VALCONTRIT' => fi('VALCONTRIT', 'Val. cont.item', TS, 6, DB),
                'ASSORT_MOD' => fi('ASSORT_MOD', 'Module', TS, 18, DB),
                'VALSPECSTO' => fi('VALSPECSTO', 'Valuation', TS, 1, DB),
                'MATGRHIE1' => fi('MATGRHIE1', 'MatGroup 1', TS, 18, DB),
                'MATGRHIE2' => fi('MATGRHIE2', 'MatGroup 2', TS, 18, DB),
                'PROMOTION' => fi('PROMOTION', 'Promotion', TS, 10, DB),
                'SALES_DEAL' => fi('SALES_DEAL', 'Sales deal', TS, 10, DB),
                'FLGLEADUNI' => fi('FLGLEADUNI', 'Leading UoM', TS, 1, DB),
                'FREE_GOODS' => fi('FREE_GOODS', 'FreeGoods DelyContrl', TS, 1, DB),
                'VALID_OBJ' => fi('VALID_OBJ', 'StandardVariant', TS, 12, DB),
                'TAX_AMOUNT' => fi('TAX_AMOUNT', 'Currency amount', TDC, 29,9, DB),
                'MRP_AREA' => fi('MRP_AREA', 'MRP Area', TS, 10, DB),
                'CUST_MAT35' => fi('CUST_MAT35', 'Cust.material', TS, 35, DB),
                'CR_EXCHRAT_V' => fi('CR_EXCHRAT_V', 'Exchange rate', TDC, 9,5, DB),
                'EXCHRATEST_V' => fi('EXCHRATEST_V', 'Exch.rate stats', TDC, 9,5, DB),
                'ITM_TYPE_USAGE' => fi('ITM_TYPE_USAGE', 'Item usage', TS, 4, DB),
                'CFOP_LONG' => fi('CFOP_LONG', 'CFOP', TS, 10, DB),
                'GROSS_VAL' => fi('GROSS_VAL', 'Currency amount', TDC, 29,9, DB),
                'LOG_SYSTEM_OWN' => fi('LOG_SYSTEM_OWN', 'Logical System', TS, 10, DB),
                'TAXLAWISS' => fi('TAXLAWISS', 'ISS Law', TS, 3, DB),
                'TAXLAWCOFINS' => fi('TAXLAWCOFINS', 'COFINS Law', TS, 3, DB),
                'TAXLAWPIS' => fi('TAXLAWPIS', 'PIS Law', TS, 3, DB),
                'DOC_CAT_SD_LONG' => fi('DOC_CAT_SD_LONG', 'Document Cat.', TS, 4, DB),
                'MATERIAL_LONG' => fi('MATERIAL_LONG', 'Char', TS, 40, DB),
                'MAT_ENTRD_LONG' => fi('MAT_ENTRD_LONG', 'MaterialEntered', TS, 40, DB),
                'PR_REF_MAT_LONG' => fi('PR_REF_MAT_LONG', 'Pr. Ref. Matl', TS, 40, DB),
                'PLNG_MATL_LONG' => fi('PLNG_MATL_LONG', 'Plng material', TS, 40, DB),
                'PRICE_REF_LONG' => fi('PRICE_REF_LONG', 'MnItm PrRefMatl', TS, 40, DB),
                'PO_QUAN' => fi('PO_QUAN', 'PO Quantity', TDC, 13,3, DB),
                'PO_UNIT' => fi('PO_UNIT', 'Order Unit', TS, 3, DB)
            }
        ),
        'ORDER_SCHEDULES_OUT' => new overcast.TypeInfo('ORDER_SCHEDULES_OUT', 'Order Schedule Lines for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'DOC_NUMBER' => fi('DOC_NUMBER', 'Sales Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'SCHED_LINE' => fi('SCHED_LINE', 'Schedule Line', TS, 4, DB),
                'SCHED_TYPE' => fi('SCHED_TYPE', 'Sched.line cat.', TS, 2, DB),
                'RELFORDEL' => fi('RELFORDEL', 'Item rel.f.dlv.', TS, 1, DB),
                'REQ_DATE' => fi('REQ_DATE', 'Delivery Date', TD, 8, DB),
                'REQ_TIME' => fi('REQ_TIME', 'Arrival time', TS, 8, DB),
                'REQ_QTY' => fi('REQ_QTY', 'Order quantity', TDC, 13,3, DB),
                'CONFIR_QTY' => fi('CONFIR_QTY', 'Confirmed Qty', TDC, 13,3, DB),
                'SALES_UNIT' => fi('SALES_UNIT', 'Sales Unit', TS, 3, DB),
                'ISOCODUNIT' => fi('ISOCODUNIT', 'ISO code', TS, 3, DB),
                'REQ_QTY1' => fi('REQ_QTY1', 'Required qty', TDC, 13,3, DB),
                'BASE_UOM' => fi('BASE_UOM', 'Base Unit', TS, 3, DB),
                'ISOBASUNIT' => fi('ISOBASUNIT', 'Target ISO UoM', TS, 3, DB),
                'REQ_DATE1' => fi('REQ_DATE1', 'Requirement dte', TD, 8, DB),
                'REQ_TYPE' => fi('REQ_TYPE', 'RequirementType', TS, 2, DB),
                'PLTYPE' => fi('PLTYPE', 'Planning type', TS, 1, DB),
                'BUSIDOCNR' => fi('BUSIDOCNR', 'Business docum.', TS, 10, DB),
                'BUSIITNR' => fi('BUSIITNR', 'Items', TS, 6, DB),
                'SCHED_LIN1' => fi('SCHED_LIN1', 'Schedule line', TS, 4, DB),
                'EARL_DATE' => fi('EARL_DATE', 'Reservation', TD, 8, DB),
                'MAINT_REQ' => fi('MAINT_REQ', 'Maintenance req', TS, 10, DB),
                'PREQ_NO' => fi('PREQ_NO', 'Purch.Req.', TS, 10, DB),
                'PO_TYPE' => fi('PO_TYPE', 'Order Type', TS, 4, DB),
                'DOC_CAT' => fi('DOC_CAT', 'Document cat.', TS, 1, DB),
                'CONF_STAT' => fi('CONF_STAT', 'Confirm status', TS, 1, DB),
                'IR_IND' => fi('IR_IND', 'Invoice Receipt', TS, 1, DB),
                'RETURNDATE' => fi('RETURNDATE', 'ReturnPackaging', TD, 8, DB),
                'DATE_TYPE' => fi('DATE_TYPE', 'Date type', TS, 1, DB),
                'TP_DATE' => fi('TP_DATE', 'TranspPlngDate', TD, 8, DB),
                'MS_DATE' => fi('MS_DATE', 'Mat.Avail.Date', TD, 8, DB),
                'LOAD_DATE' => fi('LOAD_DATE', 'Loading Date', TD, 8, DB),
                'GI_DATE' => fi('GI_DATE', 'Goods Issue', TD, 8, DB),
                'CORR_QTY' => fi('CORR_QTY', 'Corr.qty', TDC, 13,3, DB),
                'REQ_DLV_BL' => fi('REQ_DLV_BL', 'Delivery block', TS, 2, DB),
                'GRP_DEFIN' => fi('GRP_DEFIN', 'Group definition of structure data', TS, 3, DB),
                'RELEASTYP' => fi('RELEASTYP', 'Rel. Type', TS, 1, DB),
                'FORCAST_NR' => fi('FORCAST_NR', 'F. dlv. sched.', TS, 10, DB),
                'COMMIT_QTY' => fi('COMMIT_QTY', 'Committed qty', TDC, 13,3, DB),
                'SIZE2' => fi('SIZE2', 'Size 2', TDC, 13,3, DB),
                'SIZE3' => fi('SIZE3', 'Size 3', TDC, 13,3, DB),
                'UNIT_MEAS' => fi('UNIT_MEAS', 'Size unit', TS, 3, DB),
                'ISO_ROMEI' => fi('ISO_ROMEI', 'Target ISO UoM', TS, 3, DB),
                'FORMULAKEY' => fi('FORMULAKEY', 'Formula key', TS, 2, DB),
                'SALESQTYNR' => fi('SALESQTYNR', 'Numerator', TDC, 5,0, DB),
                'SALESQTYDE' => fi('SALESQTYDE', 'Denominat.', TDC, 5,0, DB),
                'AVAIL_CON' => fi('AVAIL_CON', 'Avail. confirm.', TS, 1, DB),
                'MOVE_TYPE' => fi('MOVE_TYPE', 'Movement Type', TS, 3, DB),
                'PREQ_ITEM' => fi('PREQ_ITEM', 'Requisn. item', TS, 5, DB),
                'LINTYP_EDI' => fi('LINTYP_EDI', 'Sched.line type', TS, 1, DB),
                'ORDERID' => fi('ORDERID', 'Order', TS, 12, DB),
                'PLANORDNR' => fi('PLANORDNR', 'Planned order', TS, 10, DB),
                'BOMEXPL_NO' => fi('BOMEXPL_NO', 'BOM expl.number', TS, 8, DB),
                'CUSTCHSTAT' => fi('CUSTCHSTAT', 'Engin. change', TS, 17, DB),
                'GURANTEED' => fi('GURANTEED', 'Guaranteed', TDBL, 16,8, DB),
                'MS_TIME' => fi('MS_TIME', 'Matl Staging Tme', TS, 8, DB),
                'TP_TIME' => fi('TP_TIME', 'Tr. Plan. Time', TS, 8, DB),
                'LOAD_TIME' => fi('LOAD_TIME', 'Loading Time', TS, 8, DB),
                'GI_TIME' => fi('GI_TIME', 'GI Time', TS, 8, DB),
                'ROUTESCHED' => fi('ROUTESCHED', 'Route Schedule', TS, 10, DB)
            }
        ),
        'ORDER_BUSINESS_OUT' => new overcast.TypeInfo('ORDER_BUSINESS_OUT', 'Business Data for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'PRICE_GRP' => fi('PRICE_GRP', 'Price group', TS, 2, DB),
                'CUST_GROUP' => fi('CUST_GROUP', 'Customer group', TS, 2, DB),
                'SALES_DIST' => fi('SALES_DIST', 'Sales district', TS, 6, DB),
                'PRICE_LIST' => fi('PRICE_LIST', 'Price List', TS, 2, DB),
                'INCOTERMS1' => fi('INCOTERMS1', 'Incoterms', TS, 3, DB),
                'INCOTERMS2' => fi('INCOTERMS2', 'Incoterms 2', TS, 28, DB),
                'ORDCOMBIND' => fi('ORDCOMBIND', 'Order Combinat.', TS, 1, DB),
                'BILL_SCHED' => fi('BILL_SCHED', 'Invoicing dates', TS, 2, DB),
                'INVO_SCHED' => fi('INVO_SCHED', 'Inv.list sched.', TS, 2, DB),
                'MN_INVOICE' => fi('MN_INVOICE', 'SubsInvProcess', TS, 1, DB),
                'EXCHRATEFI' => fi('EXCHRATEFI', 'Exch.rate-acct.', TDC, 9,5, DB),
                'ADD_VAL_DY' => fi('ADD_VAL_DY', 'Add.value days', TS, 2, DB),
                'FIX_VAL_DY' => fi('FIX_VAL_DY', 'Fixed val.date', TD, 8, DB),
                'PMNTTRMS' => fi('PMNTTRMS', 'Pyt Terms', TS, 4, DB),
                'PAYMETHODE' => fi('PAYMETHODE', 'Pmt Method', TS, 1, DB),
                'ACCNT_ASGN' => fi('ACCNT_ASGN', 'AccAssmtGrpCust', TS, 2, DB),
                'EXCHG_RATE' => fi('EXCHG_RATE', 'Exchange rate', TDC, 9,5, DB),
                'PRICE_DATE' => fi('PRICE_DATE', 'Pricing Date', TD, 8, DB),
                'BILL_DATE' => fi('BILL_DATE', 'Billing Date', TD, 8, DB),
                'SERV_DATE' => fi('SERV_DATE', 'Serv.rendered', TD, 8, DB),
                'FISC_YEAR' => fi('FISC_YEAR', 'Fiscal Year', TS, 4, DB),
                'POSTPERIOD' => fi('POSTPERIOD', 'Posting Period', TS, 3, DB),
                'EXCHRATEST' => fi('EXCHRATEST', 'Exch.rate stats', TDC, 9,5, DB),
                'DUNN_KEY' => fi('DUNN_KEY', 'Dunning key', TS, 1, DB),
                'DUNN_BLOCK' => fi('DUNN_BLOCK', 'Dunn. Block', TS, 1, DB),
                'BILL_PLAN' => fi('BILL_PLAN', 'Bill. Plan No.', TS, 10, DB),
                'PROMOTION' => fi('PROMOTION', 'Promotion', TS, 10, DB),
                'PAY_GUARAN' => fi('PAY_GUARAN', 'Paym.guar.proc.', TS, 6, DB),
                'FINDOCPROC' => fi('FINDOCPROC', 'Financ.doc.no.', TS, 10, DB),
                'J_1AFITP_D' => fi('J_1AFITP_D', 'Tax Type', TS, 2, DB),
                'REAS_0_VAT' => fi('REAS_0_VAT', 'Reas.0 VAT', TS, 1, DB),
                'REGION' => fi('REGION', 'Region', TS, 3, DB),
                'ACTIVICODE' => fi('ACTIVICODE', 'Activity Code', TS, 2, DB),
                'DISTRIBTYP' => fi('DISTRIBTYP', 'Distr. Type', TS, 2, DB),
                'TAX_CLASS' => fi('TAX_CLASS', 'Tax rel. class.', TS, 10, DB),
                'DEPART_NO' => fi('DEPART_NO', 'Department', TS, 4, DB),
                'REC_POINT' => fi('REC_POINT', 'Recv. point', TS, 25, DB),
                'PURCH_NO_C' => fi('PURCH_NO_C', 'PO Number', TS, 35, DB),
                'PURCH_DATE' => fi('PURCH_DATE', 'PO Date', TD, 8, DB),
                'PO_METHOD' => fi('PO_METHOD', 'Pur. ord. type', TS, 4, DB),
                'REF_1' => fi('REF_1', 'Your Reference', TS, 12, DB),
                'PURCH_NO_S' => fi('PURCH_NO_S', 'PO Number', TS, 35, DB),
                'PO_DAT_S' => fi('PO_DAT_S', 'PurchOrderDate', TD, 8, DB),
                'PO_METH_S' => fi('PO_METH_S', 'Pur. ord. type', TS, 4, DB),
                'REF_1_S' => fi('REF_1_S', 'Your reference', TS, 12, DB),
                'POITMNOS' => fi('POITMNOS', 'PO item', TS, 6, DB),
                'TRANS_DATE' => fi('TRANS_DATE', 'Translatn Date', TD, 8, DB),
                'TRANSDATE' => fi('TRANSDATE', 'Translatn Date', TD, 8, DB),
                'CUSTCONGR1' => fi('CUSTCONGR1', 'Condition grp 1', TS, 2, DB),
                'CUSTCONGR2' => fi('CUSTCONGR2', 'Condition grp 2', TS, 2, DB),
                'CUSTCONGR3' => fi('CUSTCONGR3', 'Condition grp 3', TS, 2, DB),
                'CUSTCONGR4' => fi('CUSTCONGR4', 'Condition grp 4', TS, 2, DB),
                'CUSTCONGR5' => fi('CUSTCONGR5', 'Condition grp 5', TS, 2, DB),
                'VALCONTCUR' => fi('VALCONTCUR', 'Currency', TS, 5, DB),
                'ISOVALCONT' => fi('ISOVALCONT', 'ISO code crcy', TS, 3, DB),
                'EXCHRATECO' => fi('EXCHRATECO', 'Exchange rate', TDC, 9,5, DB),
                'CURRENCKEY' => fi('CURRENCKEY', 'LettOfCredCrcy', TS, 5, DB),
                'ISOCURRKEY' => fi('ISOCURRKEY', 'ISO code crcy', TS, 3, DB),
                'EXCHRATELC' => fi('EXCHRATELC', 'LettOfCredRate', TDC, 9,5, DB),
                'CEPRPERCEN' => fi('CEPRPERCEN', 'Depreciation', TDC, 5,2, DB),
                'INFLAT_IDX' => fi('INFLAT_IDX', 'Inflation index', TS, 5, DB),
                'BASDATEIDX' => fi('BASDATEIDX', 'Index base date', TD, 8, DB),
                'CUST_PO_NO' => fi('CUST_PO_NO', 'PO Number', TS, 35, DB),
                'DLV_TIME' => fi('DLV_TIME', 'Delivery time', TS, 3, DB),
                'DLI_PROFIL' => fi('DLI_PROFIL', 'DIP Profile', TS, 8, DB),
                'CALC_MOTIVE' => fi('CALC_MOTIVE', 'AcctIndicator', TS, 2, DB),
                'BILL_FORM' => fi('BILL_FORM', 'Billing form', TS, 2, DB),
                'REVENUETYP' => fi('REVENUETYP', 'Rev. recognition', TS, 1, DB),
                'BEGDEMAPER' => fi('BEGDEMAPER', 'Acc. period start', TS, 1, DB),
                'EXCHRATELC_V' => fi('EXCHRATELC_V', 'LettOfCredRate', TDC, 9,5, DB),
                'EXCH_RATE_FI_V' => fi('EXCH_RATE_FI_V', 'Exch.rate-acct.', TDC, 9,5, DB),
                'EXCHG_RATE_V' => fi('EXCHG_RATE_V', 'Exchange rate', TDC, 9,5, DB),
                'EXCHRATEST_V' => fi('EXCHRATEST_V', 'Exch.rate stats', TDC, 9,5, DB),
                'EXCHRATECO_V' => fi('EXCHRATECO_V', 'Exchange rate', TDC, 9,5, DB),
                'DELIV_TYPE' => fi('DELIV_TYPE', 'Shipping type', TS, 2, DB),
                'TRANS_CAT' => fi('TRANS_CAT', 'MnsOfTrns type', TS, 4, DB),
                'TRANS_MAT' => fi('TRANS_MAT', 'MeansTransp.', TS, 18, DB),
                'SPEC_PROC' => fi('SPEC_PROC', 'Spec.processing', TS, 4, DB),
                'PRODCAT' => fi('PRODCAT', 'Catalog', TS, 10, DB),
                'FUNC_AREA' => fi('FUNC_AREA', 'Functional Area', TS, 4, DB),
                'POD_PROC' => fi('POD_PROC', 'POD-relevant', TS, 1, DB),
                'CAMPAIGN' => fi('CAMPAIGN', 'CGPL_GUID', TBLB, 16, DB),
                'FKK_CONACCT' => fi('FKK_CONACCT', 'char12', TS, 12, DB),
                'FUNC_AREA_LONG' => fi('FUNC_AREA_LONG', 'Functional Area', TS, 16, DB),
                'FKK_CONACCT_GUID' => fi('FKK_CONACCT_GUID', 'GUID 16', TBLB, 16, DB),
                'TRANS_MAT_EXTERNAL' => fi('TRANS_MAT_EXTERNAL', 'Material Number', TS, 40, DB),
                'TRANS_MAT_GUID' => fi('TRANS_MAT_GUID', 'GUID (External)', TS, 32, DB),
                'TRANS_MAT_VERSION' => fi('TRANS_MAT_VERSION', 'Version Number', TS, 10, DB),
                'SEPA_MANDATE_ID' => fi('SEPA_MANDATE_ID', 'Mandate Ref.', TS, 35, DB),
                'INCOTERMSV' => fi('INCOTERMSV', 'Inco. Version', TS, 4, DB),
                'INCOTERMS2L' => fi('INCOTERMS2L', 'Inco. Location1', TS, 70, DB),
                'INCOTERMS3L' => fi('INCOTERMS3L', 'Inco. Location2', TS, 70, DB),
                'TRANS_MAT_LONG' => fi('TRANS_MAT_LONG', 'MeansTransp.', TS, 40, DB)
            }
        ),
        'ORDER_PARTNERS_OUT' => new overcast.TypeInfo('ORDER_PARTNERS_OUT', 'Order Partners for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'PARTN_ROLE' => fi('PARTN_ROLE', 'Partner Functn', TS, 2, DB),
                'CUSTOMER' => fi('CUSTOMER', 'Customer', TS, 10, DB),
                'VENDOR_NO' => fi('VENDOR_NO', 'Supplier', TS, 10, DB),
                'PERSON_NO' => fi('PERSON_NO', 'Personnel No.', TS, 8, DB),
                'CONTACT' => fi('CONTACT', 'Contact Person', TS, 10, DB),
                'ADDRESS' => fi('ADDRESS', 'Address', TS, 10, DB),
                'UNLOAD_PT' => fi('UNLOAD_PT', 'Unloading Point', TS, 25, DB),
                'COUNTRY' => fi('COUNTRY', 'Country', TS, 3, DB),
                'COUNTRYISO' => fi('COUNTRYISO', 'ISO Code', TS, 2, DB),
                'ADDRE_INDI' => fi('ADDRE_INDI', 'Adress ind.', TS, 1, DB),
                'ACC_1_TIME' => fi('ACC_1_TIME', 'One-time acct', TS, 1, DB),
                'CUSTHITYP' => fi('CUSTHITYP', 'Hierarchy type', TS, 1, DB),
                'PRIC_REL' => fi('PRIC_REL', 'Price determin.', TS, 1, DB),
                'REBATE_REL' => fi('REBATE_REL', 'Rebate', TS, 1, DB),
                'LEVEL_NR' => fi('LEVEL_NR', 'Hierarchy level', TS, 2, DB),
                'DESC_PARTN' => fi('DESC_PARTN', 'Partner desc.', TS, 30, DB),
                'TRANSPZONE' => fi('TRANSPZONE', 'Transport Zone', TS, 10, DB),
                'ASSIGN_HI' => fi('ASSIGN_HI', 'Hier.assignment', TS, 2, DB),
                'VAT_REG_NO' => fi('VAT_REG_NO', 'VAT Reg. No.', TS, 20, DB),
                'FURTHERPAR' => fi('FURTHERPAR', 'F.partners', TS, 1, DB),
                'PERS_NO' => fi('PERS_NO', 'Person Number', TS, 10, DB),
                'CALEND_UPD' => fi('CALEND_UPD', 'Appointments', TS, 1, DB)
            }
        ),
        'ORDER_ADDRESS_OUT' => new overcast.TypeInfo('ORDER_ADDRESS_OUT', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'DOC_NUMBER' => fi('DOC_NUMBER', 'Sales Document', TS, 10, DB),
                'ADDRESS' => fi('ADDRESS', 'Address', TS, 10, DB),
                'FORMOFADDR' => fi('FORMOFADDR', 'Form of address', TS, 15, DB),
                'NAME' => fi('NAME', 'Name', TS, 35, DB),
                'NAME_2' => fi('NAME_2', 'Name 2', TS, 35, DB),
                'NAME_3' => fi('NAME_3', 'Name 3', TS, 35, DB),
                'NAME_4' => fi('NAME_4', 'Name 4', TS, 35, DB),
                'STREET' => fi('STREET', 'Street', TS, 35, DB),
                'COUNTRY' => fi('COUNTRY', 'Country', TS, 3, DB),
                'COUNTRYISO' => fi('COUNTRYISO', 'Country ISO', TS, 2, DB),
                'POSTL_CODE' => fi('POSTL_CODE', 'Postal Code', TS, 10, DB),
                'POBX_PCD' => fi('POBX_PCD', 'PO Box PCode', TS, 10, DB),
                'POBX_CTY' => fi('POBX_CTY', 'P.O.Box city', TS, 35, DB),
                'CITY' => fi('CITY', 'City', TS, 35, DB),
                'DISTRICT' => fi('DISTRICT', 'District', TS, 35, DB),
                'REGION' => fi('REGION', 'Region', TS, 3, DB),
                'CITY_CODE' => fi('CITY_CODE', 'City Code', TS, 4, DB),
                'COUNTY_CDE' => fi('COUNTY_CDE', 'County Code', TS, 3, DB),
                'PO_BOX' => fi('PO_BOX', 'PO Box', TS, 10, DB),
                'TELEPHONE' => fi('TELEPHONE', 'Telephone 1', TS, 16, DB),
                'TELEPHONE2' => fi('TELEPHONE2', 'Telephone 2', TS, 16, DB),
                'TELEBOX' => fi('TELEBOX', 'Telebox', TS, 15, DB),
                'FAX_NUMBER' => fi('FAX_NUMBER', 'Fax Number', TS, 31, DB),
                'TELETEX' => fi('TELETEX', 'Teletex', TS, 30, DB),
                'TELEX' => fi('TELEX', 'Telex', TS, 30, DB),
                'LANGU' => fi('LANGU', 'Language', TS, 1, DB),
                'LANGU_ISO' => fi('LANGU_ISO', 'Lang. (ISO)', TS, 2, DB),
                'TRANSPZONE' => fi('TRANSPZONE', 'Transport Zone', TS, 10, DB),
                'HOUSE_NO' => fi('HOUSE_NO', 'House number', TS, 6, DB),
                'GENDER' => fi('GENDER', 'Gender', TS, 1, DB),
                'NAME_LIST' => fi('NAME_LIST', 'Name', TS, 35, DB),
                'TAXJURCODE' => fi('TAXJURCODE', 'Tax Jur.', TS, 15, DB),
                'PERS_NO' => fi('PERS_NO', 'Person Number', TS, 10, DB),
                'ADDR_TYPE' => fi('ADDR_TYPE', 'Address Type', TS, 1, DB),
                'NRELSTAT' => fi('NRELSTAT', 'Status of data transfer into subsequent release', TS, 1, DB),
                'INDIUPDATE' => fi('INDIUPDATE', 'Update indicator', TS, 1, DB),
                'STREETNA' => fi('STREETNA', 'Street Name', TS, 35, DB),
                'HOUSE_NO_LONG' => fi('HOUSE_NO_LONG', 'Character Field Length = 10', TS, 10, DB),
                'E_MAIL' => fi('E_MAIL', 'E-Mail Address', TS, 241, DB)
            }
        ),
        'ORDER_STATUSHEADERS_OUT' => new overcast.TypeInfo('ORDER_STATUSHEADERS_OUT', 'Header Status for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'REFDOCHDST' => fi('REFDOCHDST', 'Ref. status', TS, 1, DB),
                'TOTREFSTAT' => fi('TOTREFSTAT', 'Total RefStatus', TS, 1, DB),
                'CONFIRSTAT' => fi('CONFIRSTAT', 'Confirmed', TS, 1, DB),
                'DELIV_STAT' => fi('DELIV_STAT', 'Delivery status', TS, 1, DB),
                'DLV_STAT_H' => fi('DLV_STAT_H', 'Overall dlv.st.', TS, 1, DB),
                'TOTGOODSMV' => fi('TOTGOODSMV', 'TotalGdsMvtStat', TS, 1, DB),
                'BILLSTATUS' => fi('BILLSTATUS', 'Billing status', TS, 1, DB),
                'BILLINGSTA' => fi('BILLINGSTA', 'Bill.Stat.Order', TS, 1, DB),
                'ACCOUNTSTA' => fi('ACCOUNTSTA', 'Posting Status', TS, 1, DB),
                'OVERALLREJ' => fi('OVERALLREJ', 'Rejection stat.', TS, 1, DB),
                'PRC_STAT_H' => fi('PRC_STAT_H', 'Overall status', TS, 1, DB),
                'OVERALLPIC' => fi('OVERALLPIC', 'Ovr.pick.status', TS, 1, DB),
                'OVERALL_WM' => fi('OVERALL_WM', 'OverallWMStatus', TS, 1, DB),
                'TOTINCOMPL' => fi('TOTINCOMPL', 'Item Data', TS, 1, DB),
                'TOTINCOMIT' => fi('TOTINCOMIT', 'Item deliv.data', TS, 1, DB),
                'TOTINCOMBI' => fi('TOTINCOMBI', 'Item bill.data', TS, 1, DB),
                'GENINCOMHD' => fi('GENINCOMHD', 'Header data', TS, 1, DB),
                'HDIMCOMDEL' => fi('HDIMCOMDEL', 'Header dlv.data', TS, 1, DB),
                'HDINCOMBIL' => fi('HDINCOMBIL', 'Header bill.dat', TS, 1, DB),
                'DOCIMCOMPR' => fi('DOCIMCOMPR', 'Pricing', TS, 1, DB),
                'SD_DOC_CAT' => fi('SD_DOC_CAT', 'Document cat.', TS, 1, DB),
                'SDDOCOBJ' => fi('SDDOCOBJ', 'Document object', TS, 1, DB),
                'CH_ON' => fi('CH_ON', 'Changed On', TD, 8, DB),
                'BILTOTSTAT' => fi('BILTOTSTAT', 'Totals status', TS, 1, DB),
                'INVOICSTAT' => fi('INVOICSTAT', 'Inv.list status', TS, 1, DB),
                'CUSTRESHD1' => fi('CUSTRESHD1', 'Hdr reserves 1', TS, 1, DB),
                'CUSTRESHD2' => fi('CUSTRESHD2', 'Hdr reserves 2', TS, 1, DB),
                'CUSTRESHD3' => fi('CUSTRESHD3', 'Hdr reserves 3', TS, 1, DB),
                'CUSTRESHD4' => fi('CUSTRESHD4', 'Hdr reserves 4', TS, 1, DB),
                'CUSTRESHD5' => fi('CUSTRESHD5', 'Hdr reserves 5', TS, 1, DB),
                'CUSTRESIT1' => fi('CUSTRESIT1', 'Total reserves1', TS, 1, DB),
                'CUSTRESIT2' => fi('CUSTRESIT2', 'TotalReserves2', TS, 1, DB),
                'CUSTRESIT3' => fi('CUSTRESIT3', 'Total reserves3', TS, 1, DB),
                'CUSTRESIT4' => fi('CUSTRESIT4', 'Total reserves4', TS, 1, DB),
                'CUSTRESIT5' => fi('CUSTRESIT5', 'Total reserves5', TS, 1, DB),
                'TOTSTATIT' => fi('TOTSTATIT', 'Packing status', TS, 1, DB),
                'STATSTACLC' => fi('STATSTACLC', 'Static check', TS, 1, DB),
                'STATDYNCLC' => fi('STATDYNCLC', 'Dynamic check', TS, 1, DB),
                'STATCREDCH' => fi('STATCREDCH', 'Value', TS, 1, DB),
                'STATCRECH1' => fi('STATCRECH1', 'TermsOfPayment', TS, 1, DB),
                'STATCRECH2' => fi('STATCRECH2', 'Customer date', TS, 1, DB),
                'STATCRECH3' => fi('STATCRECH3', 'Open items', TS, 1, DB),
                'STATCRECH4' => fi('STATCRECH4', 'Oldest item', TS, 1, DB),
                'STATCRECH5' => fi('STATCRECH5', 'Max.dunn.level', TS, 1, DB),
                'STATCRECH6' => fi('STATCRECH6', 'Financial doc.', TS, 1, DB),
                'STATCRECH7' => fi('STATCRECH7', 'ExptCreditInsur', TS, 1, DB),
                'STATCRECH8' => fi('STATCRECH8', 'Payment card', TS, 1, DB),
                'STATCRECH9' => fi('STATCRECH9', 'Reserve', TS, 1, DB),
                'STATCRECHA' => fi('STATCRECHA', 'Reserve', TS, 1, DB),
                'STATCRECHB' => fi('STATCRECHB', 'Reserve', TS, 1, DB),
                'STATCRECHC' => fi('STATCRECHC', 'Reserve', TS, 1, DB),
                'TOTSTATCCH' => fi('TOTSTATCCH', 'OverallCredStat', TS, 1, DB),
                'TRNSPLANST' => fi('TRNSPLANST', 'Trns.plan.stat.', TS, 1, DB),
                'QUITTSTAT' => fi('QUITTSTAT', 'Confirmation', TS, 1, DB),
                'CONFIRMSTA' => fi('CONFIRMSTA', 'Confirm status', TS, 1, DB),
                'SAPRELEASE' => fi('SAPRELEASE', 'SAP Release', TS, 4, DB),
                'TOTINCOMI' => fi('TOTINCOMI', 'It.data packag.', TS, 1, DB),
                'TOTINCOMI1' => fi('TOTINCOMI1', 'It.data pck/putaway', TS, 1, DB),
                'TOTINCOMI2' => fi('TOTINCOMI2', 'Item data: GM', TS, 1, DB),
                'HDINCOMPL' => fi('HDINCOMPL', 'Head.data pckg.', TS, 1, DB),
                'HDINCOMPL1' => fi('HDINCOMPL1', 'Head.data pck/putawy', TS, 1, DB),
                'HDINCOMPL2' => fi('HDINCOMPL2', 'Head. data GM', TS, 1, DB),
                'HDINCOMPL3' => fi('HDINCOMPL3', 'Head.data dan.gds', TS, 1, DB),
                'CREDCHECK' => fi('CREDCHECK', 'Data obsolete', TS, 1, DB),
                'DELAYSTAT' => fi('DELAYSTAT', 'Delay status', TS, 1, DB),
                'SHIPPUNIT' => fi('SHIPPUNIT', 'HU in stock', TS, 1, DB),
                'DISTRISTAT' => fi('DISTRISTAT', 'StatDecntrlWhse', TS, 1, DB),
                'REVDETSTAT' => fi('REVDETSTAT', 'Rev.det. status', TS, 1, DB),
                'INDIDOCACH' => fi('INDIDOCACH', 'Indicator: Document preselected for archiving', TS, 1, DB),
                'TOBILBLOST' => fi('TOBILBLOST', 'Ov. b.blk stat.', TS, 1, DB),
                'TODELBLOST' => fi('TODELBLOST', 'Dlv. blk status', TS, 1, DB),
                'TOBLOCKSTA' => fi('TOBLOCKSTA', 'Overall blk st.', TS, 1, DB),
                'LEBHEADSTA' => fi('LEBHEADSTA', 'POD status', TS, 1, DB),
                'FMSTATUS' => fi('FMSTATUS', 'Status Funds Mgmt', TS, 1, DB),
                'SD_DOC_CAT_LONG' => fi('SD_DOC_CAT_LONG', 'Document Cat.', TS, 4, DB)
            }
        ),
        'ORDER_STATUSITEMS_OUT' => new overcast.TypeInfo('ORDER_STATUSITEMS_OUT', 'Item Status for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'REFERNSTAT' => fi('REFERNSTAT', 'Reference stat.', TS, 1, DB),
                'REFTOTSTAT' => fi('REFTOTSTAT', 'Reference stat.', TS, 1, DB),
                'CONFSTATIT' => fi('CONFSTATIT', 'Confirmed', TS, 1, DB),
                'DELIV_STAT' => fi('DELIV_STAT', 'Delivery status', TS, 1, DB),
                'DLV_STAT_I' => fi('DLV_STAT_I', 'Overall dlv.st.', TS, 1, DB),
                'GOODSMVSTA' => fi('GOODSMVSTA', 'GoodsMovementSt', TS, 1, DB),
                'BILLSTATHD' => fi('BILLSTATHD', 'Billing Status', TS, 1, DB),
                'BILLSTATIT' => fi('BILLSTATIT', 'Billing Status', TS, 1, DB),
                'REJSTATIT' => fi('REJSTATIT', 'Rejection stat.', TS, 1, DB),
                'OVRPROCSTA' => fi('OVRPROCSTA', 'Overall status', TS, 1, DB),
                'PICKINGSTA' => fi('PICKINGSTA', 'Picking status', TS, 1, DB),
                'WHMANAGSTA' => fi('WHMANAGSTA', 'WM activ.status', TS, 1, DB),
                'GENINCOMST' => fi('GENINCOMST', 'Item', TS, 1, DB),
                'INCOMSTDEL' => fi('INCOMSTDEL', 'Item deliv.data', TS, 1, DB),
                'INCOMSTBIL' => fi('INCOMSTBIL', 'Item bill.data', TS, 1, DB),
                'INCOMSTPRI' => fi('INCOMSTPRI', 'Pricing', TS, 1, DB),
                'BILLSTAINT' => fi('BILLSTAINT', 'Interco. BillSt', TS, 1, DB),
                'CUSTRESIT1' => fi('CUSTRESIT1', 'Item reserves 1', TS, 1, DB),
                'CUSTRESIT2' => fi('CUSTRESIT2', 'Item reserves 2', TS, 1, DB),
                'CUSTRESIT3' => fi('CUSTRESIT3', 'Item reserves 3', TS, 1, DB),
                'CUSTRESIT4' => fi('CUSTRESIT4', 'Item reserves 4', TS, 1, DB),
                'CUSTRESIT5' => fi('CUSTRESIT5', 'Item reserves 5', TS, 1, DB),
                'PACKSTSTIT' => fi('PACKSTSTIT', 'Packing status', TS, 1, DB),
                'STAPICKCON' => fi('STAPICKCON', 'Confirmation', TS, 1, DB),
                'CONFIRMSTA' => fi('CONFIRMSTA', 'Confirm status', TS, 1, DB),
                'STATCRECH6' => fi('STATCRECH6', 'Financial doc.', TS, 1, DB),
                'STATCRECH7' => fi('STATCRECH7', 'ExptCreditInsur', TS, 1, DB),
                'INCOMSTAIT' => fi('INCOMSTAIT', 'Item data pck/putawy', TS, 1, DB),
                'INCOMSTAPA' => fi('INCOMSTAPA', 'It.data pckgng', TS, 1, DB),
                'INCOSTAGOO' => fi('INCOSTAGOO', 'Item data: GM', TS, 1, DB),
                'DELAYSTAT' => fi('DELAYSTAT', 'Delay status', TS, 1, DB),
                'REVDETSTAT' => fi('REVDETSTAT', 'Rev.det. status', TS, 1, DB),
                'DECTWHOUSE' => fi('DECTWHOUSE', 'Decentr.whse', TS, 1, DB),
                'ITBILBLOST' => fi('ITBILBLOST', 'B. block status', TS, 1, DB),
                'ITDELBLOST' => fi('ITDELBLOST', 'Dlv. blk status', TS, 1, DB),
                'LEBITEMSTA' => fi('LEBITEMSTA', 'POD status', TS, 1, DB)
            }
        ),
        'ORDER_CONDITIONS_OUT' => new overcast.TypeInfo('ORDER_CONDITIONS_OUT', 'Order Conditions for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'CONDIT_NO' => fi('CONDIT_NO', 'Doc. condition', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'COND_ST_NO' => fi('COND_ST_NO', 'Step number', TS, 3, DB),
                'COND_COUNT' => fi('COND_COUNT', 'Counter', TS, 2, DB),
                'APPLICATIO' => fi('APPLICATIO', 'Application', TS, 2, DB),
                'COND_TYPE' => fi('COND_TYPE', 'Condition Type', TS, 4, DB),
                'CONPRICDAT' => fi('CONPRICDAT', 'CondPricingDate', TD, 8, DB),
                'CALCTYPCON' => fi('CALCTYPCON', 'Calculat.type', TS, 1, DB),
                'CONBASEVAL' => fi('CONBASEVAL', 'Currency amount', TDC, 29,9, DB),
                'SDCURRENCY' => fi('SDCURRENCY', 'Doc. Currency', TS, 5, DB),
                'CURREN_ISO' => fi('CURREN_ISO', 'ISO code crcy', TS, 3, DB),
                'COND_VALUE' => fi('COND_VALUE', 'Currency amount', TDC, 29,9, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency', TS, 5, DB),
                'CURRENCISO' => fi('CURRENCISO', 'ISO code crcy', TS, 3, DB),
                'CONEXCHRAT' => fi('CONEXCHRAT', 'Cond.exch.rate', TDC, 9,5, DB),
                'COND_P_UNT' => fi('COND_P_UNT', 'Pricing unit', TDC, 5,0, DB),
                'COND_D_UNT' => fi('COND_D_UNT', 'Condition unit', TS, 3, DB),
                'T_UNIT_ISO' => fi('T_UNIT_ISO', 'Target ISO UoM', TS, 3, DB),
                'NUMCONVERT' => fi('NUMCONVERT', 'Numer.for conv.', TDC, 5,0, DB),
                'DENOMINATO' => fi('DENOMINATO', 'Den. for conv.', TDC, 5,0, DB),
                'CONDTYPE' => fi('CONDTYPE', 'Condit.category', TS, 1, DB),
                'STAT_CON' => fi('STAT_CON', 'Statistical', TS, 1, DB),
                'SCALETYPE' => fi('SCALETYPE', 'Scale type', TS, 1, DB),
                'ACCRUALS' => fi('ACCRUALS', 'Accruals', TS, 1, DB),
                'CONINVOLST' => fi('CONINVOLST', 'Inv.list cond.', TS, 1, DB),
                'CONDORIGIN' => fi('CONDORIGIN', 'Condit.origin', TS, 1, DB),
                'GROUPCOND' => fi('GROUPCOND', 'Group condition', TS, 1, DB),
                'COND_UPDAT' => fi('COND_UPDAT', 'Condit.update', TS, 1, DB),
                'ACCESS_SEQ' => fi('ACCESS_SEQ', 'Access', TS, 2, DB),
                'COND_NO' => fi('COND_NO', 'Cond.record no.', TS, 10, DB),
                'CONDCOUNT' => fi('CONDCOUNT', 'SequNo of cond.', TS, 2, DB),
                'ACCOUNTKEY' => fi('ACCOUNTKEY', 'Account key', TS, 3, DB),
                'GL_ACCOUNT' => fi('GL_ACCOUNT', 'G/L Account', TS, 10, DB),
                'TAX_CODE' => fi('TAX_CODE', 'Tax Code', TS, 2, DB),
                'ACCOUNT_KE' => fi('ACCOUNT_KE', 'Accruals', TS, 3, DB),
                'GLACCOUNT' => fi('GLACCOUNT', 'G/L Account', TS, 10, DB),
                'WITHTAXCOD' => fi('WITHTAXCOD', 'W/tax code', TS, 2, DB),
                'VENDOR_NO' => fi('VENDOR_NO', 'Supplier', TS, 10, DB),
                'CUSTNO_RR' => fi('CUSTNO_RR', 'Customer', TS, 10, DB),
                'ROUNDOFFDI' => fi('ROUNDOFFDI', 'Currency amount', TDC, 29,9, DB),
                'CONDVALUE' => fi('CONDVALUE', 'Currency amount', TDC, 29,9, DB),
                'CONDCNTRL' => fi('CONDCNTRL', 'Cond.control', TS, 1, DB),
                'CONDISACTI' => fi('CONDISACTI', 'Inactive', TS, 1, DB),
                'CONDCLASS' => fi('CONDCLASS', 'Condition class', TS, 1, DB),
                'CONDCOINHD' => fi('CONDCOINHD', 'HdCond.counter', TS, 2, DB),
                'INDIBASVAL' => fi('INDIBASVAL', 'Max base value', TS, 1, DB),
                'INDICONVAL' => fi('INDICONVAL', 'Maximum amount', TS, 1, DB),
                'FACTBASVAL' => fi('FACTBASVAL', 'CondFactor', TDBL, 16,8, DB),
                'STRUCTCOND' => fi('STRUCTCOND', 'StrucCond.', TS, 1, DB),
                'FACTCONBAS' => fi('FACTCONBAS', 'CondFactor', TDBL, 16,8, DB),
                'PRICELEVEL' => fi('PRICELEVEL', 'Price levels', TS, 4, DB),
                'CONDFORMUL' => fi('CONDFORMUL', 'Alt.calc.type', TS, 3, DB),
                'SCALETYP' => fi('SCALETYP', 'Scale type', TS, 1, DB),
                'INCREMSCAL' => fi('INCREMSCAL', 'Currency amount', TDC, 29,9, DB),
                'INCREASCAL' => fi('INCREASCAL', 'Currency amount', TDC, 29,9, DB),
                'INDEX_NO' => fi('INDEX_NO', 'Number', TI, 10, DB),
                'INDEXNO' => fi('INDEXNO', 'Number', TI, 10, DB),
                'CONDITIDX' => fi('CONDITIDX', 'Cond.item index', TS, 2, DB),
                'PRINT_ID' => fi('PRINT_ID', 'Print', TS, 1, DB),
                'FROREFSTEP' => fi('FROREFSTEP', 'From step', TS, 3, DB),
                'FROMREFSTE' => fi('FROMREFSTE', 'From step', TS, 3, DB),
                'CONDSUBTOT' => fi('CONDSUBTOT', 'Subtotal', TS, 1, DB),
                'COND_FORM' => fi('COND_FORM', 'AltCondBaseVal', TS, 3, DB),
                'COND_FORM1' => fi('COND_FORM1', 'Scale formula', TS, 3, DB),
                'MAKMANENTR' => fi('MAKMANENTR', 'Manual entries', TS, 1, DB),
                'ROUNDRULE' => fi('ROUNDRULE', 'Rounding rule', TS, 1, DB),
                'PMSIGNAMOU' => fi('PMSIGNAMOU', 'Plus/minus', TS, 1, DB),
                'CURRCONVER' => fi('CURRCONVER', 'Currency conv.', TS, 1, DB),
                'CONDISMAND' => fi('CONDISMAND', 'Required', TS, 1, DB),
                'RATEOFCHA1' => fi('RATEOFCHA1', 'Amount/percent', TS, 1, DB),
                'RATEOFCHA2' => fi('RATEOFCHA2', 'Value', TS, 1, DB),
                'RATEOFCHA3' => fi('RATEOFCHA3', 'Qty relation', TS, 1, DB),
                'RATEOFCHA4' => fi('RATEOFCHA4', 'Calculat.type', TS, 1, DB),
                'RATEOFCHA5' => fi('RATEOFCHA5', 'Delete', TS, 1, DB),
                'RATEOFCHA6' => fi('RATEOFCHA6', 'Unit of measure', TS, 1, DB),
                'TERMSOFPAY' => fi('TERMSOFPAY', 'TermsOfPayment', TS, 1, DB),
                'MESSAGENO' => fi('MESSAGENO', 'Message', TS, 3, DB),
                'INDIUPDATE' => fi('INDIUPDATE', 'Update indicator', TS, 1, DB),
                'SELECTION' => fi('SELECTION', 'Selection', TS, 1, DB),
                'SCALEBASIN' => fi('SCALEBASIN', 'Scale basis', TS, 1, DB),
                'SCALBASVAL' => fi('SCALBASVAL', 'Currency amount', TDC, 29,9, DB),
                'UNITMEASUR' => fi('UNITMEASUR', 'Scale UoM', TS, 3, DB),
                'TUNITISO' => fi('TUNITISO', 'Target ISO UoM', TS, 3, DB),
                'CURRENCKEY' => fi('CURRENCKEY', 'Scale currency', TS, 5, DB),
                'CORRENISO' => fi('CORRENISO', 'ISO code crcy', TS, 3, DB),
                'CONDCURREN' => fi('CONDCURREN', 'Cndn Currency', TS, 5, DB),
                'CORR_ISO' => fi('CORR_ISO', 'ISO code crcy', TS, 3, DB),
                'CONBASVAL' => fi('CONBASVAL', 'Currency amount', TDC, 29,9, DB),
                'CONDIVALUE' => fi('CONDIVALUE', 'Currency amount', TDC, 29,9, DB),
                'CONDINCOMP' => fi('CONDINCOMP', 'Int-comBillCond', TS, 1, DB),
                'CONDCONFIG' => fi('CONDCONFIG', 'Variant cond.', TS, 1, DB),
                'CONDCHAMAN' => fi('CONDCHAMAN', 'Changed manual.', TS, 1, DB),
                'PRICESOURC' => fi('PRICESOURC', 'Price source', TS, 1, DB),
                'VARIANCOND' => fi('VARIANCOND', 'Variant', TS, 26, DB),
                'LEVEL_BOM' => fi('LEVEL_BOM', 'Level', TDC, 3,0, DB),
                'PATH_BOM' => fi('PATH_BOM', 'Path', TDC, 5,0, DB),
                'STATOFAGRE' => fi('STATOFAGRE', 'Agmt status', TS, 1, DB),
                'REB_RETROA' => fi('REB_RETROA', 'Retroactive', TS, 1, DB),
                'INDIDELETE' => fi('INDIDELETE', 'Deletion Indic.', TS, 1, DB),
                'AGREE_COND' => fi('AGREE_COND', 'Agreement', TS, 10, DB),
                'CALCULBASE' => fi('CALCULBASE', 'Calc. base', TS, 1, DB),
                'SH_MAT_TYP' => fi('SH_MAT_TYP', 'Packag.mat.type', TS, 4, DB),
                'ROUNDDIFCO' => fi('ROUNDDIFCO', 'RoundDiffComp', TS, 1, DB),
                'QTYCONVERS' => fi('QTYCONVERS', 'Qty conversion', TS, 1, DB),
                'CONCBUFFER' => fi('CONCBUFFER', 'Cond. buffer', TS, 1, DB),
                'RELACCASSI' => fi('RELACCASSI', 'Rel.Acc.Assig.', TS, 1, DB),
                'INDIMATMAI' => fi('INDIMATMAI', 'Matrix maint.', TS, 1, DB),
                'TAXJURISDI' => fi('TAXJURISDI', 'Jurisdiction level', TS, 1, DB),
                'CONEXCHRAT_V' => fi('CONEXCHRAT_V', 'Cond.exch.rate', TDC, 9,5, DB)
            }
        ),
        'ORDER_COND_HEAD' => new overcast.TypeInfo('ORDER_COND_HEAD', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'COND_NO' => fi('COND_NO', 'Cond.record no.', TS, 10, DB),
                'CREATED_BY' => fi('CREATED_BY', 'Created By', TS, 12, DB),
                'CREAT_DATE' => fi('CREAT_DATE', 'Created On', TD, 8, DB),
                'COND_USAGE' => fi('COND_USAGE', 'Usage', TS, 1, DB),
                'TABLE_NO' => fi('TABLE_NO', 'Table', TS, 3, DB),
                'APPLICATIO' => fi('APPLICATIO', 'Application', TS, 2, DB),
                'COND_TYPE' => fi('COND_TYPE', 'Condition Type', TS, 4, DB),
                'VARKEY' => fi('VARKEY', 'Character 100', TS, 100, DB),
                'VALID_FROM' => fi('VALID_FROM', 'Valid From', TD, 8, DB),
                'VALID_TO' => fi('VALID_TO', 'Valid To', TD, 8, DB),
                'SEARCHTERM' => fi('SEARCHTERM', 'Search term', TS, 10, DB),
                'RESPONS' => fi('RESPONS', 'Responsibility', TS, 3, DB),
                'PROMOT_NO' => fi('PROMOT_NO', 'Promotion', TS, 10, DB),
                'SALES_DEAL' => fi('SALES_DEAL', 'Sales deal', TS, 10, DB),
                'SALESQUOTE' => fi('SALESQUOTE', 'Sales quote', TS, 10, DB),
                'STD_AGRMNT' => fi('STD_AGRMNT', 'Std agrmnt', TS, 10, DB),
                'PROMOTION' => fi('PROMOTION', 'Promotion', TS, 10, DB),
                'REBAGREEMT' => fi('REBAGREEMT', 'Agreement', TS, 10, DB),
                'LIC_NO' => fi('LIC_NO', 'License number old', TS, 20, DB),
                'LIC_DATE' => fi('LIC_DATE', 'License date', TD, 8, DB),
                'VARDATE' => fi('VARDATE', 'Character 100', TS, 100, DB),
                'VARKEY_LONG' => fi('VARKEY_LONG', 'VarKey', TS, 255, DB),
                'VARDATE_LONG' => fi('VARDATE_LONG', 'variable Data', TS, 255, DB),
                'VARKEY_VERSION' => fi('VARKEY_VERSION', 'Version', TS, 2, DB)
            }
        ),
        'ORDER_COND_ITEM' => new overcast.TypeInfo('ORDER_COND_ITEM', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'COND_NO' => fi('COND_NO', 'Cond.record no.', TS, 10, DB),
                'COND_COUNT' => fi('COND_COUNT', 'SequNo of cond.', TS, 2, DB),
                'APPLICATIO' => fi('APPLICATIO', 'Application', TS, 2, DB),
                'COND_TYPE' => fi('COND_TYPE', 'Condition Type', TS, 4, DB),
                'TEXT_NO' => fi('TEXT_NO', 'Text number', TS, 10, DB),
                'SCALETYPE' => fi('SCALETYPE', 'Scale type', TS, 1, DB),
                'SCALEBASIN' => fi('SCALEBASIN', 'Scale basis', TS, 1, DB),
                'SCALE_QTY' => fi('SCALE_QTY', 'Scale quantity', TDC, 15,3, DB),
                'UNITMEASUR' => fi('UNITMEASUR', 'Scale UoM', TS, 3, DB),
                'MEASUR_ISO' => fi('MEASUR_ISO', 'Target ISO UoM', TS, 3, DB),
                'SCALE_VAL' => fi('SCALE_VAL', 'Currency amount', TDC, 29,9, DB),
                'CURRENCKEY' => fi('CURRENCKEY', 'Scale currency', TS, 5, DB),
                'CURREN_ISO' => fi('CURREN_ISO', 'ISO Code', TS, 3, DB),
                'CALCTYPCON' => fi('CALCTYPCON', 'Calculat.type', TS, 1, DB),
                'COND_VALUE' => fi('COND_VALUE', 'Currency amount', TDC, 29,9, DB),
                'CONDCURR' => fi('CONDCURR', 'Cond. currency', TS, 5, DB),
                'COND_ISO' => fi('COND_ISO', 'ISO Code', TS, 3, DB),
                'COND_P_UNT' => fi('COND_P_UNT', 'Pricing unit', TDC, 5,0, DB),
                'COND_UNIT' => fi('COND_UNIT', 'Unit of measure', TS, 3, DB),
                'CONUNITISO' => fi('CONUNITISO', 'Target ISO UoM', TS, 3, DB),
                'PRICELEVEL' => fi('PRICELEVEL', 'Price levels', TS, 4, DB),
                'NUMCONVERT' => fi('NUMCONVERT', 'Numer.for conv.', TDC, 5,0, DB),
                'DENOMINATO' => fi('DENOMINATO', 'Den. for conv.', TDC, 5,0, DB),
                'BASE_UOM' => fi('BASE_UOM', 'Base Unit', TS, 3, DB),
                'BASEQTYISO' => fi('BASEQTYISO', 'Target ISO UoM', TS, 3, DB),
                'LOWERLIMIT' => fi('LOWERLIMIT', 'Currency amount', TDC, 29,9, DB),
                'UPPERLIMIT' => fi('UPPERLIMIT', 'Currency amount', TDC, 29,9, DB),
                'PLCONDVAL' => fi('PLCONDVAL', 'Currency amount', TDC, 29,9, DB),
                'CUM_VALUE' => fi('CUM_VALUE', 'Currency amount', TDC, 29,9, DB),
                'CUMM_ACCR' => fi('CUMM_ACCR', 'Currency amount', TDC, 29,9, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency', TS, 5, DB),
                'CURR_ISO' => fi('CURR_ISO', 'ISO Code', TS, 3, DB),
                'CONDCURREN' => fi('CONDCURREN', 'Cndn Currency', TS, 5, DB),
                'ISOCURRENC' => fi('ISOCURRENC', 'ISO Code', TS, 3, DB),
                'PLAN_BASIS' => fi('PLAN_BASIS', 'Currency amount', TDC, 29,9, DB),
                'RATE_UNIT' => fi('RATE_UNIT', 'Unit', TS, 5, DB),
                'EXCLUSION' => fi('EXCLUSION', 'Exclusion', TS, 1, DB),
                'CUSTOMER' => fi('CUSTOMER', 'Customer', TS, 10, DB),
                'VENDOR_NO' => fi('VENDOR_NO', 'Supplier', TS, 10, DB),
                'TAX_CODE' => fi('TAX_CODE', 'Tax Code', TS, 2, DB),
                'INDIDELETE' => fi('INDIDELETE', 'Deletion Indic.', TS, 1, DB),
                'CONDITIDX' => fi('CONDITIDX', 'Cond.item index', TS, 2, DB),
                'MATLSETTL' => fi('MATLSETTL', 'Matl f. settl.', TS, 18, DB),
                'ACCRUALS' => fi('ACCRUALS', 'Currency amount', TDC, 29,9, DB),
                'REB_RETROA' => fi('REB_RETROA', 'Retroactive', TS, 1, DB),
                'STATOFAGRE' => fi('STATOFAGRE', 'Agmt status', TS, 1, DB),
                'PROMOT_NO' => fi('PROMOT_NO', 'Promotion', TS, 10, DB),
                'SALES_DEAL' => fi('SALES_DEAL', 'Sales deal', TS, 10, DB),
                'SALESQUOTE' => fi('SALESQUOTE', 'Sales quote', TS, 10, DB),
                'ADD_VAL_DY' => fi('ADD_VAL_DY', 'Add.value days', TS, 2, DB),
                'FIX_VAL_DY' => fi('FIX_VAL_DY', 'Fixed val.date', TD, 8, DB),
                'PMNTTRMS' => fi('PMNTTRMS', 'Pyt Terms', TS, 4, DB),
                'NUMBORDERS' => fi('NUMBORDERS', 'NumberOfOrders', TS, 2, DB),
                'MINCONBAVA' => fi('MINCONBAVA', 'MinCondBaseVal.', TDC, 15,3, DB),
                'MAXCONBAVA' => fi('MAXCONBAVA', 'MaxCondBaseVal.', TDC, 15,3, DB),
                'MAXCONVAL' => fi('MAXCONVAL', 'Currency amount', TDC, 29,9, DB),
                'INCR_SCALE' => fi('INCR_SCALE', 'Increment scale', TS, 4, DB),
                'PRICSCALE' => fi('PRICSCALE', 'Pricing scale', TS, 4, DB),
                'RELPRCG' => fi('RELPRCG', 'Rel. to pricing', TS, 1, DB),
                'PROMOTION' => fi('PROMOTION', 'Promotion', TS, 10, DB),
                'REBAGREEMT' => fi('REBAGREEMT', 'Agreement', TS, 10, DB),
                'WITHTAXCOD' => fi('WITHTAXCOD', 'W/tax code', TS, 2, DB),
                'CONTRACT' => fi('CONTRACT', 'Contract Type', TS, 1, DB),
                'CONTRACTNO' => fi('CONTRACTNO', 'Contract Number', TS, 13, DB),
                'FLOW_TYPE' => fi('FLOW_TYPE', 'Flow Type', TS, 4, DB),
                'INDIMATMAI' => fi('INDIMATMAI', 'Matrix maint.', TS, 1, DB),
                'STATUS' => fi('STATUS', 'Release status', TS, 1, DB),
                'UMSABST' => fi('UMSABST', 'Status BV c/a', TS, 1, DB),
                'MATLSETTL_EXTERNAL' => fi('MATLSETTL_EXTERNAL', 'Material Number', TS, 40, DB),
                'MATLSETTL_GUID' => fi('MATLSETTL_GUID', 'GUID (External)', TS, 32, DB),
                'MATLSETTL_VERSION' => fi('MATLSETTL_VERSION', 'Version Number', TS, 10, DB),
                'MATLSETTL_LONG' => fi('MATLSETTL_LONG', 'Matl f. settl.', TS, 40, DB)
            }
        ),
        'ORDER_COND_QTY_SCALE' => new overcast.TypeInfo('ORDER_COND_QTY_SCALE', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'COND_NO' => fi('COND_NO', 'Cond.record no.', TS, 10, DB),
                'COND_COUNT' => fi('COND_COUNT', 'SequNo of cond.', TS, 2, DB),
                'LINE_NO' => fi('LINE_NO', 'Line number', TS, 4, DB),
                'SCALE_QTY' => fi('SCALE_QTY', 'Scale quantity', TDC, 15,3, DB),
                'COND_UNIT' => fi('COND_UNIT', 'Unit of measure', TS, 3, DB),
                'T_UNIT_ISO' => fi('T_UNIT_ISO', 'Target ISO UoM', TS, 3, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency amount', TDC, 29,9, DB),
                'CONDCURR' => fi('CONDCURR', 'Cond. currency', TS, 5, DB),
                'CURREN_ISO' => fi('CURREN_ISO', 'ISO Code', TS, 3, DB)
            }
        ),
        'ORDER_COND_VAL_SCALE' => new overcast.TypeInfo('ORDER_COND_VAL_SCALE', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'COND_NO' => fi('COND_NO', 'Cond.record no.', TS, 10, DB),
                'COND_COUNT' => fi('COND_COUNT', 'SequNo of cond.', TS, 2, DB),
                'LINE_NO' => fi('LINE_NO', 'Line number', TS, 4, DB),
                'SCALE_VAL' => fi('SCALE_VAL', 'Currency amount', TDC, 29,9, DB),
                'CURRENCKEY' => fi('CURRENCKEY', 'Scale currency', TS, 5, DB),
                'CURRENCISO' => fi('CURRENCISO', 'ISO Code', TS, 3, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency amount', TDC, 29,9, DB),
                'CONDCURR' => fi('CONDCURR', 'Cond. currency', TS, 5, DB),
                'CURREN_ISO' => fi('CURREN_ISO', 'ISO Code', TS, 3, DB)
            }
        ),
        'ORDER_CONTRACTS_OUT' => new overcast.TypeInfo('ORDER_CONTRACTS_OUT', 'Contract Data for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'DOC_NUMBER' => fi('DOC_NUMBER', 'Sales Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'VAL_PER' => fi('VAL_PER', 'Validity period', TS, 3, DB),
                'VALPERUNIT' => fi('VALPERUNIT', 'Unit val.period', TS, 1, DB),
                'VALPERCAT' => fi('VALPERCAT', 'Val.per.cat.', TS, 2, DB),
                'INST_DATE' => fi('INST_DATE', 'Installat.date', TD, 8, DB),
                'ACCEPTDATE' => fi('ACCEPTDATE', 'Acceptance date', TD, 8, DB),
                'CONTSTADAT' => fi('CONTSTADAT', 'Contract start', TD, 8, DB),
                'CONTSIGDAT' => fi('CONTSIGDAT', 'Contract signed', TD, 8, DB),
                'CANC_PROC' => fi('CANC_PROC', 'Canc.proced.', TS, 4, DB),
                'CONTENDACT' => fi('CONTENDACT', 'Action', TS, 4, DB),
                'CONTCANDAT' => fi('CONTCANDAT', 'Receipt of canc', TD, 8, DB),
                'REQCANCDAT' => fi('REQCANCDAT', 'Req.canc.date', TD, 8, DB),
                'CANC_PARTY' => fi('CANC_PARTY', 'Cancellat.party', TS, 1, DB),
                'CANCREASON' => fi('CANCREASON', 'Reason f.canc.', TS, 2, DB),
                'CONTENDDAT' => fi('CONTENDDAT', 'Contract end', TD, 8, DB),
                'CANC_DOC' => fi('CANC_DOC', 'Cancel.document', TS, 20, DB),
                'CANCDOCDAT' => fi('CANCDOCDAT', 'Canc.doc.date', TD, 8, DB),
                'CONTSTARUL' => fi('CONTSTARUL', 'CntrctStartRule', TS, 2, DB),
                'LEADTIMACT' => fi('LEADTIMACT', 'Lead time activ', TS, 3, DB),
                'LEADTIMUNI' => fi('LEADTIMUNI', 'Time unit/lead', TS, 1, DB),
                'DISM_DATE' => fi('DISM_DATE', 'DismantlingDate', TD, 8, DB),
                'ACTIONDATE' => fi('ACTIONDATE', 'Action date', TD, 8, DB),
                'WI_ID' => fi('WI_ID', 'WorkItem ID', TS, 12, DB),
                'ACTDATRULE' => fi('ACTDATRULE', 'Act.date rule', TS, 2, DB),
                'CONTENDRUL' => fi('CONTENDRUL', 'Contr.end rule', TS, 2, DB)
            }
        ),
        'ORDER_TEXTHEADERS_OUT' => new overcast.TypeInfo('ORDER_TEXTHEADERS_OUT', 'Text Header Information for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'APPLOBJECT' => fi('APPLOBJECT', 'Text object', TS, 10, DB),
                'TEXT_NAME' => fi('TEXT_NAME', 'Text Name', TS, 70, DB),
                'TEXT_ID' => fi('TEXT_ID', 'Text ID', TS, 4, DB),
                'LANGU' => fi('LANGU', 'Language', TS, 1, DB),
                'LANGU_ISO' => fi('LANGU_ISO', 'Lang. (ISO)', TS, 2, DB),
                'TITLE' => fi('TITLE', 'Short Title', TS, 50, DB),
                'FORM' => fi('FORM', 'Form', TS, 16, DB),
                'STYLE' => fi('STYLE', 'Style', TS, 8, DB),
                'VERSION' => fi('VERSION', 'Version', TS, 5, DB),
                'CREATEUSER' => fi('CREATEUSER', 'Created By', TS, 12, DB),
                'CREATEREL' => fi('CREATEREL', 'Release', TS, 4, DB),
                'CREATEDATE' => fi('CREATEDATE', 'Date', TD, 8, DB),
                'CREATETIME' => fi('CREATETIME', 'Time', TS, 8, DB),
                'CHANGEUSER' => fi('CHANGEUSER', 'Changed by', TS, 12, DB),
                'CHANGEREL' => fi('CHANGEREL', 'Release', TS, 4, DB),
                'CHANGEDATE' => fi('CHANGEDATE', 'Date', TD, 8, DB),
                'CHANGETIME' => fi('CHANGETIME', 'Time', TS, 8, DB),
                'LINESIZE' => fi('LINESIZE', 'Line width', TS, 3, DB),
                'LINEAMOUNT' => fi('LINEAMOUNT', 'No. of Lines', TS, 5, DB),
                'HYPHENAT' => fi('HYPHENAT', 'Hyphenation', TS, 1, DB),
                'ORGSPRAS' => fi('ORGSPRAS', 'Original Lang.', TS, 1, DB),
                'ORGSPRAISO' => fi('ORGSPRAISO', 'Lang. (ISO)', TS, 2, DB),
                'TRANSTAT' => fi('TRANSTAT', 'Translation', TS, 1, DB),
                'MATCHCOD1' => fi('MATCHCOD1', 'Short Title 1', TS, 16, DB),
                'MATCHCOD2' => fi('MATCHCOD2', 'Short Title 2', TS, 16, DB),
                'REFOBJECT' => fi('REFOBJECT', 'Reference obj.', TS, 10, DB),
                'REFNAME' => fi('REFNAME', 'Reference name', TS, 70, DB),
                'REFID' => fi('REFID', 'Reference ID', TS, 4, DB),
                'TEXTTYPE' => fi('TEXTTYPE', 'Text format', TS, 6, DB),
                'COMPRESSTD' => fi('COMPRESSTD', 'Compressed', TS, 1, DB),
                'OBJ_CLASS' => fi('OBJ_CLASS', 'Class', TS, 4, DB)
            }
        ),
        'ORDER_TEXTLINES_OUT' => new overcast.TypeInfo('ORDER_TEXTLINES_OUT', 'Text Lines for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'APPLOBJECT' => fi('APPLOBJECT', 'Text object', TS, 10, DB),
                'TEXT_NAME' => fi('TEXT_NAME', 'Text Name', TS, 70, DB),
                'TEXT_ID' => fi('TEXT_ID', 'Text ID', TS, 4, DB),
                'LANGU' => fi('LANGU', 'Language', TS, 1, DB),
                'LANGU_ISO' => fi('LANGU_ISO', 'Lang. (ISO)', TS, 2, DB),
                'LINE_CNT' => fi('LINE_CNT', 'Counter', TS, 8, DB),
                'LINE' => fi('LINE', 'Text Line', TS, 132, DB),
                'FORMAT_COL' => fi('FORMAT_COL', 'Tag column', TS, 2, DB)
            }
        ),
        'ORDER_FLOWS_OUT' => new overcast.TypeInfo('ORDER_FLOWS_OUT', 'Document Flows for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'PRECSDDOC' => fi('PRECSDDOC', 'Preceding Doc.', TS, 10, DB),
                'PREDITDOC' => fi('PREDITDOC', 'Preceding item', TS, 6, DB),
                'SUBSSDDOC' => fi('SUBSSDDOC', 'Follow-on doc.', TS, 10, DB),
                'SUBSITDOC' => fi('SUBSITDOC', 'Subsequent item', TS, 6, DB),
                'DOCCATEGOR' => fi('DOCCATEGOR', 'Subs.doc.categ.', TS, 1, DB),
                'REF_QTY' => fi('REF_QTY', 'Quantity', TDC, 15,3, DB),
                'BASE_UOM' => fi('BASE_UOM', 'Base Unit', TS, 3, DB),
                'T_UNIT_ISO' => fi('T_UNIT_ISO', 'Target ISO UoM', TS, 3, DB),
                'REFERENVAL' => fi('REFERENVAL', 'Currency amount', TDC, 29,9, DB),
                'STATISCURR' => fi('STATISCURR', 'Stats Currency', TS, 5, DB),
                'CURRENCISO' => fi('CURRENCISO', 'ISO code crcy', TS, 3, DB),
                'DOC_CAT_SD' => fi('DOC_CAT_SD', 'Prec.doc.categ.', TS, 1, DB),
                'QTYPOSCALC' => fi('QTYPOSCALC', 'Pos./ negative', TS, 1, DB),
                'ID_MM_WM' => fi('ID_MM_WM', 'Confirmation ID', TS, 1, DB),
                'CREAT_DATE' => fi('CREAT_DATE', 'Created On', TD, 8, DB),
                'REC_TIME' => fi('REC_TIME', 'Time', TS, 8, DB),
                'MATERIAL' => fi('MATERIAL', 'Material', TS, 18, DB),
                'MOVE_TYP' => fi('MOVE_TYP', 'Movement Type', TS, 3, DB),
                'REQ_TYPE' => fi('REQ_TYPE', 'RequirementType', TS, 2, DB),
                'PLTYPE' => fi('PLTYPE', 'Planning type', TS, 1, DB),
                'LEVELFLOWR' => fi('LEVELFLOWR', 'Level', TS, 2, DB),
                'WHSE_NO' => fi('WHSE_NO', 'Warehouse No.', TS, 3, DB),
                'CH_ON' => fi('CH_ON', 'Changed On', TD, 8, DB),
                'BILLINGTYP' => fi('BILLINGTYP', 'BillingCategory', TS, 1, DB),
                'GROSS_WT' => fi('GROSS_WT', 'Gross Weight', TDC, 15,3, DB),
                'UNIT_OF_WT' => fi('UNIT_OF_WT', 'Unit of Weight', TS, 3, DB),
                'UNITWTISO' => fi('UNITWTISO', 'Unit of wt ISO', TS, 3, DB),
                'VOLUME' => fi('VOLUME', 'Volume', TDC, 15,3, DB),
                'VOLUMEUNIT' => fi('VOLUMEUNIT', 'Volume Unit', TS, 3, DB),
                'VOLUNITISO' => fi('VOLUNITISO', 'Volume unit ISO', TS, 3, DB),
                'BILL_PLAN' => fi('BILL_PLAN', 'Bill. Plan No.', TS, 10, DB),
                'BILL_PLANI' => fi('BILL_PLANI', 'Item', TS, 6, DB),
                'REFQTYUNIT' => fi('REFQTYUNIT', 'Quantity', TDBL, 16,8, DB),
                'REFQTYFLOA' => fi('REFQTYFLOA', 'Quantity', TDBL, 16,8, DB),
                'SALES_UNIT' => fi('SALES_UNIT', 'Sales Unit', TS, 3, DB),
                'ISOCODUNIT' => fi('ISOCODUNIT', 'ISO code', TS, 3, DB),
                'GURANTEED' => fi('GURANTEED', 'Guaranteed', TDBL, 16,8, DB),
                'SPEC_STOCK' => fi('SPEC_STOCK', 'Special Stock', TS, 1, DB),
                'SP_STCK_NO' => fi('SP_STCK_NO', 'Spec.Stock No.', TS, 16, DB),
                'INDINVMANG' => fi('INDINVMANG', 'Inv.Mgmt active', TS, 1, DB),
                'NET_WEIGHT' => fi('NET_WEIGHT', 'Net Weight', TDC, 13,3, DB),
                'MATERIAL_EXTERNAL' => fi('MATERIAL_EXTERNAL', 'Material Number', TS, 40, DB),
                'MATERIAL_GUID' => fi('MATERIAL_GUID', 'GUID (External)', TS, 32, DB),
                'MATERIAL_VERSION' => fi('MATERIAL_VERSION', 'Version Number', TS, 10, DB),
                'MATERIAL_LONG' => fi('MATERIAL_LONG', 'Material', TS, 40, DB),
                'DOCCATEGOR_LONG' => fi('DOCCATEGOR_LONG', 'Document Cat.', TS, 4, DB),
                'DOC_CAT_SD_LONG' => fi('DOC_CAT_SD_LONG', 'Document Cat.', TS, 4, DB)
            }
        ),
        'ORDER_CFGS_CUREFS_OUT' => new overcast.TypeInfo('ORDER_CFGS_CUREFS_OUT', 'Instance in the Configuration for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'POSEX' => fi('POSEX', 'External Item', TS, 6, DB),
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'INST_ID' => fi('INST_ID', 'Instance Number', TS, 8, DB)
            }
        ),
        'ORDER_CFGS_CUCFGS_OUT' => new overcast.TypeInfo('ORDER_CFGS_CUCFGS_OUT', 'Configuration Data for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'POSEX' => fi('POSEX', 'External Item', TS, 6, DB),
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'ROOT_ID' => fi('ROOT_ID', 'Instance Number', TS, 8, DB),
                'SCE' => fi('SCE', 'CU: Only Information Transferred from SCE to Configuration', TS, 1, DB),
                'KBNAME' => fi('KBNAME', 'KB object', TS, 30, DB),
                'KBVERSION' => fi('KBVERSION', 'Version', TS, 30, DB),
                'COMPLETE' => fi('COMPLETE', 'Indicators', TS, 1, DB),
                'CONSISTENT' => fi('CONSISTENT', 'Indicators', TS, 1, DB),
                'CFGINFO' => fi('CFGINFO', 'BLOB', TS, 250, DB),
                'KBPROFILE' => fi('KBPROFILE', 'KB profile', TS, 30, DB),
                'KBLANGUAGE' => fi('KBLANGUAGE', 'KB Language', TS, 1, DB),
                'CBASE_ID' => fi('CBASE_ID', 'Instance', TS, 32, DB),
                'CBASE_ID_TYPE' => fi('CBASE_ID_TYPE', 'ID Type', TS, 1, DB)
            }
        ),
        'ORDER_CFGS_CUINS_OUT' => new overcast.TypeInfo('ORDER_CFGS_CUINS_OUT', 'Instance Data for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'INST_ID' => fi('INST_ID', 'Instance Number', TS, 8, DB),
                'OBJ_TYPE' => fi('OBJ_TYPE', 'Object type', TS, 10, DB),
                'CLASS_TYPE' => fi('CLASS_TYPE', 'Class Type', TS, 3, DB),
                'OBJ_KEY' => fi('OBJ_KEY', 'Object key', TS, 50, DB),
                'OBJ_TXT' => fi('OBJ_TXT', 'Obj.Description', TS, 70, DB),
                'QUANTITY' => fi('QUANTITY', 'Instance Qty', TS, 15, DB),
                'AUTHOR' => fi('AUTHOR', 'Inferred', TS, 1, DB),
                'QUANTITY_UNIT' => fi('QUANTITY_UNIT', 'Unit of Measure', TS, 3, DB),
                'COMPLETE' => fi('COMPLETE', 'Indicators', TS, 1, DB),
                'CONSISTENT' => fi('CONSISTENT', 'Indicators', TS, 1, DB),
                'OBJECT_GUID' => fi('OBJECT_GUID', 'TYPE_OF', TS, 32, DB),
                'PERSIST_ID' => fi('PERSIST_ID', 'Instance', TS, 32, DB),
                'PERSIST_ID_TYPE' => fi('PERSIST_ID_TYPE', 'ID Type', TS, 1, DB)
            }
        ),
        'ORDER_CFGS_CUPRTS_OUT' => new overcast.TypeInfo('ORDER_CFGS_CUPRTS_OUT', 'PartOf Data for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'PARENT_ID' => fi('PARENT_ID', 'Instance Number', TS, 8, DB),
                'INST_ID' => fi('INST_ID', 'Instance Number', TS, 8, DB),
                'PART_OF_NO' => fi('PART_OF_NO', 'Item Number', TS, 4, DB),
                'OBJ_TYPE' => fi('OBJ_TYPE', 'Object type', TS, 10, DB),
                'CLASS_TYPE' => fi('CLASS_TYPE', 'Class Type', TS, 3, DB),
                'OBJ_KEY' => fi('OBJ_KEY', 'Object key', TS, 50, DB),
                'AUTHOR' => fi('AUTHOR', 'Inferred', TS, 1, DB),
                'SALES_RELEVANT' => fi('SALES_RELEVANT', 'Sales relevant', TS, 1, DB),
                'PART_OF_GUID' => fi('PART_OF_GUID', 'PART_OF', TS, 32, DB)
            }
        ),
        'ORDER_CFGS_CUVALS_OUT' => new overcast.TypeInfo('ORDER_CFGS_CUVALS_OUT', 'Characteristic Value Assignment for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'INST_ID' => fi('INST_ID', 'Instance Number', TS, 8, DB),
                'CHARC' => fi('CHARC', 'Char. Name', TS, 40, DB),
                'CHARC_TXT' => fi('CHARC_TXT', 'Char. Description', TS, 70, DB),
                'VALUE' => fi('VALUE', 'Char. Value', TS, 40, DB),
                'VALUE_TXT' => fi('VALUE_TXT', 'Value Descript.', TS, 70, DB),
                'AUTHOR' => fi('AUTHOR', 'Inferred', TS, 1, DB),
                'VALUE_TO' => fi('VALUE_TO', 'Char. Value', TS, 40, DB),
                'VALCODE' => fi('VALCODE', 'Value Type', TS, 1, DB)
            }
        ),
        'ORDER_CFGS_CUBLBS_OUT' => new overcast.TypeInfo('ORDER_CFGS_CUBLBS_OUT', 'Configuration BLOB for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'CONTEXT' => fi('CONTEXT', 'BLOB', TS, 250, DB)
            }
        ),
        'ORDER_CFGS_CUVKS_OUT' => new overcast.TypeInfo('ORDER_CFGS_CUVKS_OUT', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'CONFIG_ID' => fi('CONFIG_ID', 'Configuration ID', TS, 6, DB),
                'INST_ID' => fi('INST_ID', 'Instance Number', TS, 8, DB),
                'VKEY' => fi('VKEY', 'char26', TS, 26, DB),
                'FACTOR' => fi('FACTOR', 'Char15', TS, 15, DB)
            }
        ),
        'ORDER_BILLINGPLANS_OUT' => new overcast.TypeInfo('ORDER_BILLINGPLANS_OUT', 'Billing Plan for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'BILL_PLAN' => fi('BILL_PLAN', 'Bill. Plan No.', TS, 10, DB),
                'BILLPLATYP' => fi('BILLPLATYP', 'Category', TS, 1, DB),
                'B_INPLATYP' => fi('B_INPLATYP', 'BillingPlanType', TS, 2, DB),
                'SORT_FLD' => fi('SORT_FLD', 'Search term', TS, 10, DB),
                'BILLSTADAT' => fi('BILLSTADAT', 'Start date', TD, 8, DB),
                'BILLENDDAT' => fi('BILLENDDAT', 'End date', TD, 8, DB),
                'RULEDETHOR' => fi('RULEDETHOR', 'Horizon', TS, 2, DB),
                'RULEORISTA' => fi('RULEORISTA', 'OriginStartDate', TS, 2, DB),
                'RULEORIEND' => fi('RULEORIEND', 'Origin End Date', TS, 2, DB),
                'RULEORINEX' => fi('RULEORINEX', 'Next Bill. Date', TS, 2, DB),
                'LENSTANPER' => fi('LENSTANPER', 'LengthOfPeriod', TS, 3, DB),
                'STANBILLNO' => fi('STANBILLNO', 'Bill. Plan. No.', TS, 10, DB),
                'DATESFROM' => fi('DATESFROM', 'Dates from', TD, 8, DB),
                'BILLCREAIA' => fi('BILLCREAIA', 'In Advance', TS, 1, DB),
                'RULEDATFRO' => fi('RULEDATFRO', 'OriginStartDate', TS, 2, DB),
                'RULEDETBIL' => fi('RULEDETBIL', 'Dev. Bill. Date', TS, 2, DB),
                'CALDEFDAYS' => fi('CALDEFDAYS', 'Calendar ID', TS, 2, DB),
                'DATESTO' => fi('DATESTO', 'Dates to', TD, 8, DB),
                'RULDATESTO' => fi('RULDATESTO', 'Orig. End Dates', TS, 2, DB),
                'ROUTING_NO' => fi('ROUTING_NO', 'Plan no.f.oper.', TS, 10, DB),
                'CO_APLZL' => fi('CO_APLZL', 'Counter', TS, 8, DB),
                'RESERV_NO' => fi('RESERV_NO', 'Reservation', TS, 10, DB),
                'RES_ITEM' => fi('RES_ITEM', 'Item no.', TS, 4, DB),
                'PO_NUMBER' => fi('PO_NUMBER', 'Purchasing Doc.', TS, 10, DB),
                'ITUNLIMIT' => fi('ITUNLIMIT', 'Unlim. item val.', TS, 6, DB),
                'PAYCARDS1' => fi('PAYCARDS1', 'Requirement', TS, 1, DB),
                'PAYCARDS2' => fi('PAYCARDS2', 'Call', TS, 1, DB),
                'PAYCARDS3' => fi('PAYCARDS3', 'Response', TS, 1, DB),
                'PAYCARDS4' => fi('PAYCARDS4', 'Payment cards: Reserve', TS, 1, DB),
                'PAYCARDS5' => fi('PAYCARDS5', 'Auth.block', TS, 1, DB),
                'INTPROJNO' => fi('INTPROJNO', 'WBS Element', TS, 8, DB),
                'AUTOCREATE' => fi('AUTOCREATE', 'Aut.corr. dates', TS, 1, DB)
            }
        ),
        'ORDER_BILLINGDATES_OUT' => new overcast.TypeInfo('ORDER_BILLINGDATES_OUT', 'Billing Plan Deadlines for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'ITM_NUMBER' => fi('ITM_NUMBER', 'Item', TS, 6, DB),
                'BILL_PLAN' => fi('BILL_PLAN', 'Bill. Plan No.', TS, 10, DB),
                'BILL_PLANI' => fi('BILL_PLANI', 'Item', TS, 6, DB),
                'DATETYPE' => fi('DATETYPE', 'Date category', TS, 2, DB),
                'DATEDESCRI' => fi('DATEDESCRI', 'Date descript.', TS, 4, DB),
                'SETTLEDATE' => fi('SETTLEDATE', 'Sett. date', TD, 8, DB),
                'IDADOPTBIL' => fi('IDADOPTBIL', 'Fixed date', TS, 1, DB),
                'RULEBILLPL' => fi('RULEBILLPL', 'Billing rule', TS, 1, DB),
                'INVOICEPER' => fi('INVOICEPER', 'InvoicePercentg', TDC, 5,2, DB),
                'CURRENCKEY' => fi('CURRENCKEY', 'Currency', TS, 5, DB),
                'CURRENCISO' => fi('CURRENCISO', 'ISO code crcy', TS, 3, DB),
                'EXCHANRATE' => fi('EXCHANRATE', 'Exch.rate date', TDC, 9,5, DB),
                'VALONDATE' => fi('VALONDATE', 'Currency amount', TDC, 29,9, DB),
                'BILLBLOCK' => fi('BILLBLOCK', 'Billing block', TS, 2, DB),
                'ORDBILLTYP' => fi('ORDBILLTYP', 'Ord-rel.bill.ty', TS, 4, DB),
                'STATBILLPL' => fi('STATBILLPL', 'Billing status', TS, 1, DB),
                'RULEORINEX' => fi('RULEORINEX', 'Next Bill. Date', TS, 2, DB),
                'LENSTANPER' => fi('LENSTANPER', 'LengthOfPeriod', TS, 3, DB),
                'MILESTONNO' => fi('MILESTONNO', 'Milestone no.', TS, 12, DB),
                'MILESTONE' => fi('MILESTONE', 'Usage', TS, 5, DB),
                'PMNTTRMS' => fi('PMNTTRMS', 'Pyt Terms', TS, 4, DB),
                'PAYER' => fi('PAYER', 'Payer', TS, 10, DB),
                'TAX_CLASS1' => fi('TAX_CLASS1', 'TaxClass1-Cust.', TS, 1, DB),
                'TAX_CLASS2' => fi('TAX_CLASS2', 'TaxClass2-Cust.', TS, 1, DB),
                'TAX_CLASS3' => fi('TAX_CLASS3', 'TaxClass3-Cust.', TS, 1, DB),
                'TAX_CLASS4' => fi('TAX_CLASS4', 'TaxClass4-Cust.', TS, 1, DB),
                'TAX_CLASS5' => fi('TAX_CLASS5', 'TaxClass5-Cust.', TS, 1, DB),
                'TAX_CLASS6' => fi('TAX_CLASS6', 'TaxClass6-Cust.', TS, 1, DB),
                'TAX_CLASS7' => fi('TAX_CLASS7', 'TaxClass7-Cust.', TS, 1, DB),
                'TAX_CLASS8' => fi('TAX_CLASS8', 'TaxClass8-Cust.', TS, 1, DB),
                'TAX_CLASS9' => fi('TAX_CLASS9', 'TaxClass9-Cust.', TS, 1, DB),
                'ADD_VAL_DY' => fi('ADD_VAL_DY', 'Add.value days', TS, 2, DB),
                'FIX_VAL_DY' => fi('FIX_VAL_DY', 'Fixed val.date', TD, 8, DB),
                'SETTLEDAT' => fi('SETTLEDAT', 'Sett. date', TD, 8, DB),
                'PROCASMANU' => fi('PROCASMANU', 'Manually', TS, 1, DB),
                'CALDEFDAYS' => fi('CALDEFDAYS', 'Calendar ID', TS, 2, DB),
                'BILL_DATE' => fi('BILL_DATE', 'Billing Date', TD, 8, DB),
                'NET_VALUE' => fi('NET_VALUE', 'Currency amount', TDC, 29,9, DB),
                'NET_PRICE' => fi('NET_PRICE', 'Currency amount', TDC, 29,9, DB),
                'COST_DOC_C' => fi('COST_DOC_C', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP1' => fi('SUBTOT_PP1', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP2' => fi('SUBTOT_PP2', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP3' => fi('SUBTOT_PP3', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP4' => fi('SUBTOT_PP4', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP5' => fi('SUBTOT_PP5', 'Currency amount', TDC, 29,9, DB),
                'SUBTOT_PP6' => fi('SUBTOT_PP6', 'Currency amount', TDC, 29,9, DB),
                'CREDPRICIT' => fi('CREDPRICIT', 'Currency amount', TDC, 29,9, DB),
                'AMOUNTELIG' => fi('AMOUNTELIG', 'Currency amount', TDC, 29,9, DB),
                'REBATEBAS' => fi('REBATEBAS', 'Currency amount', TDC, 29,9, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Doc. Currency', TS, 5, DB),
                'CURREN_ISO' => fi('CURREN_ISO', 'ISO code crcy', TS, 3, DB),
                'PRICE_OK' => fi('PRICE_OK', 'Pricing', TS, 1, DB),
                'MEANSOFPAY' => fi('MEANSOFPAY', 'Means of paym.', TS, 1, DB),
                'CREDITPRED' => fi('CREDITPRED', 'Credit price', TDBL, 16,8, DB),
                'HILEVPAYNO' => fi('HILEVPAYNO', 'High.lev.plan', TS, 10, DB),
                'HILEVITBIL' => fi('HILEVITBIL', 'Hg-level item', TS, 6, DB),
                'EXCHRATEFI' => fi('EXCHRATEFI', 'Exch.rate-acct.', TDC, 9,5, DB),
                'ACCOUNTNO' => fi('ACCOUNTNO', 'G/L account', TS, 10, DB),
                'INDICORDAT' => fi('INDICORDAT', 'Correction date', TS, 1, DB),
                'ORIGBILDAT' => fi('ORIGBILDAT', 'Original FKDAT', TD, 8, DB),
                'EXCHANRATE_V' => fi('EXCHANRATE_V', 'Exch.rate date', TDC, 9,5, DB),
                'EXCHRATEFI_V' => fi('EXCHRATEFI_V', 'Exch.rate-acct.', TDC, 9,5, DB)
            }
        ),
        'ORDER_CREDITCARDS_OUT' => new overcast.TypeInfo('ORDER_CREDITCARDS_OUT', 'Credit Cards for Document Numbers', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'OPERATION' => fi('OPERATION', 'Function', TS, 3, DB),
                'SD_DOC' => fi('SD_DOC', 'SD Document', TS, 10, DB),
                'CC_TYPE' => fi('CC_TYPE', 'Card type', TS, 4, DB),
                'CC_NUMBER' => fi('CC_NUMBER', 'Card number', TS, 25, DB),
                'CC_VALID_F' => fi('CC_VALID_F', 'Valid from', TD, 8, DB),
                'CC_VALID_T' => fi('CC_VALID_T', 'Exp.date', TD, 8, DB),
                'CC_NAME' => fi('CC_NAME', 'Cardholder', TS, 40, DB),
                'DATAORIGIN' => fi('DATAORIGIN', 'Entry mode', TS, 1, DB),
                'AUTHAMOUNT' => fi('AUTHAMOUNT', 'Currency amount', TDC, 29,9, DB),
                'CURRENCY_x' => fi('CURRENCY_x', 'Currency', TS, 5, DB),
                'CURR_ISO' => fi('CURR_ISO', 'ISO code crcy', TS, 3, DB),
                'CC_SETTLED' => fi('CC_SETTLED', 'Settled', TS, 1, DB),
                'AUTH_CC_NO' => fi('AUTH_CC_NO', 'Auth.no.', TS, 10, DB),
                'AUTH_REFNO' => fi('AUTH_REFNO', 'Auth.refer.code', TS, 15, DB),
                'AUTH_DATE' => fi('AUTH_DATE', 'Auth.date', TD, 8, DB),
                'AUTH_TIME' => fi('AUTH_TIME', 'Auth.time', TS, 8, DB),
                'MERCHIDCL' => fi('MERCHIDCL', 'Merchant ID', TS, 15, DB),
                'PNTOFRECEI' => fi('PNTOFRECEI', 'PointOfReceipt', TS, 10, DB),
                'TERMINAL' => fi('TERMINAL', 'Terminal', TS, 10, DB),
                'SETTLEMRUN' => fi('SETTLEMRUN', 'Settlement', TS, 10, DB),
                'CARDCATEGO' => fi('CARDCATEGO', 'Card category', TS, 2, DB),
                'AUTHORTYPE' => fi('AUTHORTYPE', 'Auth. type', TS, 1, DB),
                'STATEXTSYS' => fi('STATEXTSYS', 'Call status', TS, 1, DB),
                'CC_REACT' => fi('CC_REACT', 'Response', TS, 1, DB),
                'AMOUNTAUTH' => fi('AMOUNTAUTH', 'Currency amount', TDC, 29,9, DB),
                'CURR_CRED' => fi('CURR_CRED', 'Currency', TS, 5, DB),
                'CURCREDISO' => fi('CURCREDISO', 'ISO code crcy', TS, 3, DB),
                'AUTH_EXPIR' => fi('AUTH_EXPIR', 'Expired', TS, 1, DB),
                'AMOUNTCHAN' => fi('AMOUNTCHAN', 'Amount changed', TS, 1, DB),
                'PRE_AUTH' => fi('PRE_AUTH', 'Preauth.', TS, 1, DB),
                'HIGHLEAUTH' => fi('HIGHLEAUTH', 'High.-lev.auth.', TS, 6, DB),
                'RADRCHECK1' => fi('RADRCHECK1', 'Address result', TS, 4, DB),
                'RADRCHECK2' => fi('RADRCHECK2', 'Address check', TS, 4, DB),
                'RADRCHECK3' => fi('RADRCHECK3', 'ZIP code check', TS, 4, DB),
                'RCARDCHECK' => fi('RCARDCHECK', 'Card check', TS, 4, DB),
                'REASONTEXT' => fi('REASONTEXT', 'Text', TS, 40, DB),
                'CC_LIMIT' => fi('CC_LIMIT', 'Currency amount', TDC, 29,9, DB),
                'AUTH_USED' => fi('AUTH_USED', 'Auth. Used', TS, 1, DB),
                'CC_LIMITED' => fi('CC_LIMITED', 'Limit to', TS, 1, DB)
            }
        ),
        'EXTENSIONOUT' => new overcast.TypeInfo('EXTENSIONOUT', '', ST, DB,
            new Map<String, overcast.FieldInfo> {
                'STRUCTURE' => fi('STRUCTURE', 'Table ext.struct.', TS, 30, DB),
                'VALUEPART1' => fi('VALUEPART1', 'Data', TS, 240, DB),
                'VALUEPART2' => fi('VALUEPART2', 'Data', TS, 240, DB),
                'VALUEPART3' => fi('VALUEPART3', 'Data', TS, 240, DB),
                'VALUEPART4' => fi('VALUEPART4', 'Data', TS, 240, DB)
            }
        )
    };
}