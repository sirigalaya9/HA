/* 
 * Generated by Overcast UTC 2024-02-20 10:52:43Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjbT001WTest {
    @istest
    private static void testzjbT001W() {
        zjbT001W actual = new zjbT001W();
        system.assertNotEquals(null, actual.T001W);
    }

    @istest
    private static void testT001W() {
        zjbT001W.T001W actual = new zjbT001W.T001W();

        actual.MANDT = 'a';
        actual.WERKS = 'a';
        actual.NAME1 = 'a';
        actual.BWKEY = 'a';
        actual.KUNNR = 'a';
        actual.LIFNR = 'a';
        actual.FABKL = 'a';
        actual.NAME2 = 'a';
        actual.STRAS = 'a';
        actual.PFACH = 'a';
        actual.PSTLZ = 'a';
        actual.ORT01 = 'a';
        actual.EKORG = 'a';
        actual.VKORG = 'a';
        actual.CHAZV = 'a';
        actual.KKOWK = 'a';
        actual.KORDB = 'a';
        actual.BEDPL = 'a';
        actual.LAND1 = 'a';
        actual.REGIO = 'a';
        actual.COUNC = 'a';
        actual.CITYC = 'a';
        actual.ADRNR = 'a';
        actual.IWERK = 'a';
        actual.TXJCD = 'a';
        actual.VTWEG = 'a';
        actual.SPART = 'a';
        actual.SPRAS = 'a';
        actual.WKSOP = 'a';
        actual.AWSLS = 'a';
        actual.CHAZV_OLD = 'a';
        actual.VLFKZ = 'a';
        actual.BZIRK = 'a';
        actual.ZONE1 = 'a';
        actual.TAXIW = 'a';
        actual.BZQHL = 'a';
        actual.LET01 = 0;
        actual.LET02 = 0;
        actual.LET03 = 0;
        actual.TXNAM_MA1 = 'a';
        actual.TXNAM_MA2 = 'a';
        actual.TXNAM_MA3 = 'a';
        actual.BETOL = 'a';
        actual.J_1BBRANCH = 'a';
        actual.VTBFI = 'a';
        actual.FPRFW = 'a';
        actual.ACHVM = 'a';
        actual.DVSART = 'a';
        actual.NODETYPE = 'a';
        actual.NSCHEMA = 'a';
        actual.PKOSA = 'a';
        actual.MISCH = 'a';
        actual.MGVUPD = 'a';
        actual.VSTEL = 'a';
        actual.MGVLAUPD = 'a';
        actual.MGVLAREVAL = 'a';
        actual.SOURCING = 'a';
        actual.OILIVAL = 'a';
        actual.OIHVTYPE = 'a';
        actual.OIHCREDIPI = 'a';
        actual.STORETYPE = 'a';
        actual.DEP_STORE = 'a';
        actual.Z_VB_KZ = 'a';
        actual.ZZHWWPIHDE_AUART = 'a';
        actual.ZZHWW_STCEG = 'a';
        actual.ZZPRDWRK_KZ = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.WERKS);
        system.assertEquals('a', actual.NAME1);
        system.assertEquals('a', actual.BWKEY);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.LIFNR);
        system.assertEquals('a', actual.FABKL);
        system.assertEquals('a', actual.NAME2);
        system.assertEquals('a', actual.STRAS);
        system.assertEquals('a', actual.PFACH);
        system.assertEquals('a', actual.PSTLZ);
        system.assertEquals('a', actual.ORT01);
        system.assertEquals('a', actual.EKORG);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.CHAZV);
        system.assertEquals('a', actual.KKOWK);
        system.assertEquals('a', actual.KORDB);
        system.assertEquals('a', actual.BEDPL);
        system.assertEquals('a', actual.LAND1);
        system.assertEquals('a', actual.REGIO);
        system.assertEquals('a', actual.COUNC);
        system.assertEquals('a', actual.CITYC);
        system.assertEquals('a', actual.ADRNR);
        system.assertEquals('a', actual.IWERK);
        system.assertEquals('a', actual.TXJCD);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.SPRAS);
        system.assertEquals('a', actual.WKSOP);
        system.assertEquals('a', actual.AWSLS);
        system.assertEquals('a', actual.CHAZV_OLD);
        system.assertEquals('a', actual.VLFKZ);
        system.assertEquals('a', actual.BZIRK);
        system.assertEquals('a', actual.ZONE1);
        system.assertEquals('a', actual.TAXIW);
        system.assertEquals('a', actual.BZQHL);
        system.assertEquals(0, actual.LET01);
        system.assertEquals(0, actual.LET02);
        system.assertEquals(0, actual.LET03);
        system.assertEquals('a', actual.TXNAM_MA1);
        system.assertEquals('a', actual.TXNAM_MA2);
        system.assertEquals('a', actual.TXNAM_MA3);
        system.assertEquals('a', actual.BETOL);
        system.assertEquals('a', actual.J_1BBRANCH);
        system.assertEquals('a', actual.VTBFI);
        system.assertEquals('a', actual.FPRFW);
        system.assertEquals('a', actual.ACHVM);
        system.assertEquals('a', actual.DVSART);
        system.assertEquals('a', actual.NODETYPE);
        system.assertEquals('a', actual.NSCHEMA);
        system.assertEquals('a', actual.PKOSA);
        system.assertEquals('a', actual.MISCH);
        system.assertEquals('a', actual.MGVUPD);
        system.assertEquals('a', actual.VSTEL);
        system.assertEquals('a', actual.MGVLAUPD);
        system.assertEquals('a', actual.MGVLAREVAL);
        system.assertEquals('a', actual.SOURCING);
        system.assertEquals('a', actual.OILIVAL);
        system.assertEquals('a', actual.OIHVTYPE);
        system.assertEquals('a', actual.OIHCREDIPI);
        system.assertEquals('a', actual.STORETYPE);
        system.assertEquals('a', actual.DEP_STORE);
        system.assertEquals('a', actual.Z_VB_KZ);
        system.assertEquals('a', actual.ZZHWWPIHDE_AUART);
        system.assertEquals('a', actual.ZZHWW_STCEG);
        system.assertEquals('a', actual.ZZPRDWRK_KZ);
    }
    @istest
    private static void testrunQuery() {
        zjbT001W request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjbT001W response = request.runQuery(query1);
        system.assertEquals('a', response.T001W[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static zjbT001W testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjbT001W');
        zjbT001W request = new zjbT001W();
        zjbT001W.T001W value1 = new zjbT001W.T001W();
        value1.MANDT = 'a';
        request.T001W.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjbT001W input = new zjbT001W();
        zjbT001W.T001W value1 = new zjbT001W.T001W();
        value1.MANDT = 'a';
        input.T001W.add(value1);
        zjbT001W actual = (zjbT001W)JSON.deserialize(input.serialize(), zjbT001W.class);
        system.assertEquals('a', actual.T001W[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        zjbT001W output = new zjbT001W();
        zjbT001W.T001W value1 = new zjbT001W.T001W();
        value1.MANDT = 'a';
        output.T001W.add(value1);

        string s = output.serialize();
        zjbT001W actual = zjbT001W.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.T001W[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjbT001W actual = zjbT001W.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (zjbT001W.zjbT001WException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            zjbT001W actual = zjbT001W.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (zjbT001W.zjbT001WException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        zjbT001W output = new zjbT001W();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjbT001W output = new zjbT001W();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjbT001W output2 = new zjbT001W();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjbT001W output = new zjbT001W();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('T001W'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('T001W', first.name);
    }

    @istest
    private static void testException() {
        zjbT001W.zjbT001WException e = new zjbT001W.zjbT001WException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            zjbT001W.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbT001W.zjbT001WException e) {
            System.assert(true);
        }
        
        try {
            zjbT001W output = new zjbT001W();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbT001W.zjbT001WException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            zjbT001W output = new zjbT001W();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbT001W.zjbT001WException e) {
            System.assert(true);
        }

        try {
            zjbT001W output = new zjbT001W();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbT001W.zjbT001WException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            zjbT001W.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbT001W.zjbT001WException e) {
            System.assert(true);
        }
        
        try {
            zjbT001W.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbT001W.zjbT001WException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            zjbT001W.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjbT001W.zjbT001WException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        zjbT001W output = new zjbT001W();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}