/* 
 * Generated by Overcast UTC 2024-03-12 09:37:36Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class sapCreditDetailTest {
    @istest
    private static void testsapCreditDetail() {
        sapCreditDetail actual = new sapCreditDetail();
        system.assertNotEquals(null, actual.ISM_BAPI_CR_ACC_GETDETAIL);
        system.assertNotEquals(null, actual.RETURN_x);
        system.assertNotEquals(null, actual.PS_CREDIT_ACCOUNT_DETAIL_ALL);
    }

    @istest
    private static void testISM_BAPI_CR_ACC_GETDETAIL() {
        sapCreditDetail.ISM_BAPI_CR_ACC_GETDETAIL actual = new sapCreditDetail.ISM_BAPI_CR_ACC_GETDETAIL();

        actual.PV_CUSTOMER = 'a';
        actual.PV_CREDIT_CONTROL_AREA = 'a';
        actual.PV_ALLOWED_AGING_IN_DAYS = 'a';
        actual.PV_ALLOWED_AGING_IN_HOURS = 'a';
        system.assertEquals('a', actual.PV_CUSTOMER);
        system.assertEquals('a', actual.PV_CREDIT_CONTROL_AREA);
        system.assertEquals('a', actual.PV_ALLOWED_AGING_IN_DAYS);
        system.assertEquals('a', actual.PV_ALLOWED_AGING_IN_HOURS);
    }
    @istest
    private static void testRETURN_x() {
        sapCreditDetail.RETURN_x actual = new sapCreditDetail.RETURN_x();

        actual.TYPE_x = 'a';
        actual.ID = 'a';
        actual.NUMBER_x = 'a';
        actual.MESSAGE = 'a';
        actual.LOG_NO = 'a';
        actual.LOG_MSG_NO = 'a';
        actual.MESSAGE_V1 = 'a';
        actual.MESSAGE_V2 = 'a';
        actual.MESSAGE_V3 = 'a';
        actual.MESSAGE_V4 = 'a';
        system.assertEquals('a', actual.TYPE_x);
        system.assertEquals('a', actual.ID);
        system.assertEquals('a', actual.NUMBER_x);
        system.assertEquals('a', actual.MESSAGE);
        system.assertEquals('a', actual.LOG_NO);
        system.assertEquals('a', actual.LOG_MSG_NO);
        system.assertEquals('a', actual.MESSAGE_V1);
        system.assertEquals('a', actual.MESSAGE_V2);
        system.assertEquals('a', actual.MESSAGE_V3);
        system.assertEquals('a', actual.MESSAGE_V4);
    }
    @istest
    private static void testPS_CREDIT_ACCOUNT_DETAIL_ALL() {
        sapCreditDetail.PS_CREDIT_ACCOUNT_DETAIL_ALL actual = new sapCreditDetail.PS_CREDIT_ACCOUNT_DETAIL_ALL();

        actual.CRED_LIMIT = 0;
        actual.CRED_ACCNT = 'a';
        actual.RCVBL_VALS = 0;
        actual.CRED_LIAB = 0;
        actual.CURRENCY_x = 'a';
        actual.RISK_CATEG = 'a';
        actual.BLOCKED = 'a';
        actual.NXT_REVIEW = Date.newInstance(2000,1,1);
        actual.SECURED_ITEMS = 0;
        actual.DATA_TOO_OLD = 'a';
        actual.DATA_NOT_FOUND = 'a';
        actual.AGING_IN_DAYS = 'a';
        actual.AGING_IN_HOURS = 'a';
        actual.ORDER_VALS = 0;
        actual.TOTAL_LIABILITIES = 0;
        system.assertEquals(0, actual.CRED_LIMIT);
        system.assertEquals('a', actual.CRED_ACCNT);
        system.assertEquals(0, actual.RCVBL_VALS);
        system.assertEquals(0, actual.CRED_LIAB);
        system.assertEquals('a', actual.CURRENCY_x);
        system.assertEquals('a', actual.RISK_CATEG);
        system.assertEquals('a', actual.BLOCKED);
        system.assertEquals(Date.newInstance(2000,1,1), actual.NXT_REVIEW);
        system.assertEquals(0, actual.SECURED_ITEMS);
        system.assertEquals('a', actual.DATA_TOO_OLD);
        system.assertEquals('a', actual.DATA_NOT_FOUND);
        system.assertEquals('a', actual.AGING_IN_DAYS);
        system.assertEquals('a', actual.AGING_IN_HOURS);
        system.assertEquals(0, actual.ORDER_VALS);
        system.assertEquals(0, actual.TOTAL_LIABILITIES);
    }

    @istest
    private static void testRun() {
        sapCreditDetail request = testSetup();
        sapCreditDetail response = request.run();
        system.assertEquals('a', response.ISM_BAPI_CR_ACC_GETDETAIL.PV_CUSTOMER);
        string requestid = request.runAsync(null, null, new Continuation(10));
    }

    private static sapCreditDetail testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('sapCreditDetail');
        sapCreditDetail request = new sapCreditDetail();
        request.ISM_BAPI_CR_ACC_GETDETAIL.PV_CUSTOMER = 'a';

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        sapCreditDetail input = new sapCreditDetail();
        input.ISM_BAPI_CR_ACC_GETDETAIL.PV_CUSTOMER = 'a';
        sapCreditDetail actual = (sapCreditDetail)JSON.deserialize(input.serialize(), sapCreditDetail.class);
        system.assertEquals('a', actual.ISM_BAPI_CR_ACC_GETDETAIL.PV_CUSTOMER);
    }

    @istest
    private static void testDeserialize() {
        sapCreditDetail output = new sapCreditDetail();
        output.ISM_BAPI_CR_ACC_GETDETAIL.PV_CUSTOMER = 'a';

        string s = output.serialize();
        sapCreditDetail actual = sapCreditDetail.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.ISM_BAPI_CR_ACC_GETDETAIL.PV_CUSTOMER);
    }

    @istest
    private static void testDeserializeError() {
        try {
            sapCreditDetail actual = sapCreditDetail.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (sapCreditDetail.sapCreditDetailException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            sapCreditDetail actual = sapCreditDetail.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (sapCreditDetail.sapCreditDetailException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        sapCreditDetail output = new sapCreditDetail();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        sapCreditDetail output = new sapCreditDetail();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        sapCreditDetail output2 = new sapCreditDetail();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        sapCreditDetail output = new sapCreditDetail();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('ISM_BAPI_CR_ACC_GETDETAIL'));
        system.assert(keys.contains('RETURN_x'));
        system.assert(keys.contains('PS_CREDIT_ACCOUNT_DETAIL_ALL'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('ISM_BAPI_CR_ACC_GETDETAIL', first.name);
    }

    @istest
    private static void testException() {
        sapCreditDetail.sapCreditDetailException e = new sapCreditDetail.sapCreditDetailException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            sapCreditDetail.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapCreditDetail.sapCreditDetailException e) {
            System.assert(true);
        }
        
        try {
            sapCreditDetail output = new sapCreditDetail();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapCreditDetail.sapCreditDetailException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            sapCreditDetail output = new sapCreditDetail();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapCreditDetail.sapCreditDetailException e) {
            System.assert(true);
        }

        try {
            sapCreditDetail output = new sapCreditDetail();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapCreditDetail.sapCreditDetailException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            sapCreditDetail.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapCreditDetail.sapCreditDetailException e) {
            System.assert(true);
        }
        
        try {
            sapCreditDetail.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapCreditDetail.sapCreditDetailException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            sapCreditDetail.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (sapCreditDetail.sapCreditDetailException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        sapCreditDetail output = new sapCreditDetail();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}