/* 
 * Generated by Overcast UTC 2024-03-12 09:24:47Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ovcSAPSalesDivisionTextTest {
    @istest
    private static void testovcSAPSalesDivisionText() {
        ovcSAPSalesDivisionText actual = new ovcSAPSalesDivisionText();
        system.assertNotEquals(null, actual.TSPAT);
    }

    @istest
    private static void testTSPAT() {
        ovcSAPSalesDivisionText.TSPAT actual = new ovcSAPSalesDivisionText.TSPAT();

        actual.MANDT = 'a';
        actual.SPRAS = 'a';
        actual.SPART = 'a';
        actual.VTEXT = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.SPRAS);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.VTEXT);
    }
    @istest
    private static void testrunQuery() {
        ovcSAPSalesDivisionText request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        ovcSAPSalesDivisionText response = request.runQuery(query1);
        system.assertEquals('a', response.TSPAT[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static ovcSAPSalesDivisionText testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ovcSAPSalesDivisionText');
        ovcSAPSalesDivisionText request = new ovcSAPSalesDivisionText();
        ovcSAPSalesDivisionText.TSPAT value1 = new ovcSAPSalesDivisionText.TSPAT();
        value1.MANDT = 'a';
        request.TSPAT.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ovcSAPSalesDivisionText input = new ovcSAPSalesDivisionText();
        ovcSAPSalesDivisionText.TSPAT value1 = new ovcSAPSalesDivisionText.TSPAT();
        value1.MANDT = 'a';
        input.TSPAT.add(value1);
        ovcSAPSalesDivisionText actual = (ovcSAPSalesDivisionText)JSON.deserialize(input.serialize(), ovcSAPSalesDivisionText.class);
        system.assertEquals('a', actual.TSPAT[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        ovcSAPSalesDivisionText output = new ovcSAPSalesDivisionText();
        ovcSAPSalesDivisionText.TSPAT value1 = new ovcSAPSalesDivisionText.TSPAT();
        value1.MANDT = 'a';
        output.TSPAT.add(value1);

        string s = output.serialize();
        ovcSAPSalesDivisionText actual = ovcSAPSalesDivisionText.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.TSPAT[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ovcSAPSalesDivisionText actual = ovcSAPSalesDivisionText.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ovcSAPSalesDivisionText actual = ovcSAPSalesDivisionText.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        ovcSAPSalesDivisionText output = new ovcSAPSalesDivisionText();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ovcSAPSalesDivisionText output = new ovcSAPSalesDivisionText();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ovcSAPSalesDivisionText output2 = new ovcSAPSalesDivisionText();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ovcSAPSalesDivisionText output = new ovcSAPSalesDivisionText();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('TSPAT'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('TSPAT', first.name);
    }

    @istest
    private static void testException() {
        ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException e = new ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            ovcSAPSalesDivisionText.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException e) {
            System.assert(true);
        }
        
        try {
            ovcSAPSalesDivisionText output = new ovcSAPSalesDivisionText();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            ovcSAPSalesDivisionText output = new ovcSAPSalesDivisionText();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException e) {
            System.assert(true);
        }

        try {
            ovcSAPSalesDivisionText output = new ovcSAPSalesDivisionText();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            ovcSAPSalesDivisionText.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException e) {
            System.assert(true);
        }
        
        try {
            ovcSAPSalesDivisionText.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ovcSAPSalesDivisionText.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPSalesDivisionText.ovcSAPSalesDivisionTextException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        ovcSAPSalesDivisionText output = new ovcSAPSalesDivisionText();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}