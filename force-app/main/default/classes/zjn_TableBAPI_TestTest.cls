/* 
 * Generated by Overcast UTC 2024-03-27 16:17:16Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class zjn_TableBAPI_TestTest {
    @istest
    private static void testzjn_TableBAPI_Test() {
        zjn_TableBAPI_Test actual = new zjn_TableBAPI_Test();
        system.assertNotEquals(null, actual.VBAK);
    }

    @istest
    private static void testVBAK() {
        zjn_TableBAPI_Test.VBAK actual = new zjn_TableBAPI_Test.VBAK();

        actual.VBELN = 'a';
        actual.ERDAT = Date.newInstance(2000,1,1);
        actual.ERZET = 'a';
        actual.BNDDT = Date.newInstance(2000,1,1);
        actual.VBTYP = 'a';
        actual.TRVOG = 'a';
        actual.AUART = 'a';
        actual.AUGRU = 'a';
        actual.NETWR = 0;
        actual.WAERK = 'a';
        actual.VKORG = 'a';
        actual.VTWEG = 'a';
        actual.SPART = 'a';
        actual.VKGRP = 'a';
        actual.VKBUR = 'a';
        actual.VDATU = Date.newInstance(2000,1,1);
        actual.BSTNK = 'a';
        actual.KUNNR = 'a';
        actual.AEDAT = Date.newInstance(2000,1,1);
        system.assertEquals('a', actual.VBELN);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.ERZET);
        system.assertEquals(Date.newInstance(2000,1,1), actual.BNDDT);
        system.assertEquals('a', actual.VBTYP);
        system.assertEquals('a', actual.TRVOG);
        system.assertEquals('a', actual.AUART);
        system.assertEquals('a', actual.AUGRU);
        system.assertEquals(0, actual.NETWR);
        system.assertEquals('a', actual.WAERK);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.VKGRP);
        system.assertEquals('a', actual.VKBUR);
        system.assertEquals(Date.newInstance(2000,1,1), actual.VDATU);
        system.assertEquals('a', actual.BSTNK);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals(Date.newInstance(2000,1,1), actual.AEDAT);
    }
    @istest
    private static void testrunQuery() {
        zjn_TableBAPI_Test request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        zjn_TableBAPI_Test response = request.runQuery(query1);
        system.assertEquals('a', response.VBAK[0].VBELN);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static zjn_TableBAPI_Test testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('zjn_TableBAPI_Test');
        zjn_TableBAPI_Test request = new zjn_TableBAPI_Test();
        zjn_TableBAPI_Test.VBAK value1 = new zjn_TableBAPI_Test.VBAK();
        value1.VBELN = 'a';
        request.VBAK.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        zjn_TableBAPI_Test input = new zjn_TableBAPI_Test();
        zjn_TableBAPI_Test.VBAK value1 = new zjn_TableBAPI_Test.VBAK();
        value1.VBELN = 'a';
        input.VBAK.add(value1);
        zjn_TableBAPI_Test actual = (zjn_TableBAPI_Test)JSON.deserialize(input.serialize(), zjn_TableBAPI_Test.class);
        system.assertEquals('a', actual.VBAK[0].VBELN);
    }

    @istest
    private static void testDeserialize() {
        zjn_TableBAPI_Test output = new zjn_TableBAPI_Test();
        zjn_TableBAPI_Test.VBAK value1 = new zjn_TableBAPI_Test.VBAK();
        value1.VBELN = 'a';
        output.VBAK.add(value1);

        string s = output.serialize();
        zjn_TableBAPI_Test actual = zjn_TableBAPI_Test.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.VBAK[0].VBELN);
    }

    @istest
    private static void testDeserializeError() {
        try {
            zjn_TableBAPI_Test actual = zjn_TableBAPI_Test.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (zjn_TableBAPI_Test.zjn_TableBAPI_TestException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            zjn_TableBAPI_Test actual = zjn_TableBAPI_Test.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (zjn_TableBAPI_Test.zjn_TableBAPI_TestException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        zjn_TableBAPI_Test output = new zjn_TableBAPI_Test();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        zjn_TableBAPI_Test output = new zjn_TableBAPI_Test();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        zjn_TableBAPI_Test output2 = new zjn_TableBAPI_Test();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        zjn_TableBAPI_Test output = new zjn_TableBAPI_Test();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('VBAK'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('VBAK', first.name);
    }

    @istest
    private static void testException() {
        zjn_TableBAPI_Test.zjn_TableBAPI_TestException e = new zjn_TableBAPI_Test.zjn_TableBAPI_TestException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            zjn_TableBAPI_Test.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjn_TableBAPI_Test.zjn_TableBAPI_TestException e) {
            System.assert(true);
        }
        
        try {
            zjn_TableBAPI_Test output = new zjn_TableBAPI_Test();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjn_TableBAPI_Test.zjn_TableBAPI_TestException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            zjn_TableBAPI_Test output = new zjn_TableBAPI_Test();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjn_TableBAPI_Test.zjn_TableBAPI_TestException e) {
            System.assert(true);
        }

        try {
            zjn_TableBAPI_Test output = new zjn_TableBAPI_Test();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjn_TableBAPI_Test.zjn_TableBAPI_TestException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            zjn_TableBAPI_Test.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjn_TableBAPI_Test.zjn_TableBAPI_TestException e) {
            System.assert(true);
        }
        
        try {
            zjn_TableBAPI_Test.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjn_TableBAPI_Test.zjn_TableBAPI_TestException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            zjn_TableBAPI_Test.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (zjn_TableBAPI_Test.zjn_TableBAPI_TestException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        zjn_TableBAPI_Test output = new zjn_TableBAPI_Test();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}