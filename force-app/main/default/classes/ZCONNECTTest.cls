/* 
 * Generated by Overcast UTC 2024-03-12 10:27:43Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ZCONNECTTest {
    @istest
    private static void testZCONNECT() {
        ZCONNECT actual = new ZCONNECT();
        system.assertNotEquals(null, actual.KNA1);
    }

    @istest
    private static void testKNA1() {
        ZCONNECT.KNA1 actual = new ZCONNECT.KNA1();

        actual.MANDT = 'a';
        actual.KUNNR = 'a';
        actual.LAND1 = 'a';
        actual.NAME1 = 'a';
        actual.NAME2 = 'a';
        actual.ORT01 = 'a';
        actual.PSTLZ = 'a';
        actual.REGIO = 'a';
        actual.SORTL = 'a';
        actual.STRAS = 'a';
        actual.TELF1 = 'a';
        actual.TELFX = 'a';
        actual.XCPDK = 'a';
        actual.ADRNR = 'a';
        actual.MCOD1 = 'a';
        actual.MCOD2 = 'a';
        actual.MCOD3 = 'a';
        actual.ANRED = 'a';
        actual.AUFSD = 'a';
        actual.BAHNE = 'a';
        actual.BAHNS = 'a';
        actual.BBBNR = 'a';
        actual.BBSNR = 'a';
        actual.BEGRU = 'a';
        actual.BRSCH = 'a';
        actual.BUBKZ = 'a';
        actual.DATLT = 'a';
        actual.ERDAT = Date.newInstance(2000,1,1);
        actual.ERNAM = 'a';
        actual.EXABL = 'a';
        actual.FAKSD = 'a';
        actual.FISKN = 'a';
        actual.KNAZK = 'a';
        actual.KNRZA = 'a';
        actual.KONZS = 'a';
        actual.KTOKD = 'a';
        actual.KUKLA = 'a';
        actual.LIFNR = 'a';
        actual.LIFSD = 'a';
        actual.LOCCO = 'a';
        actual.LOEVM = 'a';
        actual.NAME3 = 'a';
        actual.NAME4 = 'a';
        actual.NIELS = 'a';
        actual.ORT02 = 'a';
        actual.PFACH = 'a';
        actual.PSTL2 = 'a';
        actual.COUNC = 'a';
        actual.CITYC = 'a';
        actual.RPMKR = 'a';
        actual.SPERR = 'a';
        actual.SPRAS = 'a';
        actual.STCD1 = 'a';
        actual.STCD2 = 'a';
        actual.STKZA = 'a';
        actual.STKZU = 'a';
        actual.TELBX = 'a';
        actual.TELF2 = 'a';
        actual.TELTX = 'a';
        actual.TELX1 = 'a';
        actual.LZONE = 'a';
        actual.XZEMP = 'a';
        actual.VBUND = 'a';
        actual.STCEG = 'a';
        actual.DEAR1 = 'a';
        actual.DEAR2 = 'a';
        actual.DEAR3 = 'a';
        actual.DEAR4 = 'a';
        actual.DEAR5 = 'a';
        actual.GFORM = 'a';
        actual.BRAN1 = 'a';
        actual.BRAN2 = 'a';
        actual.BRAN3 = 'a';
        actual.BRAN4 = 'a';
        actual.BRAN5 = 'a';
        actual.EKONT = 'a';
        actual.UMSAT = 0;
        actual.UMJAH = 'a';
        actual.UWAER = 'a';
        actual.JMZAH = 'a';
        actual.JMJAH = 'a';
        actual.KATR1 = 'a';
        actual.KATR2 = 'a';
        actual.KATR3 = 'a';
        actual.KATR4 = 'a';
        actual.KATR5 = 'a';
        actual.KATR6 = 'a';
        actual.KATR7 = 'a';
        actual.KATR8 = 'a';
        actual.KATR9 = 'a';
        actual.KATR10 = 'a';
        actual.STKZN = 'a';
        actual.UMSA1 = 0;
        actual.TXJCD = 'a';
        actual.PERIV = 'a';
        actual.ABRVW = 'a';
        actual.INSPBYDEBI = 'a';
        actual.INSPATDEBI = 'a';
        actual.KTOCD = 'a';
        actual.PFORT = 'a';
        actual.WERKS = 'a';
        actual.DTAMS = 'a';
        actual.DTAWS = 'a';
        actual.DUEFL = 'a';
        actual.HZUOR = 'a';
        actual.SPERZ = 'a';
        actual.ETIKG = 'a';
        actual.CIVVE = 'a';
        actual.MILVE = 'a';
        actual.KDKG1 = 'a';
        actual.KDKG2 = 'a';
        actual.KDKG3 = 'a';
        actual.KDKG4 = 'a';
        actual.KDKG5 = 'a';
        actual.XKNZA = 'a';
        actual.FITYP = 'a';
        actual.STCDT = 'a';
        actual.STCD3 = 'a';
        actual.STCD4 = 'a';
        actual.STCD5 = 'a';
        actual.STCD6 = 'a';
        actual.XICMS = 'a';
        actual.XXIPI = 'a';
        actual.XSUBT = 'a';
        actual.CFOPC = 'a';
        actual.TXLW1 = 'a';
        actual.TXLW2 = 'a';
        actual.CCC01 = 'a';
        actual.CCC02 = 'a';
        actual.CCC03 = 'a';
        actual.CCC04 = 'a';
        actual.CASSD = 'a';
        actual.KNURL = 'a';
        actual.J_1KFREPRE = 'a';
        actual.J_1KFTBUS = 'a';
        actual.J_1KFTIND = 'a';
        actual.CONFS = 'a';
        actual.UPDAT = Date.newInstance(2000,1,1);
        actual.UPTIM = 'a';
        actual.NODEL = 'a';
        actual.DEAR6 = 'a';
        actual.CVP_XBLCK = 'a';
        actual.SUFRAMA = 'a';
        actual.RG = 'a';
        actual.EXP = 'a';
        actual.UF = 'a';
        actual.RGDATE = Date.newInstance(2000,1,1);
        actual.RIC = 'a';
        actual.RNE = 'a';
        actual.RNEDATE = Date.newInstance(2000,1,1);
        actual.CNAE = 'a';
        actual.LEGALNAT = 'a';
        actual.CRTN = 'a';
        actual.ICMSTAXPAY = 'a';
        actual.INDTYP = 'a';
        actual.TDT = 'a';
        actual.COMSIZE = 'a';
        actual.DECREGPC = 'a';
        actual.FISDUMMY = 'a';
        actual.x_FIS_ENTL_DAUER = 'a';
        actual.x_VSO_R_PALHGT = 0;
        actual.x_VSO_R_PAL_UL = 'a';
        actual.x_VSO_R_PK_MAT = 'a';
        actual.x_VSO_R_MATPAL = 'a';
        actual.x_VSO_R_I_NO_LYR = 'a';
        actual.x_VSO_R_ONE_MAT = 'a';
        actual.x_VSO_R_ONE_SORT = 'a';
        actual.x_VSO_R_ULD_SIDE = 'a';
        actual.x_VSO_R_LOAD_PREF = 'a';
        actual.x_VSO_R_DPOINT = 'a';
        actual.ALC = 'a';
        actual.PMT_OFFICE = 'a';
        actual.FEE_SCHEDULE = 'a';
        actual.DUNS = 'a';
        actual.DUNS4 = 'a';
        actual.SAM_UE_ID = 'a';
        actual.SAM_EFT_IND = 'a';
        actual.PSOFG = 'a';
        actual.PSOIS = 'a';
        actual.PSON1 = 'a';
        actual.PSON2 = 'a';
        actual.PSON3 = 'a';
        actual.PSOVN = 'a';
        actual.PSOTL = 'a';
        actual.PSOHS = 'a';
        actual.PSOST = 'a';
        actual.PSOO1 = 'a';
        actual.PSOO2 = 'a';
        actual.PSOO3 = 'a';
        actual.PSOO4 = 'a';
        actual.PSOO5 = 'a';
        actual.ZZHAA_ADD1 = 'a';
        actual.ZZHAA_ADD2 = 'a';
        actual.ZZHAA_ADD3 = 'a';
        actual.ZZHAA_ADD4 = 'a';
        actual.ZZHCN_PS_RESI = 'a';
        actual.ZZHCN_PS_SATU = 'a';
        actual.ZZHCN_PS_LIFT = 'a';
        actual.ZZHCN_PS_CALL = 'a';
        actual.ZZHCN_PS_INSI = 'a';
        actual.ZZHCN_PS_APPO = 'a';
        actual.ZZHAC_PS_CHAD = 'a';
        actual.ZZHWW_EASYALLOW = 'a';
        actual.ZZHWW_ENOALLREAS = 'a';
        actual.ZZHWW_EALLUPDDT = Date.newInstance(2000,1,1);
        actual.ZZHWW_EALLUPDID = 'a';
        actual.ZZHWW_PINNR = 'a';
        actual.ZZHWW_PINNR2 = 'a';
        actual.ZZHWW_PINNRUPDDT = Date.newInstance(2000,1,1);
        actual.ZZHWW_PINNRUPDID = 'a';
        actual.ZZHWW_EASYBLOCK = 'a';
        actual.ZZHWW_EASYBLREAS = 'a';
        actual.ZZHWW_EASYBLUPDT = Date.newInstance(2000,1,1);
        actual.ZZHWW_EASYBLUPID = 'a';
        actual.ZZHWW_ADMAPINNR = 'a';
        actual.ZZHWW_ADMAPINUDT = Date.newInstance(2000,1,1);
        actual.ZZHWW_ADMAPINUID = 'a';
        actual.ZZHWW_HAEFEMPLOY = 'a';
        actual.ZZHWW_MEMBER = 'a';
        actual.ZZHWW_MEMBERDT = Date.newInstance(2000,1,1);
        actual.ZZHWW_CARPTNO = 'a';
        actual.ZZHWW_WE_IS_UE = 'a';
        actual.ZZHWW_MEMBERMM = 'a';
        actual.ZZHWW_MEMBERDTMM = Date.newInstance(2000,1,1);
        actual.ZZHWW_ZUGFERD_TRANS = 'a';
        actual.ZZHWW_E_INVOICING_ADD_INFO = 'a';
        actual.ZZHWW_DELREASON = 'a';
        actual.ZZHWW_BILLPERIOD = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.LAND1);
        system.assertEquals('a', actual.NAME1);
        system.assertEquals('a', actual.NAME2);
        system.assertEquals('a', actual.ORT01);
        system.assertEquals('a', actual.PSTLZ);
        system.assertEquals('a', actual.REGIO);
        system.assertEquals('a', actual.SORTL);
        system.assertEquals('a', actual.STRAS);
        system.assertEquals('a', actual.TELF1);
        system.assertEquals('a', actual.TELFX);
        system.assertEquals('a', actual.XCPDK);
        system.assertEquals('a', actual.ADRNR);
        system.assertEquals('a', actual.MCOD1);
        system.assertEquals('a', actual.MCOD2);
        system.assertEquals('a', actual.MCOD3);
        system.assertEquals('a', actual.ANRED);
        system.assertEquals('a', actual.AUFSD);
        system.assertEquals('a', actual.BAHNE);
        system.assertEquals('a', actual.BAHNS);
        system.assertEquals('a', actual.BBBNR);
        system.assertEquals('a', actual.BBSNR);
        system.assertEquals('a', actual.BEGRU);
        system.assertEquals('a', actual.BRSCH);
        system.assertEquals('a', actual.BUBKZ);
        system.assertEquals('a', actual.DATLT);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals('a', actual.EXABL);
        system.assertEquals('a', actual.FAKSD);
        system.assertEquals('a', actual.FISKN);
        system.assertEquals('a', actual.KNAZK);
        system.assertEquals('a', actual.KNRZA);
        system.assertEquals('a', actual.KONZS);
        system.assertEquals('a', actual.KTOKD);
        system.assertEquals('a', actual.KUKLA);
        system.assertEquals('a', actual.LIFNR);
        system.assertEquals('a', actual.LIFSD);
        system.assertEquals('a', actual.LOCCO);
        system.assertEquals('a', actual.LOEVM);
        system.assertEquals('a', actual.NAME3);
        system.assertEquals('a', actual.NAME4);
        system.assertEquals('a', actual.NIELS);
        system.assertEquals('a', actual.ORT02);
        system.assertEquals('a', actual.PFACH);
        system.assertEquals('a', actual.PSTL2);
        system.assertEquals('a', actual.COUNC);
        system.assertEquals('a', actual.CITYC);
        system.assertEquals('a', actual.RPMKR);
        system.assertEquals('a', actual.SPERR);
        system.assertEquals('a', actual.SPRAS);
        system.assertEquals('a', actual.STCD1);
        system.assertEquals('a', actual.STCD2);
        system.assertEquals('a', actual.STKZA);
        system.assertEquals('a', actual.STKZU);
        system.assertEquals('a', actual.TELBX);
        system.assertEquals('a', actual.TELF2);
        system.assertEquals('a', actual.TELTX);
        system.assertEquals('a', actual.TELX1);
        system.assertEquals('a', actual.LZONE);
        system.assertEquals('a', actual.XZEMP);
        system.assertEquals('a', actual.VBUND);
        system.assertEquals('a', actual.STCEG);
        system.assertEquals('a', actual.DEAR1);
        system.assertEquals('a', actual.DEAR2);
        system.assertEquals('a', actual.DEAR3);
        system.assertEquals('a', actual.DEAR4);
        system.assertEquals('a', actual.DEAR5);
        system.assertEquals('a', actual.GFORM);
        system.assertEquals('a', actual.BRAN1);
        system.assertEquals('a', actual.BRAN2);
        system.assertEquals('a', actual.BRAN3);
        system.assertEquals('a', actual.BRAN4);
        system.assertEquals('a', actual.BRAN5);
        system.assertEquals('a', actual.EKONT);
        system.assertEquals(0, actual.UMSAT);
        system.assertEquals('a', actual.UMJAH);
        system.assertEquals('a', actual.UWAER);
        system.assertEquals('a', actual.JMZAH);
        system.assertEquals('a', actual.JMJAH);
        system.assertEquals('a', actual.KATR1);
        system.assertEquals('a', actual.KATR2);
        system.assertEquals('a', actual.KATR3);
        system.assertEquals('a', actual.KATR4);
        system.assertEquals('a', actual.KATR5);
        system.assertEquals('a', actual.KATR6);
        system.assertEquals('a', actual.KATR7);
        system.assertEquals('a', actual.KATR8);
        system.assertEquals('a', actual.KATR9);
        system.assertEquals('a', actual.KATR10);
        system.assertEquals('a', actual.STKZN);
        system.assertEquals(0, actual.UMSA1);
        system.assertEquals('a', actual.TXJCD);
        system.assertEquals('a', actual.PERIV);
        system.assertEquals('a', actual.ABRVW);
        system.assertEquals('a', actual.INSPBYDEBI);
        system.assertEquals('a', actual.INSPATDEBI);
        system.assertEquals('a', actual.KTOCD);
        system.assertEquals('a', actual.PFORT);
        system.assertEquals('a', actual.WERKS);
        system.assertEquals('a', actual.DTAMS);
        system.assertEquals('a', actual.DTAWS);
        system.assertEquals('a', actual.DUEFL);
        system.assertEquals('a', actual.HZUOR);
        system.assertEquals('a', actual.SPERZ);
        system.assertEquals('a', actual.ETIKG);
        system.assertEquals('a', actual.CIVVE);
        system.assertEquals('a', actual.MILVE);
        system.assertEquals('a', actual.KDKG1);
        system.assertEquals('a', actual.KDKG2);
        system.assertEquals('a', actual.KDKG3);
        system.assertEquals('a', actual.KDKG4);
        system.assertEquals('a', actual.KDKG5);
        system.assertEquals('a', actual.XKNZA);
        system.assertEquals('a', actual.FITYP);
        system.assertEquals('a', actual.STCDT);
        system.assertEquals('a', actual.STCD3);
        system.assertEquals('a', actual.STCD4);
        system.assertEquals('a', actual.STCD5);
        system.assertEquals('a', actual.STCD6);
        system.assertEquals('a', actual.XICMS);
        system.assertEquals('a', actual.XXIPI);
        system.assertEquals('a', actual.XSUBT);
        system.assertEquals('a', actual.CFOPC);
        system.assertEquals('a', actual.TXLW1);
        system.assertEquals('a', actual.TXLW2);
        system.assertEquals('a', actual.CCC01);
        system.assertEquals('a', actual.CCC02);
        system.assertEquals('a', actual.CCC03);
        system.assertEquals('a', actual.CCC04);
        system.assertEquals('a', actual.CASSD);
        system.assertEquals('a', actual.KNURL);
        system.assertEquals('a', actual.J_1KFREPRE);
        system.assertEquals('a', actual.J_1KFTBUS);
        system.assertEquals('a', actual.J_1KFTIND);
        system.assertEquals('a', actual.CONFS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.UPDAT);
        system.assertEquals('a', actual.UPTIM);
        system.assertEquals('a', actual.NODEL);
        system.assertEquals('a', actual.DEAR6);
        system.assertEquals('a', actual.CVP_XBLCK);
        system.assertEquals('a', actual.SUFRAMA);
        system.assertEquals('a', actual.RG);
        system.assertEquals('a', actual.EXP);
        system.assertEquals('a', actual.UF);
        system.assertEquals(Date.newInstance(2000,1,1), actual.RGDATE);
        system.assertEquals('a', actual.RIC);
        system.assertEquals('a', actual.RNE);
        system.assertEquals(Date.newInstance(2000,1,1), actual.RNEDATE);
        system.assertEquals('a', actual.CNAE);
        system.assertEquals('a', actual.LEGALNAT);
        system.assertEquals('a', actual.CRTN);
        system.assertEquals('a', actual.ICMSTAXPAY);
        system.assertEquals('a', actual.INDTYP);
        system.assertEquals('a', actual.TDT);
        system.assertEquals('a', actual.COMSIZE);
        system.assertEquals('a', actual.DECREGPC);
        system.assertEquals('a', actual.FISDUMMY);
        system.assertEquals('a', actual.x_FIS_ENTL_DAUER);
        system.assertEquals(0, actual.x_VSO_R_PALHGT);
        system.assertEquals('a', actual.x_VSO_R_PAL_UL);
        system.assertEquals('a', actual.x_VSO_R_PK_MAT);
        system.assertEquals('a', actual.x_VSO_R_MATPAL);
        system.assertEquals('a', actual.x_VSO_R_I_NO_LYR);
        system.assertEquals('a', actual.x_VSO_R_ONE_MAT);
        system.assertEquals('a', actual.x_VSO_R_ONE_SORT);
        system.assertEquals('a', actual.x_VSO_R_ULD_SIDE);
        system.assertEquals('a', actual.x_VSO_R_LOAD_PREF);
        system.assertEquals('a', actual.x_VSO_R_DPOINT);
        system.assertEquals('a', actual.ALC);
        system.assertEquals('a', actual.PMT_OFFICE);
        system.assertEquals('a', actual.FEE_SCHEDULE);
        system.assertEquals('a', actual.DUNS);
        system.assertEquals('a', actual.DUNS4);
        system.assertEquals('a', actual.SAM_UE_ID);
        system.assertEquals('a', actual.SAM_EFT_IND);
        system.assertEquals('a', actual.PSOFG);
        system.assertEquals('a', actual.PSOIS);
        system.assertEquals('a', actual.PSON1);
        system.assertEquals('a', actual.PSON2);
        system.assertEquals('a', actual.PSON3);
        system.assertEquals('a', actual.PSOVN);
        system.assertEquals('a', actual.PSOTL);
        system.assertEquals('a', actual.PSOHS);
        system.assertEquals('a', actual.PSOST);
        system.assertEquals('a', actual.PSOO1);
        system.assertEquals('a', actual.PSOO2);
        system.assertEquals('a', actual.PSOO3);
        system.assertEquals('a', actual.PSOO4);
        system.assertEquals('a', actual.PSOO5);
        system.assertEquals('a', actual.ZZHAA_ADD1);
        system.assertEquals('a', actual.ZZHAA_ADD2);
        system.assertEquals('a', actual.ZZHAA_ADD3);
        system.assertEquals('a', actual.ZZHAA_ADD4);
        system.assertEquals('a', actual.ZZHCN_PS_RESI);
        system.assertEquals('a', actual.ZZHCN_PS_SATU);
        system.assertEquals('a', actual.ZZHCN_PS_LIFT);
        system.assertEquals('a', actual.ZZHCN_PS_CALL);
        system.assertEquals('a', actual.ZZHCN_PS_INSI);
        system.assertEquals('a', actual.ZZHCN_PS_APPO);
        system.assertEquals('a', actual.ZZHAC_PS_CHAD);
        system.assertEquals('a', actual.ZZHWW_EASYALLOW);
        system.assertEquals('a', actual.ZZHWW_ENOALLREAS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZHWW_EALLUPDDT);
        system.assertEquals('a', actual.ZZHWW_EALLUPDID);
        system.assertEquals('a', actual.ZZHWW_PINNR);
        system.assertEquals('a', actual.ZZHWW_PINNR2);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZHWW_PINNRUPDDT);
        system.assertEquals('a', actual.ZZHWW_PINNRUPDID);
        system.assertEquals('a', actual.ZZHWW_EASYBLOCK);
        system.assertEquals('a', actual.ZZHWW_EASYBLREAS);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZHWW_EASYBLUPDT);
        system.assertEquals('a', actual.ZZHWW_EASYBLUPID);
        system.assertEquals('a', actual.ZZHWW_ADMAPINNR);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZHWW_ADMAPINUDT);
        system.assertEquals('a', actual.ZZHWW_ADMAPINUID);
        system.assertEquals('a', actual.ZZHWW_HAEFEMPLOY);
        system.assertEquals('a', actual.ZZHWW_MEMBER);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZHWW_MEMBERDT);
        system.assertEquals('a', actual.ZZHWW_CARPTNO);
        system.assertEquals('a', actual.ZZHWW_WE_IS_UE);
        system.assertEquals('a', actual.ZZHWW_MEMBERMM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ZZHWW_MEMBERDTMM);
        system.assertEquals('a', actual.ZZHWW_ZUGFERD_TRANS);
        system.assertEquals('a', actual.ZZHWW_E_INVOICING_ADD_INFO);
        system.assertEquals('a', actual.ZZHWW_DELREASON);
        system.assertEquals('a', actual.ZZHWW_BILLPERIOD);
    }
    @istest
    private static void testrunQuery() {
        ZCONNECT request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        ZCONNECT response = request.runQuery(query1);
        system.assertEquals('a', response.KNA1[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static ZCONNECT testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ZCONNECT');
        ZCONNECT request = new ZCONNECT();
        ZCONNECT.KNA1 value1 = new ZCONNECT.KNA1();
        value1.MANDT = 'a';
        request.KNA1.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ZCONNECT input = new ZCONNECT();
        ZCONNECT.KNA1 value1 = new ZCONNECT.KNA1();
        value1.MANDT = 'a';
        input.KNA1.add(value1);
        ZCONNECT actual = (ZCONNECT)JSON.deserialize(input.serialize(), ZCONNECT.class);
        system.assertEquals('a', actual.KNA1[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        ZCONNECT output = new ZCONNECT();
        ZCONNECT.KNA1 value1 = new ZCONNECT.KNA1();
        value1.MANDT = 'a';
        output.KNA1.add(value1);

        string s = output.serialize();
        ZCONNECT actual = ZCONNECT.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.KNA1[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ZCONNECT actual = ZCONNECT.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (ZCONNECT.ZCONNECTException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ZCONNECT actual = ZCONNECT.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (ZCONNECT.ZCONNECTException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        ZCONNECT output = new ZCONNECT();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ZCONNECT output = new ZCONNECT();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ZCONNECT output2 = new ZCONNECT();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ZCONNECT output = new ZCONNECT();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('KNA1'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('KNA1', first.name);
    }

    @istest
    private static void testException() {
        ZCONNECT.ZCONNECTException e = new ZCONNECT.ZCONNECTException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            ZCONNECT.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ZCONNECT.ZCONNECTException e) {
            System.assert(true);
        }
        
        try {
            ZCONNECT output = new ZCONNECT();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ZCONNECT.ZCONNECTException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            ZCONNECT output = new ZCONNECT();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ZCONNECT.ZCONNECTException e) {
            System.assert(true);
        }

        try {
            ZCONNECT output = new ZCONNECT();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ZCONNECT.ZCONNECTException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            ZCONNECT.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ZCONNECT.ZCONNECTException e) {
            System.assert(true);
        }
        
        try {
            ZCONNECT.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ZCONNECT.ZCONNECTException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ZCONNECT.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ZCONNECT.ZCONNECTException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        ZCONNECT output = new ZCONNECT();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}