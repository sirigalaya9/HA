/* 
 * Generated by Overcast UTC 2024-03-27 04:28:09Z.
 * Changes to this class may cause incorrect behavior and will be lost if the scenario is re-activated.
 */
@istest
private class ovcSAPCustomerMasterSalesTest {
    @istest
    private static void testovcSAPCustomerMasterSales() {
        ovcSAPCustomerMasterSales actual = new ovcSAPCustomerMasterSales();
        system.assertNotEquals(null, actual.KNVV);
    }

    @istest
    private static void testKNVV() {
        ovcSAPCustomerMasterSales.KNVV actual = new ovcSAPCustomerMasterSales.KNVV();

        actual.MANDT = 'a';
        actual.KUNNR = 'a';
        actual.VKORG = 'a';
        actual.VTWEG = 'a';
        actual.SPART = 'a';
        actual.ERNAM = 'a';
        actual.ERDAT = Date.newInstance(2000,1,1);
        actual.LOEVM = 'a';
        actual.KDGRP = 'a';
        actual.BZIRK = 'a';
        actual.INCO1 = 'a';
        actual.WAERS = 'a';
        actual.VKGRP = 'a';
        actual.VKBUR = 'a';
        actual.INCO2_L = 'a';
        system.assertEquals('a', actual.MANDT);
        system.assertEquals('a', actual.KUNNR);
        system.assertEquals('a', actual.VKORG);
        system.assertEquals('a', actual.VTWEG);
        system.assertEquals('a', actual.SPART);
        system.assertEquals('a', actual.ERNAM);
        system.assertEquals(Date.newInstance(2000,1,1), actual.ERDAT);
        system.assertEquals('a', actual.LOEVM);
        system.assertEquals('a', actual.KDGRP);
        system.assertEquals('a', actual.BZIRK);
        system.assertEquals('a', actual.INCO1);
        system.assertEquals('a', actual.WAERS);
        system.assertEquals('a', actual.VKGRP);
        system.assertEquals('a', actual.VKBUR);
        system.assertEquals('a', actual.INCO2_L);
    }
    @istest
    private static void testrunQuery() {
        ovcSAPCustomerMasterSales request = testSetup();
        overcast.Query query1 = new overcast.Query();
        query1.limit_x = 10;
        query1.offset = 10;
        
        ovcSAPCustomerMasterSales response = request.runQuery(query1);
        system.assertEquals('a', response.KNVV[0].MANDT);
        string requestid = request.runQueryAsync(query1, null, null, new Continuation(10));
    }

    private static ovcSAPCustomerMasterSales testSetup() {
        overcast.TestingUtilities.SetupTestEnvironment('ovcSAPCustomerMasterSales');
        ovcSAPCustomerMasterSales request = new ovcSAPCustomerMasterSales();
        ovcSAPCustomerMasterSales.KNVV value1 = new ovcSAPCustomerMasterSales.KNVV();
        value1.MANDT = 'a';
        request.KNVV.add(value1);

        string s = request.serialize();
        request.testResponse = '{"output":' + s + '}';
        return request;
    }


    @istest
    private static void testSerialize() {
        ovcSAPCustomerMasterSales input = new ovcSAPCustomerMasterSales();
        ovcSAPCustomerMasterSales.KNVV value1 = new ovcSAPCustomerMasterSales.KNVV();
        value1.MANDT = 'a';
        input.KNVV.add(value1);
        ovcSAPCustomerMasterSales actual = (ovcSAPCustomerMasterSales)JSON.deserialize(input.serialize(), ovcSAPCustomerMasterSales.class);
        system.assertEquals('a', actual.KNVV[0].MANDT);
    }

    @istest
    private static void testDeserialize() {
        ovcSAPCustomerMasterSales output = new ovcSAPCustomerMasterSales();
        ovcSAPCustomerMasterSales.KNVV value1 = new ovcSAPCustomerMasterSales.KNVV();
        value1.MANDT = 'a';
        output.KNVV.add(value1);

        string s = output.serialize();
        ovcSAPCustomerMasterSales actual = ovcSAPCustomerMasterSales.deserialize('{"output":' + s + '}');
        system.assertEquals('a', actual.KNVV[0].MANDT);
    }

    @istest
    private static void testDeserializeError() {
        try {
            ovcSAPCustomerMasterSales actual = ovcSAPCustomerMasterSales.deserialize('{"error":["A test error"]}');
            system.assert(false, 'No exception thrown');
        } catch (ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ovcSAPCustomerMasterSales actual = ovcSAPCustomerMasterSales.deserialize('{"error":["A test error"],"backendErrorMessages":["A test message"]}');
            system.assert(false, 'No exception thrown');
        } catch (ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException e) {
            system.assertEquals('A test error', e.getMessage());
            system.assertEquals(1, e.getMessages().size());
            system.assertEquals('A test error', e.getMessages()[0]);
            system.assertEquals(1, e.getBackendMessages().size());
            system.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetterSetter() {
        ovcSAPCustomerMasterSales output = new ovcSAPCustomerMasterSales();
        output.set('SAMPLE1', new map<string, object>{
            'FIELD1' => 'VALUE1'
        });
        
        system.assertEquals(null, output.get('NOVAL'));
        
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));		
    }
    
    @istest
    private static void testLoadAsyncResponse() {
        ovcSAPCustomerMasterSales output = new ovcSAPCustomerMasterSales();
        output.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        system.assertEquals(null, output.get('NOVAL'));
        map<string, object> sample1 = (map<string, object>)output.get('SAMPLE1');
        system.assertNotEquals(null, sample1);
        system.assertEquals('VALUE1', sample1.get('FIELD1'));

        overcast.Globals.IsOCF = true;
        ovcSAPCustomerMasterSales output2 = new ovcSAPCustomerMasterSales();
        output2.loadAsyncResponse('{"output":{"SAMPLE1":{"FIELD1":"VALUE1"}}}');
        overcast.Globals.IsOCF = false;
        system.assertEquals(null, output2.get('NOVAL'));
        map<string, object> sample2 = (map<string, object>)output2.get('SAMPLE1');
        system.assertNotEquals(null, sample2);
        system.assertEquals('VALUE1', sample2.get('FIELD1'));
    }

    @istest
    private static void testGetMetadata() {
        ovcSAPCustomerMasterSales output = new ovcSAPCustomerMasterSales();
        map<string, overcast.TypeInfo> metadata = output.getMetadata();
        
        set<string> keys = metadata.keySet();
        system.assert(keys.contains('KNVV'));
        
        overcast.TypeInfo first = metadata.get(output.getTopTypeName());
        system.assertNotEquals(null, first);
        system.assertEquals('KNVV', first.name);
    }

    @istest
    private static void testException() {
        ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException e = new ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException();
        e.setMessages(new List<String>{'M1', 'M2'});
        System.assertEquals(2, e.getMessages().size());
    }

    @istest
    private static void testErrorResponse() {
        try {
            ovcSAPCustomerMasterSales.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException e) {
            System.assert(true);
        }
        
        try {
            ovcSAPCustomerMasterSales output = new ovcSAPCustomerMasterSales();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals('ERROR1', e.getMessages()[0]);
        }
        
        try {
            ovcSAPCustomerMasterSales output = new ovcSAPCustomerMasterSales();
            output.loadAsyncResponse('{"backendMessage":"TEST RESULT"}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException e) {
            System.assert(true);
        }

        try {
            ovcSAPCustomerMasterSales output = new ovcSAPCustomerMasterSales();
            output.loadAsyncResponse('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }

        overcast.Globals.IsOCF = true;
        
        try {
            ovcSAPCustomerMasterSales.deserialize('');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException e) {
            System.assert(true);
        }
        
        try {
            ovcSAPCustomerMasterSales.deserialize('{"error":["ERROR1","ERROR2"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(0, e.getBackendMessages().size());
        }

        try {
            ovcSAPCustomerMasterSales.deserialize('{"error":["ERROR1","ERROR2"],"backendErrorMessages":["A test message"]}');
            System.assert(false, 'Expected exception not thrown.');
        } catch (ovcSAPCustomerMasterSales.ovcSAPCustomerMasterSalesException e) {
            System.assertEquals('ERROR1;ERROR2', e.getMessage());
            System.assertEquals(2, e.getMessages().size());
            System.assertEquals('ERROR1', e.getMessages()[0]);
            System.assertEquals('ERROR2', e.getMessages()[1]);
            System.assertEquals(1, e.getBackendMessages().size());
            System.assertEquals('A test message', e.getBackendMessages()[0]);
        }
    }

    @istest
    private static void testGetBackendMessage() {
        ovcSAPCustomerMasterSales output = new ovcSAPCustomerMasterSales();
        output.loadAsyncResponse('{"output":{}, "backendMessage":"TEST RESULT"}');
        system.assertEquals('TEST RESULT', output.getBackendMessage());
    }

}